// home-os System Monitor - Display & UI
// Rendering and user interface for system monitor

import "../kernel/src/core/foundation.home" as foundation
import "sysmon.home" as sysmon

const GRAPH_WIDTH: u32 = 60
const GRAPH_HEIGHT: u32 = 10

fn sysmon_draw_overview() {
  foundation.vga_clear()
  
  // Header
  foundation.vga_write_string("=== System Monitor ===\n\n")
  
  // CPU Section
  foundation.vga_write_string("CPU Usage: ")
  var cpu: u32 = sysmon.sysmon_get_cpu_usage()
  foundation.serial_write_hex(cpu)
  foundation.vga_write_string("%  ")
  sysmon_draw_bar(cpu, 40)
  foundation.vga_write_string("\n")
  
  // Per-core CPU
  var core_count: u32 = 4  // TODO: Get from kernel
  var core: u32 = 0
  while core < core_count {
    foundation.vga_write_string("  Core ")
    foundation.serial_write_hex(core)
    foundation.vga_write_string(": ")
    var core_usage: u32 = sysmon.sysmon_get_cpu_usage_per_core(core)
    foundation.serial_write_hex(core_usage)
    foundation.vga_write_string("%  ")
    sysmon_draw_bar(core_usage, 30)
    foundation.vga_write_string("\n")
    core = core + 1
  }
  
  foundation.vga_write_string("\n")
  
  // Memory Section
  foundation.vga_write_string("Memory: ")
  var mem_used: u64 = sysmon.sysmon_get_memory_used()
  var mem_total: u64 = sysmon.sysmon_get_memory_total()
  var mem_percent: u32 = sysmon.sysmon_get_memory_usage()
  
  sysmon_format_bytes(mem_used)
  foundation.vga_write_string(" / ")
  sysmon_format_bytes(mem_total)
  foundation.vga_write_string(" (")
  foundation.serial_write_hex(mem_percent)
  foundation.vga_write_string("%)  ")
  sysmon_draw_bar(mem_percent, 40)
  foundation.vga_write_string("\n\n")
  
  // Disk Section
  foundation.vga_write_string("Disk Usage: ")
  var disk: u32 = sysmon.sysmon_get_disk_usage()
  foundation.serial_write_hex(disk)
  foundation.vga_write_string("%  ")
  sysmon_draw_bar(disk, 40)
  foundation.vga_write_string("\n\n")
  
  // Network Section
  foundation.vga_write_string("Network:\n")
  foundation.vga_write_string("  RX: ")
  sysmon_format_bytes(sysmon.sysmon_get_network_rx_bytes())
  foundation.vga_write_string("\n")
  foundation.vga_write_string("  TX: ")
  sysmon_format_bytes(sysmon.sysmon_get_network_tx_bytes())
  foundation.vga_write_string("\n\n")
  
  // Process Stats
  foundation.vga_write_string("Processes: ")
  foundation.serial_write_hex(sysmon.sysmon_get_process_count())
  foundation.vga_write_string("  Threads: ")
  foundation.serial_write_hex(sysmon.sysmon_get_thread_count())
  foundation.vga_write_string("\n\n")
  
  // Footer
  foundation.vga_write_string("F1=Overview F2=Processes F3=Graphs K=Kill Q=Quit\n")
}

fn sysmon_draw_processes() {
  foundation.vga_clear()
  
  foundation.vga_write_string("=== Process List ===\n\n")
  
  // Column headers
  foundation.vga_write_string("  PID   Name                    CPU%  Memory    State\n")
  foundation.vga_write_string("  ")
  var i: u32 = 0
  while i < 65 {
    foundation.vga_write_string("-")
    i = i + 1
  }
  foundation.vga_write_string("\n")
  
  // Process list (top 20)
  var count: u32 = sysmon.sysmon_get_process_count()
  if count > 20 { count = 20 }
  
  i = 0
  while i < count {
    // TODO: Get process info and display
    foundation.vga_write_string("  ")
    foundation.serial_write_hex(i + 1)
    foundation.vga_write_string("     process")
    foundation.serial_write_hex(i)
    foundation.vga_write_string("              5%    128 MB    Running\n")
    i = i + 1
  }
  
  foundation.vga_write_string("\n")
  foundation.vga_write_string("Arrows=Select K=Kill R=Refresh Q=Quit\n")
}

fn sysmon_draw_graphs() {
  foundation.vga_clear()
  
  foundation.vga_write_string("=== Resource Graphs ===\n\n")
  
  // CPU Graph
  foundation.vga_write_string("CPU Usage (%):\n")
  sysmon_draw_graph_cpu()
  foundation.vga_write_string("\n")
  
  // Memory Graph
  foundation.vga_write_string("Memory Usage (%):\n")
  sysmon_draw_graph_memory()
  foundation.vga_write_string("\n")
  
  // Network Graph
  foundation.vga_write_string("Network Activity:\n")
  sysmon_draw_graph_network()
  foundation.vga_write_string("\n")
  
  foundation.vga_write_string("F1=Overview F2=Processes F3=Graphs Q=Quit\n")
}

fn sysmon_draw_bar(percent: u32, width: u32) {
  var filled: u32 = (percent * width) / 100
  
  foundation.vga_write_string("[")
  
  var i: u32 = 0
  while i < width {
    if i < filled {
      foundation.vga_write_string("█")
    } else {
      foundation.vga_write_string(" ")
    }
    i = i + 1
  }
  
  foundation.vga_write_string("]")
}

fn sysmon_draw_graph_cpu() {
  // Draw ASCII graph of CPU history
  var max_height: u32 = 10
  var y: u32 = max_height
  
  while y > 0 {
    var threshold: u32 = (y * 100) / max_height
    
    foundation.vga_write_string("  ")
    if y == max_height {
      foundation.vga_write_string("100|")
    } else if y == max_height / 2 {
      foundation.vga_write_string(" 50|")
    } else if y == 1 {
      foundation.vga_write_string("  0|")
    } else {
      foundation.vga_write_string("   |")
    }
    
    var x: u32 = 0
    while x < GRAPH_WIDTH {
      // TODO: Get actual CPU history value
      var value: u32 = 50  // Placeholder
      
      if value >= threshold {
        foundation.vga_write_string("█")
      } else {
        foundation.vga_write_string(" ")
      }
      x = x + 1
    }
    
    foundation.vga_write_string("\n")
    y = y - 1
  }
  
  foundation.vga_write_string("     +")
  var i: u32 = 0
  while i < GRAPH_WIDTH {
    foundation.vga_write_string("-")
    i = i + 1
  }
  foundation.vga_write_string("\n")
}

fn sysmon_draw_graph_memory() {
  // Similar to CPU graph
  foundation.vga_write_string("  [Memory graph placeholder]\n")
}

fn sysmon_draw_graph_network() {
  // Similar to CPU graph
  foundation.vga_write_string("  [Network graph placeholder]\n")
}

fn sysmon_format_bytes(bytes: u64) {
  if bytes < 1024 {
    foundation.serial_write_hex(@truncate(bytes, u32))
    foundation.vga_write_string(" B")
  } else if bytes < 1048576 {
    var kb: u32 = @truncate(bytes / 1024, u32)
    foundation.serial_write_hex(kb)
    foundation.vga_write_string(" KB")
  } else if bytes < 1073741824 {
    var mb: u32 = @truncate(bytes / 1048576, u32)
    foundation.serial_write_hex(mb)
    foundation.vga_write_string(" MB")
  } else {
    var gb: u32 = @truncate(bytes / 1073741824, u32)
    foundation.serial_write_hex(gb)
    foundation.vga_write_string(" GB")
  }
}

export fn sysmon_render(view_mode: u32) {
  if view_mode == 0 {
    sysmon_draw_overview()
  } else if view_mode == 1 {
    sysmon_draw_processes()
  } else if view_mode == 2 {
    sysmon_draw_graphs()
  }
}

export fn sysmon_kill_process(pid: u32) -> u32 {
  foundation.serial_write_string("[SysMon] Killing process ")
  foundation.serial_write_hex(pid)
  foundation.serial_write_string("\n")
  
  // TODO: Call kernel to kill process
  return 0
}
