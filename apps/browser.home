// home-os Web Browser
// Modern web browser with HTML/CSS/JS rendering via Craft WebView

import "../kernel/src/core/foundation.home" as foundation
import "../kernel/src/core/filesystem.home" as filesystem
import "../kernel/src/network/network.home" as network
import "../kernel/src/lib/craft_lib.home" as craft

const MAX_TABS: u32 = 10
const MAX_URL_LENGTH: u32 = 2048
const MAX_HISTORY: u32 = 100
const MAX_BOOKMARKS: u32 = 50

struct BrowserTab {
  url: [u8; 2048],
  title: [u8; 256],
  webview_id: u32,
  loading: u32,
  progress: u32,
  active: u32
}

struct HistoryEntry {
  url: [u8; 2048],
  title: [u8; 256],
  timestamp: u64
}

struct Bookmark {
  url: [u8; 2048],
  title: [u8; 256]
}

var tabs: [BrowserTab; 10]
var tab_count: u32 = 0
var active_tab: u32 = 0

var history: [HistoryEntry; 100]
var history_count: u32 = 0

var bookmarks: [Bookmark; 50]
var bookmark_count: u32 = 0

var browser_initialized: u32 = 0
var private_mode: u32 = 0

export fn browser_init() {
  if browser_initialized == 1 { return }
  
  // Initialize Craft WebView
  craft.craft_init()
  craft.craft_webview_init()
  
  // Create initial tab
  browser_new_tab("about:home")
  
  browser_initialized = 1
  foundation.serial_write_string("[Browser] Initialized\n")
}

export fn browser_new_tab(url: u64) -> u32 {
  if tab_count >= MAX_TABS { return 0xFFFFFFFF }
  
  var tab_id: u32 = tab_count
  
  // Copy URL
  var i: u32 = 0
  while i < MAX_URL_LENGTH - 1 {
    var ch: u8 = @intToPtr(url + i, u8)
    tabs[tab_id].url[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  tabs[tab_id].url[i] = 0
  
  // Initialize title
  tabs[tab_id].title[0] = 'N'
  tabs[tab_id].title[1] = 'e'
  tabs[tab_id].title[2] = 'w'
  tabs[tab_id].title[3] = ' '
  tabs[tab_id].title[4] = 'T'
  tabs[tab_id].title[5] = 'a'
  tabs[tab_id].title[6] = 'b'
  tabs[tab_id].title[7] = 0
  
  // Create WebView
  tabs[tab_id].webview_id = craft.craft_webview_create()
  tabs[tab_id].loading = 0
  tabs[tab_id].progress = 0
  tabs[tab_id].active = 1
  
  tab_count = tab_count + 1
  active_tab = tab_id
  
  // Navigate to URL
  browser_navigate(tab_id, url)
  
  foundation.serial_write_string("[Browser] Created tab ")
  foundation.serial_write_hex(tab_id)
  foundation.serial_write_string("\n")
  
  return tab_id
}

export fn browser_close_tab(tab_id: u32) {
  if tab_id >= tab_count { return }
  
  // Destroy WebView
  craft.craft_webview_destroy(tabs[tab_id].webview_id)
  
  tabs[tab_id].active = 0
  
  // Switch to next active tab
  var i: u32 = 0
  while i < tab_count {
    if tabs[i].active == 1 {
      active_tab = i
      break
    }
    i = i + 1
  }
  
  foundation.serial_write_string("[Browser] Closed tab ")
  foundation.serial_write_hex(tab_id)
  foundation.serial_write_string("\n")
}

export fn browser_navigate(tab_id: u32, url: u64) {
  if tab_id >= tab_count { return }
  
  foundation.serial_write_string("[Browser] Navigating to: ")
  foundation.serial_write_string(url)
  foundation.serial_write_string("\n")
  
  // Copy URL
  var i: u32 = 0
  while i < MAX_URL_LENGTH - 1 {
    var ch: u8 = @intToPtr(url + i, u8)
    tabs[tab_id].url[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  tabs[tab_id].url[i] = 0
  
  tabs[tab_id].loading = 1
  tabs[tab_id].progress = 0
  
  // Load URL in WebView
  craft.craft_webview_load_url(tabs[tab_id].webview_id, url)
  
  // Add to history
  if private_mode == 0 {
    browser_add_to_history(url, @ptrFromInt(tabs[tab_id].title))
  }
}

export fn browser_reload(tab_id: u32) {
  if tab_id >= tab_count { return }
  
  foundation.serial_write_string("[Browser] Reloading tab ")
  foundation.serial_write_hex(tab_id)
  foundation.serial_write_string("\n")
  
  craft.craft_webview_reload(tabs[tab_id].webview_id)
}

export fn browser_stop(tab_id: u32) {
  if tab_id >= tab_count { return }
  
  tabs[tab_id].loading = 0
  craft.craft_webview_stop(tabs[tab_id].webview_id)
}

export fn browser_back(tab_id: u32) {
  if tab_id >= tab_count { return }
  
  craft.craft_webview_back(tabs[tab_id].webview_id)
}

export fn browser_forward(tab_id: u32) {
  if tab_id >= tab_count { return }
  
  craft.craft_webview_forward(tabs[tab_id].webview_id)
}

export fn browser_add_to_history(url: u64, title: u64) {
  if history_count >= MAX_HISTORY {
    // Shift history
    var i: u32 = 0
    while i < MAX_HISTORY - 1 {
      var j: u32 = 0
      while j < MAX_URL_LENGTH {
        history[i].url[j] = history[i + 1].url[j]
        j = j + 1
      }
      j = 0
      while j < 256 {
        history[i].title[j] = history[i + 1].title[j]
        j = j + 1
      }
      history[i].timestamp = history[i + 1].timestamp
      i = i + 1
    }
    history_count = MAX_HISTORY - 1
  }
  
  // Add new entry
  var i: u32 = 0
  while i < MAX_URL_LENGTH - 1 {
    var ch: u8 = @intToPtr(url + i, u8)
    history[history_count].url[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  history[history_count].url[i] = 0
  
  i = 0
  while i < 255 {
    var ch: u8 = @intToPtr(title + i, u8)
    history[history_count].title[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  history[history_count].title[i] = 0
  
  history[history_count].timestamp = foundation.timer_get_ticks()
  history_count = history_count + 1
}

export fn browser_add_bookmark(url: u64, title: u64) -> u32 {
  if bookmark_count >= MAX_BOOKMARKS { return 1 }
  
  var i: u32 = 0
  while i < MAX_URL_LENGTH - 1 {
    var ch: u8 = @intToPtr(url + i, u8)
    bookmarks[bookmark_count].url[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  bookmarks[bookmark_count].url[i] = 0
  
  i = 0
  while i < 255 {
    var ch: u8 = @intToPtr(title + i, u8)
    bookmarks[bookmark_count].title[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  bookmarks[bookmark_count].title[i] = 0
  
  bookmark_count = bookmark_count + 1
  
  foundation.serial_write_string("[Browser] Added bookmark: ")
  foundation.serial_write_string(title)
  foundation.serial_write_string("\n")
  
  return 0
}

export fn browser_remove_bookmark(index: u32) -> u32 {
  if index >= bookmark_count { return 1 }
  
  // Shift bookmarks
  var i: u32 = index
  while i < bookmark_count - 1 {
    var j: u32 = 0
    while j < MAX_URL_LENGTH {
      bookmarks[i].url[j] = bookmarks[i + 1].url[j]
      j = j + 1
    }
    j = 0
    while j < 256 {
      bookmarks[i].title[j] = bookmarks[i + 1].title[j]
      j = j + 1
    }
    i = i + 1
  }
  
  bookmark_count = bookmark_count - 1
  return 0
}

export fn browser_get_bookmark_count() -> u32 {
  return bookmark_count
}

export fn browser_get_bookmark_url(index: u32) -> u64 {
  if index >= bookmark_count { return 0 }
  return @ptrFromInt(bookmarks[index].url)
}

export fn browser_get_bookmark_title(index: u32) -> u64 {
  if index >= bookmark_count { return 0 }
  return @ptrFromInt(bookmarks[index].title)
}

export fn browser_clear_history() {
  history_count = 0
}

export fn browser_get_history_count() -> u32 {
  return history_count
}

export fn browser_get_history_url(index: u32) -> u64 {
  if index >= history_count { return 0 }
  return @ptrFromInt(history[index].url)
}

export fn browser_get_history_title(index: u32) -> u64 {
  if index >= history_count { return 0 }
  return @ptrFromInt(history[index].title)
}

export fn browser_set_private_mode(enabled: u32) {
  private_mode = enabled
  if enabled == 1 {
    foundation.serial_write_string("[Browser] Private mode enabled\n")
  } else {
    foundation.serial_write_string("[Browser] Private mode disabled\n")
  }
}

export fn browser_download_file(url: u64, dest_path: u64) -> u32 {
  foundation.serial_write_string("[Browser] Downloading: ")
  foundation.serial_write_string(url)
  foundation.serial_write_string("\n")
  
  // Parse URL and download via network stack
  var response: [u8; 4096]
  var bytes_received: u32 = network.http_get(url, @ptrFromInt(response), 4096)
  
  if bytes_received == 0 {
    foundation.serial_write_string("[Browser] Download failed\n")
    return 1
  }
  
  // Save to file
  var fd: u32 = filesystem.vfs_open(dest_path, 0x0200, 0x1B6)  // O_CREAT | O_WRONLY
  if fd == 0xFFFFFFFF {
    foundation.serial_write_string("[Browser] Failed to create file\n")
    return 1
  }
  
  filesystem.vfs_write(fd, @ptrFromInt(response), bytes_received)
  filesystem.vfs_close(fd)
  
  foundation.serial_write_string("[Browser] Downloaded ")
  foundation.serial_write_hex(bytes_received)
  foundation.serial_write_string(" bytes\n")
  
  return 0
}

export fn browser_render() {
  foundation.vga_clear()
  
  // Header
  foundation.vga_write_string("=== Web Browser ===\n\n")
  
  // Tab bar
  var i: u32 = 0
  while i < tab_count {
    if tabs[i].active == 0 {
      i = i + 1
      continue
    }
    
    if i == active_tab {
      foundation.vga_write_string("[*")
    } else {
      foundation.vga_write_string("[ ")
    }
    
    foundation.vga_write_string(@ptrFromInt(tabs[i].title))
    foundation.vga_write_string(" ]  ")
    
    i = i + 1
  }
  foundation.vga_write_string("\n\n")
  
  // Address bar
  foundation.vga_write_string("URL: ")
  foundation.vga_write_string(@ptrFromInt(tabs[active_tab].url))
  foundation.vga_write_string("\n\n")
  
  // Loading indicator
  if tabs[active_tab].loading == 1 {
    foundation.vga_write_string("Loading... ")
    foundation.serial_write_hex(tabs[active_tab].progress)
    foundation.vga_write_string("%\n\n")
  }
  
  // WebView content
  craft.craft_webview_render(tabs[active_tab].webview_id)
  
  // Footer
  foundation.vga_write_string("\n")
  foundation.vga_write_string("Ctrl+T=New Tab Ctrl+W=Close Tab Ctrl+L=Address Bar\n")
  foundation.vga_write_string("Ctrl+B=Bookmarks Ctrl+H=History Ctrl+Shift+P=Private Q=Quit\n")
}

export fn browser_main() {
  browser_init()
  browser_render()
  
  foundation.vga_write_string("\nBrowser loaded!\n")
}
