// home-os Terminal Scrollback Buffer
// Efficient scrollback buffer implementation

import "../../kernel/src/core/foundation.home" as foundation

const MAX_SCROLLBACK_LINES: u32 = 10000
const LINE_WIDTH: u32 = 80

struct ScrollbackLine {
  data: [u8; 80],
  length: u32,
  timestamp: u64
}

var scrollback_buffer: [ScrollbackLine; 10000]
var scrollback_head: u32 = 0
var scrollback_tail: u32 = 0
var scrollback_count: u32 = 0
var scrollback_view_offset: u32 = 0

export fn scrollback_init() {
  scrollback_head = 0
  scrollback_tail = 0
  scrollback_count = 0
  scrollback_view_offset = 0
  foundation.serial_write_string("[Scrollback] Initialized\n")
}

export fn scrollback_add_line(line: u64, length: u32) {
  // Add line to circular buffer
  var idx: u32 = scrollback_head
  
  // Copy line data
  var i: u32 = 0
  while i < length and i < LINE_WIDTH {
    scrollback_buffer[idx].data[i] = @intToPtr(line + i, u8)
    i = i + 1
  }
  scrollback_buffer[idx].length = length
  scrollback_buffer[idx].timestamp = foundation.timer_get_ticks()
  
  // Advance head
  scrollback_head = (scrollback_head + 1) % MAX_SCROLLBACK_LINES
  
  // Update count
  if scrollback_count < MAX_SCROLLBACK_LINES {
    scrollback_count = scrollback_count + 1
  } else {
    // Buffer full, advance tail
    scrollback_tail = (scrollback_tail + 1) % MAX_SCROLLBACK_LINES
  }
}

export fn scrollback_get_line(index: u32) -> u64 {
  if index >= scrollback_count { return 0 }
  
  var actual_idx: u32 = (scrollback_tail + index) % MAX_SCROLLBACK_LINES
  return @ptrFromInt(scrollback_buffer[actual_idx].data)
}

export fn scrollback_get_line_length(index: u32) -> u32 {
  if index >= scrollback_count { return 0 }
  
  var actual_idx: u32 = (scrollback_tail + index) % MAX_SCROLLBACK_LINES
  return scrollback_buffer[actual_idx].length
}

export fn scrollback_scroll_up(lines: u32) {
  if scrollback_view_offset + lines > scrollback_count {
    scrollback_view_offset = scrollback_count
  } else {
    scrollback_view_offset = scrollback_view_offset + lines
  }
}

export fn scrollback_scroll_down(lines: u32) {
  if scrollback_view_offset < lines {
    scrollback_view_offset = 0
  } else {
    scrollback_view_offset = scrollback_view_offset - lines
  }
}

export fn scrollback_scroll_to_top() {
  scrollback_view_offset = scrollback_count
}

export fn scrollback_scroll_to_bottom() {
  scrollback_view_offset = 0
}

export fn scrollback_get_view_offset() -> u32 {
  return scrollback_view_offset
}

export fn scrollback_get_count() -> u32 {
  return scrollback_count
}

export fn scrollback_clear() {
  scrollback_head = 0
  scrollback_tail = 0
  scrollback_count = 0
  scrollback_view_offset = 0
}

export fn scrollback_search(query: u64, query_len: u32) -> u32 {
  // Search scrollback buffer for query string
  // Returns index of first match, or 0xFFFFFFFF if not found
  
  var i: u32 = 0
  while i < scrollback_count {
    var line: u64 = scrollback_get_line(i)
    var line_len: u32 = scrollback_get_line_length(i)
    
    if line_len >= query_len {
      var j: u32 = 0
      while j <= line_len - query_len {
        var match: u32 = 1
        var k: u32 = 0
        while k < query_len {
          if @intToPtr(line + j + k, u8) != @intToPtr(query + k, u8) {
            match = 0
            break
          }
          k = k + 1
        }
        
        if match == 1 {
          return i
        }
        
        j = j + 1
      }
    }
    
    i = i + 1
  }
  
  return 0xFFFFFFFF
}
