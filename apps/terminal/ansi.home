// home-os ANSI Escape Sequences
// ANSI color and text formatting

import "../../kernel/src/core/foundation.home" as foundation

const ANSI_ESC: u8 = 0x1B

var current_fg_color: u32 = 0xFFFFFF
var current_bg_color: u32 = 0x000000
var current_bold: u32 = 0
var current_italic: u32 = 0
var current_underline: u32 = 0

var ansi_initialized: u32 = 0

// ANSI color palette
const ANSI_COLORS: [u32; 16] = [
  0x000000,  // Black
  0xAA0000,  // Red
  0x00AA00,  // Green
  0xAAAA00,  // Yellow
  0x0000AA,  // Blue
  0xAA00AA,  // Magenta
  0x00AAAA,  // Cyan
  0xAAAAAA,  // White
  0x555555,  // Bright Black
  0xFF5555,  // Bright Red
  0x55FF55,  // Bright Green
  0xFFFF55,  // Bright Yellow
  0x5555FF,  // Bright Blue
  0xFF55FF,  // Bright Magenta
  0x55FFFF,  // Bright Cyan
  0xFFFFFF   // Bright White
]

export fn ansi_init() {
  if ansi_initialized == 1 { return }
  
  current_fg_color = 0xFFFFFF
  current_bg_color = 0x000000
  current_bold = 0
  current_italic = 0
  current_underline = 0
  
  ansi_initialized = 1
  foundation.serial_write_string("[ANSI] Initialized\n")
}

export fn ansi_parse_sequence(seq: u64) -> u32 {
  // Parse ANSI escape sequence starting with ESC
  if @intToPtr(seq, u8) != ANSI_ESC { return 0 }
  
  var ch: u8 = @intToPtr(seq + 1, u8)
  
  // CSI sequences: ESC[
  if ch == '[' {
    return ansi_parse_csi(seq + 2)
  }
  
  // OSC sequences: ESC]
  if ch == ']' {
    return ansi_parse_osc(seq + 2)
  }
  
  return 0
}

fn ansi_parse_csi(seq: u64) -> u32 {
  // Parse CSI (Control Sequence Introducer) sequences
  var params: [u32; 16]
  var param_count: u32 = 0
  var i: u32 = 0
  var current_param: u32 = 0
  
  // Parse parameters
  while i < 64 {
    var ch: u8 = @intToPtr(seq + i, u8)
    
    if ch >= '0' and ch <= '9' {
      current_param = current_param * 10 + (ch - '0')
    } else if ch == ';' {
      params[param_count] = current_param
      param_count = param_count + 1
      current_param = 0
    } else {
      // Final byte
      params[param_count] = current_param
      param_count = param_count + 1
      
      ansi_execute_csi(ch, @ptrFromInt(params), param_count)
      return i + 3  // ESC[ + params + final byte
    }
    
    i = i + 1
  }
  
  return 0
}

fn ansi_parse_osc(seq: u64) -> u32 {
  // Parse OSC (Operating System Command) sequences
  // OSC sequences end with BEL (0x07) or ESC\
  var i: u32 = 0
  while i < 256 {
    var ch: u8 = @intToPtr(seq + i, u8)
    if ch == 0x07 or ch == 0x1B {
      return i + 3
    }
    i = i + 1
  }
  return 0
}

fn ansi_execute_csi(final_byte: u8, params: u64, param_count: u32) {
  if final_byte == 'm' {
    // SGR - Select Graphic Rendition
    ansi_sgr(params, param_count)
  } else if final_byte == 'H' or final_byte == 'f' {
    // CUP - Cursor Position
    var y: u32 = 0
    var x: u32 = 0
    if param_count > 0 { y = @intToPtr(params, u32) }
    if param_count > 1 { x = @intToPtr(params + 4, u32) }
  } else if final_byte == 'A' {
    // CUU - Cursor Up
  } else if final_byte == 'B' {
    // CUD - Cursor Down
  } else if final_byte == 'C' {
    // CUF - Cursor Forward
  } else if final_byte == 'D' {
    // CUB - Cursor Back
  } else if final_byte == 'J' {
    // ED - Erase Display
  } else if final_byte == 'K' {
    // EL - Erase Line
  }
}

fn ansi_sgr(params: u64, param_count: u32) {
  if param_count == 0 {
    // Reset
    ansi_reset()
    return
  }
  
  var i: u32 = 0
  while i < param_count {
    var param: u32 = @intToPtr(params + (i * 4), u32)
    
    if param == 0 {
      ansi_reset()
    } else if param == 1 {
      current_bold = 1
    } else if param == 3 {
      current_italic = 1
    } else if param == 4 {
      current_underline = 1
    } else if param == 22 {
      current_bold = 0
    } else if param == 23 {
      current_italic = 0
    } else if param == 24 {
      current_underline = 0
    } else if param >= 30 and param <= 37 {
      // Foreground color
      current_fg_color = ANSI_COLORS[param - 30]
    } else if param >= 40 and param <= 47 {
      // Background color
      current_bg_color = ANSI_COLORS[param - 40]
    } else if param >= 90 and param <= 97 {
      // Bright foreground color
      current_fg_color = ANSI_COLORS[param - 90 + 8]
    } else if param >= 100 and param <= 107 {
      // Bright background color
      current_bg_color = ANSI_COLORS[param - 100 + 8]
    }
    
    i = i + 1
  }
}

export fn ansi_reset() {
  current_fg_color = 0xFFFFFF
  current_bg_color = 0x000000
  current_bold = 0
  current_italic = 0
  current_underline = 0
}

export fn ansi_get_fg_color() -> u32 {
  return current_fg_color
}

export fn ansi_get_bg_color() -> u32 {
  return current_bg_color
}

export fn ansi_is_bold() -> u32 {
  return current_bold
}

export fn ansi_is_italic() -> u32 {
  return current_italic
}

export fn ansi_is_underline() -> u32 {
  return current_underline
}
