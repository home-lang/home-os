// home-os VT100 Emulation
// VT100 terminal control sequences

import "../../kernel/src/core/foundation.home" as foundation

const VT100_ESC: u8 = 0x1B

var vt100_initialized: u32 = 0
var cursor_x: u32 = 0
var cursor_y: u32 = 0

export fn vt100_init() {
  if vt100_initialized == 1 { return }
  
  cursor_x = 0
  cursor_y = 0
  vt100_initialized = 1
  foundation.serial_write_string("[VT100] Initialized\n")
}

export fn vt100_clear_screen() {
  // ESC[2J
  foundation.serial_write_string("\x1B[2J")
}

export fn vt100_clear_line() {
  // ESC[2K
  foundation.serial_write_string("\x1B[2K")
}

export fn vt100_move_cursor(x: u32, y: u32) {
  // ESC[y;xH
  cursor_x = x
  cursor_y = y
}

export fn vt100_cursor_up(n: u32) {
  // ESC[nA
  if cursor_y >= n {
    cursor_y = cursor_y - n
  } else {
    cursor_y = 0
  }
}

export fn vt100_cursor_down(n: u32) {
  // ESC[nB
  cursor_y = cursor_y + n
}

export fn vt100_cursor_forward(n: u32) {
  // ESC[nC
  cursor_x = cursor_x + n
}

export fn vt100_cursor_back(n: u32) {
  // ESC[nD
  if cursor_x >= n {
    cursor_x = cursor_x - n
  } else {
    cursor_x = 0
  }
}

export fn vt100_save_cursor() {
  // ESC[s
}

export fn vt100_restore_cursor() {
  // ESC[u
}

export fn vt100_hide_cursor() {
  // ESC[?25l
}

export fn vt100_show_cursor() {
  // ESC[?25h
}

export fn vt100_set_scroll_region(top: u32, bottom: u32) {
  // ESC[top;bottomr
}

export fn vt100_insert_line(n: u32) {
  // ESC[nL
}

export fn vt100_delete_line(n: u32) {
  // ESC[nM
}

export fn vt100_erase_display(mode: u32) {
  // ESC[modeJ
  // mode: 0=below, 1=above, 2=all
}

export fn vt100_erase_line(mode: u32) {
  // ESC[modeK
  // mode: 0=right, 1=left, 2=all
}

export fn vt100_get_cursor_x() -> u32 {
  return cursor_x
}

export fn vt100_get_cursor_y() -> u32 {
  return cursor_y
}
