// home-os Auto-completion
// Intelligent code completion

import "../../kernel/src/core/foundation.home" as foundation

const MAX_SUGGESTIONS: u32 = 20

struct Suggestion {
  text: [u8; 128],
  type: u32,
  score: u32
}

var suggestions: [Suggestion; 20]
var suggestion_count: u32 = 0
var autocomplete_active: u32 = 0

export fn autocomplete_init() {
  suggestion_count = 0
  autocomplete_active = 0
  foundation.serial_write_string("[Autocomplete] Initialized\n")
}

export fn autocomplete_suggest(prefix: u64, language: u32) -> u32 {
  suggestion_count = 0
  
  // Add keyword suggestions (stub)
  if language == 1 {  // Home language
    autocomplete_add_suggestion("function", 1)
    autocomplete_add_suggestion("var", 1)
    autocomplete_add_suggestion("const", 1)
  }
  
  return suggestion_count
}

fn autocomplete_add_suggestion(text: u64, type: u32) {
  if suggestion_count >= MAX_SUGGESTIONS { return }
  
  var i: u32 = 0
  while i < 128 {
    suggestions[suggestion_count].text[i] = @intToPtr(text + i, u8)
    if suggestions[suggestion_count].text[i] == 0 { break }
    i = i + 1
  }
  
  suggestions[suggestion_count].type = type
  suggestions[suggestion_count].score = 100
  suggestion_count = suggestion_count + 1
}

export fn autocomplete_get_suggestion(index: u32) -> u64 {
  if index >= suggestion_count { return 0 }
  return @ptrFromInt(suggestions[index].text)
}
