// home-os Pong Game
// Classic pong

import "../../kernel/src/core/foundation.home" as foundation
import "../../kernel/src/drivers/keyboard.home" as keyboard
import "../../kernel/src/drivers/vga_graphics.home" as vga

const SCREEN_WIDTH: u32 = 320
const SCREEN_HEIGHT: u32 = 200
const PADDLE_HEIGHT: u32 = 40
const PADDLE_WIDTH: u32 = 5
const BALL_SIZE: u32 = 5

var paddle1_y: u32 = 80
var paddle2_y: u32 = 80
var ball_x: u32 = 160
var ball_y: u32 = 100
var ball_dx: i32 = 2
var ball_dy: i32 = 2
var score1: u32 = 0
var score2: u32 = 0

fn pong_draw() {
  vga.vga_fill_screen(0)
  
  // Draw paddles
  vga.vga_draw_rect(10, paddle1_y, PADDLE_WIDTH, PADDLE_HEIGHT, 15)
  vga.vga_draw_rect(305, paddle2_y, PADDLE_WIDTH, PADDLE_HEIGHT, 15)
  
  // Draw ball
  vga.vga_draw_rect(ball_x, ball_y, BALL_SIZE, BALL_SIZE, 15)
  
  // Draw center line
  var y: u32 = 0
  while y < SCREEN_HEIGHT {
    vga.vga_put_pixel(160, y, 8)
    y = y + 5
  }
}

fn pong_update() {
  // Move ball
  ball_x = ball_x + ball_dx
  ball_y = ball_y + ball_dy
  
  // Bounce off top/bottom
  if ball_y <= 0 or ball_y >= SCREEN_HEIGHT - BALL_SIZE {
    ball_dy = -ball_dy
  }
  
  // Check paddle collisions (stub)
  
  // Score points
  if ball_x <= 0 {
    score2 = score2 + 1
    ball_x = 160
    ball_y = 100
  }
  if ball_x >= SCREEN_WIDTH {
    score1 = score1 + 1
    ball_x = 160
    ball_y = 100
  }
}

export fn pong_main() {
  vga.vga_graphics_init()
  
  var running: u32 = 1
  while running == 1 {
    pong_update()
    pong_draw()
    
    if keyboard.keyboard_has_char() == 1 {
      var ch: u8 = keyboard.keyboard_getchar()
      if ch == 'q' or ch == 'Q' {
        running = 0
      } else if ch == 'w' or ch == 'W' {
        if paddle1_y > 0 {
          paddle1_y = paddle1_y - 5
        }
      } else if ch == 's' or ch == 'S' {
        if paddle1_y < SCREEN_HEIGHT - PADDLE_HEIGHT {
          paddle1_y = paddle1_y + 5
        }
      }
    }
  }
}
