// home-os Snake Game
// Classic snake game

import "../../kernel/src/core/foundation.home" as foundation
import "../../kernel/src/drivers/keyboard.home" as keyboard
import "../../kernel/src/drivers/timer.home" as timer

const GRID_WIDTH: u32 = 40
const GRID_HEIGHT: u32 = 20
const MAX_SNAKE_LENGTH: u32 = 800

struct Point {
  x: u32,
  y: u32
}

var snake: [Point; 800]
var snake_length: u32 = 3
var snake_dir_x: i32 = 1
var snake_dir_y: i32 = 0
var food: Point
var score: u32 = 0
var game_over: u32 = 0

fn snake_draw() {
  foundation.vga_clear()
  foundation.vga_write_string("=== Snake Game ===\n")
  foundation.vga_write_string("Score: ")
  foundation.vga_write_string("\n\n")
  
  // Draw grid (stub - would draw actual game)
  var y: u32 = 0
  while y < GRID_HEIGHT {
    var x: u32 = 0
    while x < GRID_WIDTH {
      foundation.vga_write_char('.')
      x = x + 1
    }
    foundation.vga_write_char('\n')
    y = y + 1
  }
  
  if game_over == 1 {
    foundation.vga_write_string("\nGAME OVER!\n")
  }
}

fn snake_update() {
  if game_over == 1 { return }
  
  // Move snake (stub)
  score = score + 1
}

export fn snake_main() {
  snake_length = 3
  score = 0
  game_over = 0
  
  snake_draw()
  
  var running: u32 = 1
  while running == 1 {
    snake_update()
    snake_draw()
    
    timer.timer_sleep_ms(100)
    
    if keyboard.keyboard_has_char() == 1 {
      var ch: u8 = keyboard.keyboard_getchar()
      if ch == 'q' or ch == 'Q' {
        running = 0
      }
    }
  }
}
