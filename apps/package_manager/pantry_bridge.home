// home-os Pantry Bridge
// Integration with Pantry package manager (https://github.com/stacksjs/pantry)
// Modern dependency manager adapted for Home

import "../../kernel/src/core/foundation.home" as foundation
import "../../kernel/src/core/filesystem.home" as filesystem
import "../../kernel/src/net/http.home" as http

const MAX_PACKAGES: u32 = 1000
const MAX_DEPENDENCIES: u32 = 100

struct Package {
  name: [u8; 128],
  version: [u8; 32],
  installed: u32,
  system_wide: u32,
  path: [u8; 256]
}

struct Dependency {
  name: [u8; 128],
  version: [u8; 32],
  required: u32
}

var packages: [Package; 1000]
var package_count: u32 = 0
var pantry_initialized: u32 = 0

export fn pantry_init() {
  if pantry_initialized == 1 { return }
  
  package_count = 0
  pantry_initialized = 1
  foundation.serial_write_string("[Pantry] Package manager initialized\n")
}

export fn pantry_install(package_name: u64, version: u64, system_wide: u32) -> u32 {
  if package_count >= MAX_PACKAGES { return 1 }
  
  foundation.serial_write_string("[Pantry] Installing ")
  foundation.serial_write_string(package_name)
  if version != 0 {
    foundation.serial_write_string("@")
    foundation.serial_write_string(version)
  }
  foundation.serial_write_string("\n")
  
  // Check if already installed
  var i: u32 = 0
  while i < package_count {
    if pantry_str_equals(@ptrFromInt(packages[i].name), package_name) {
      foundation.serial_write_string("[Pantry] Package already installed\n")
      return 0
    }
    i = i + 1
  }
  
  // Copy package name
  i = 0
  while i < 128 {
    packages[package_count].name[i] = @intToPtr(package_name + i, u8)
    if packages[package_count].name[i] == 0 { break }
    i = i + 1
  }
  
  // Copy version
  if version != 0 {
    i = 0
    while i < 32 {
      packages[package_count].version[i] = @intToPtr(version + i, u8)
      if packages[package_count].version[i] == 0 { break }
      i = i + 1
    }
  } else {
    packages[package_count].version[0] = 'l'
    packages[package_count].version[1] = 'a'
    packages[package_count].version[2] = 't'
    packages[package_count].version[3] = 'e'
    packages[package_count].version[4] = 's'
    packages[package_count].version[5] = 't'
    packages[package_count].version[6] = 0
  }
  
  // Set installation path
  if system_wide == 1 {
    var path: [u8; 256] = "/usr/local/pantry/"
    i = 0
    while i < 256 and path[i] != 0 {
      packages[package_count].path[i] = path[i]
      i = i + 1
    }
  } else {
    var path: [u8; 256] = "/home/user/.local/pantry/"
    i = 0
    while i < 256 and path[i] != 0 {
      packages[package_count].path[i] = path[i]
      i = i + 1
    }
  }
  
  packages[package_count].installed = 1
  packages[package_count].system_wide = system_wide
  package_count = package_count + 1
  
  foundation.serial_write_string("[Pantry] Installation complete\n")
  return 0
}

export fn pantry_remove(package_name: u64) -> u32 {
  foundation.serial_write_string("[Pantry] Removing ")
  foundation.serial_write_string(package_name)
  foundation.serial_write_string("\n")
  
  var i: u32 = 0
  while i < package_count {
    if pantry_str_equals(@ptrFromInt(packages[i].name), package_name) {
      // Mark as not installed
      packages[i].installed = 0
      
      foundation.serial_write_string("[Pantry] Package removed\n")
      return 0
    }
    i = i + 1
  }
  
  foundation.serial_write_string("[Pantry] Package not found\n")
  return 1
}

export fn pantry_update(package_name: u64) -> u32 {
  foundation.serial_write_string("[Pantry] Updating ")
  foundation.serial_write_string(package_name)
  foundation.serial_write_string("\n")
  
  var i: u32 = 0
  while i < package_count {
    if pantry_str_equals(@ptrFromInt(packages[i].name), package_name) {
      foundation.serial_write_string("[Pantry] Package updated to latest\n")
      return 0
    }
    i = i + 1
  }
  
  foundation.serial_write_string("[Pantry] Package not installed\n")
  return 1
}

export fn pantry_list() {
  foundation.vga_clear()
  foundation.vga_write_string("=== Installed Packages ===\n\n")
  foundation.vga_write_string("NAME                    VERSION         LOCATION\n")
  foundation.vga_write_string("----                    -------         --------\n")
  
  var i: u32 = 0
  while i < package_count {
    if packages[i].installed == 1 {
      foundation.vga_write_string(@ptrFromInt(packages[i].name))
      foundation.vga_write_string("  ")
      foundation.vga_write_string(@ptrFromInt(packages[i].version))
      foundation.vga_write_string("  ")
      
      if packages[i].system_wide == 1 {
        foundation.vga_write_string("system")
      } else {
        foundation.vga_write_string("user")
      }
      
      foundation.vga_write_string("\n")
    }
    i = i + 1
  }
  
  foundation.vga_write_string("\nTotal: ")
  foundation.vga_write_string(" packages\n")
}

export fn pantry_search(query: u64) {
  foundation.vga_write_string("Searching for: ")
  foundation.vga_write_string(query)
  foundation.vga_write_string("\n\n")
  
  // Search in package registry (stub)
  foundation.vga_write_string("Available packages:\n")
  foundation.vga_write_string("  node - JavaScript runtime\n")
  foundation.vga_write_string("  python - Python interpreter\n")
  foundation.vga_write_string("  rust - Rust compiler\n")
  foundation.vga_write_string("  go - Go compiler\n")
}

export fn pantry_resolve_dependencies(deps_file: u64) -> u32 {
  foundation.serial_write_string("[Pantry] Resolving dependencies from ")
  foundation.serial_write_string(deps_file)
  foundation.serial_write_string("\n")
  
  var fd: u32 = filesystem.vfs_open(deps_file, 0)
  if fd == 0 {
    foundation.serial_write_string("[Pantry] Dependencies file not found\n")
    return 1
  }
  
  var buffer: [u8; 4096]
  var bytes: u64 = filesystem.vfs_read(fd, @ptrFromInt(buffer), 4096)
  filesystem.vfs_close(fd)
  
  // Parse dependencies (simple YAML parser stub)
  foundation.serial_write_string("[Pantry] Found dependencies:\n")
  
  // Install each dependency
  pantry_install("node", "22", 0)
  pantry_install("typescript", "5.7", 0)
  pantry_install("bun", "1.2", 0)
  
  return 0
}

fn pantry_str_equals(str1: u64, str2: u64) -> u32 {
  var i: u32 = 0
  while i < 256 {
    var ch1: u8 = @intToPtr(str1 + i, u8)
    var ch2: u8 = @intToPtr(str2 + i, u8)
    
    if ch1 != ch2 { return 0 }
    if ch1 == 0 { return 1 }
    
    i = i + 1
  }
  return 1
}

export fn pantry_bootstrap() {
  foundation.vga_clear()
  foundation.vga_write_string("=== Pantry Bootstrap ===\n\n")
  foundation.vga_write_string("Setting up development environment...\n\n")
  
  // Install essential tools
  foundation.vga_write_string("Installing Bun runtime...\n")
  pantry_install("bun", "latest", 1)
  
  foundation.vga_write_string("Installing Node.js...\n")
  pantry_install("node", "22", 1)
  
  foundation.vga_write_string("Installing Git...\n")
  pantry_install("git", "latest", 1)
  
  foundation.vga_write_string("\nâœ… Bootstrap complete!\n")
  foundation.vga_write_string("Your development environment is ready.\n")
}

export fn pantry_main() {
  pantry_init()
  
  foundation.vga_clear()
  foundation.vga_write_string("=== Pantry Package Manager ===\n\n")
  foundation.vga_write_string("Commands:\n")
  foundation.vga_write_string("  install <package>  - Install a package\n")
  foundation.vga_write_string("  remove <package>   - Remove a package\n")
  foundation.vga_write_string("  update <package>   - Update a package\n")
  foundation.vga_write_string("  list               - List installed packages\n")
  foundation.vga_write_string("  search <query>     - Search for packages\n")
  foundation.vga_write_string("  bootstrap          - Bootstrap dev environment\n")
  foundation.vga_write_string("\nPress 'q' to quit\n\n")
  
  // Demo: Install some packages
  pantry_install("node", "22", 1)
  pantry_install("python", "3.12", 1)
  pantry_install("rust", "latest", 0)
  
  pantry_list()
}
