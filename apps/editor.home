// home-os Text Editor
// Simple text editor

import "../kernel/src/core/foundation.home" as foundation
import "../kernel/src/core/filesystem.home" as filesystem
import "../kernel/src/drivers/keyboard.home" as keyboard

const MAX_LINES: u32 = 100
const MAX_LINE_LEN: u32 = 80

var lines: [[u8; 80]; 100]
var line_count: u32 = 0
var current_line: u32 = 0
var current_col: u32 = 0
var filename: [u8; 256]

fn editor_draw() {
  foundation.vga_clear()
  
  // Draw lines
  var i: u32 = 0
  while i < line_count and i < 24 {
    var j: u32 = 0
    while j < MAX_LINE_LEN {
      if lines[i][j] == 0 { break }
      foundation.vga_write_char(lines[i][j])
      j = j + 1
    }
    foundation.vga_write_char('\n')
    i = i + 1
  }
  
  // Status line
  foundation.vga_write_string("Line: ")
  foundation.vga_write_string(" Col: ")
  foundation.vga_write_string(" | ^S=Save ^Q=Quit")
}

fn editor_insert_char(ch: u8) {
  if current_col < MAX_LINE_LEN - 1 {
    lines[current_line][current_col] = ch
    current_col = current_col + 1
    lines[current_line][current_col] = 0
  }
}

fn editor_newline() {
  if line_count < MAX_LINES - 1 {
    line_count = line_count + 1
    current_line = current_line + 1
    current_col = 0
    lines[current_line][0] = 0
  }
}

fn editor_backspace() {
  if current_col > 0 {
    current_col = current_col - 1
    lines[current_line][current_col] = 0
  }
}

fn editor_save() {
  var fd: u32 = filesystem.vfs_open(@ptrFromInt(filename), 2)  // Write
  if fd != 0 {
    var i: u32 = 0
    while i < line_count {
      filesystem.vfs_write(fd, @ptrFromInt(lines[i]), MAX_LINE_LEN)
      i = i + 1
    }
    filesystem.vfs_close(fd)
    foundation.vga_write_string("\nSaved!\n")
  }
}

export fn editor_main(file: u64) {
  // Copy filename
  var i: u32 = 0
  while i < 256 {
    var ch: u8 = @intToPtr(file + i, u8)
    filename[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  // Initialize
  line_count = 1
  current_line = 0
  current_col = 0
  lines[0][0] = 0
  
  // Try to load file
  var fd: u32 = filesystem.vfs_open(file, 0)  // Read
  if fd != 0 {
    var buffer: [u8; 8000]
    var len: u32 = filesystem.vfs_read(fd, @ptrFromInt(buffer), 8000)
    filesystem.vfs_close(fd)
    
    // Parse into lines
    i = 0
    var line: u32 = 0
    var col: u32 = 0
    while i < len and line < MAX_LINES {
      if buffer[i] == '\n' {
        lines[line][col] = 0
        line = line + 1
        col = 0
      } else if col < MAX_LINE_LEN - 1 {
        lines[line][col] = buffer[i]
        col = col + 1
      }
      i = i + 1
    }
    line_count = line + 1
  }
  
  editor_draw()
  
  // Main loop
  var running: u32 = 1
  while running == 1 {
    while keyboard.keyboard_has_char() == 0 {}
    var ch: u8 = keyboard.keyboard_getchar()
    
    if ch == 17 {  // Ctrl+Q
      running = 0
    } else if ch == 19 {  // Ctrl+S
      editor_save()
      editor_draw()
    } else if ch == '\n' {
      editor_newline()
      editor_draw()
    } else if ch == '\b' {
      editor_backspace()
      editor_draw()
    } else if ch >= 32 and ch < 127 {
      editor_insert_char(ch)
      editor_draw()
    }
  }
}
