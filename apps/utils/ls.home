// home-os ls
// Modern file listing with eza-like features

import "../../kernel/src/core/foundation.home" as foundation
import "../../kernel/src/core/filesystem.home" as filesystem

const COLOR_DIR: u8 = 0x09      // Blue
const COLOR_EXEC: u8 = 0x0A     // Green
const COLOR_LINK: u8 = 0x0B     // Cyan
const COLOR_FILE: u8 = 0x0F     // White

const ICON_DIR: u8 = 0xFE       // ■
const ICON_FILE: u8 = 0xFA      // ·

struct FileEntry {
  name: [u8; 256],
  size: u64,
  modified: u64,
  is_dir: u32,
  is_exec: u32,
  is_link: u32,
  permissions: u32,
  owner: [u8; 32],
  group: [u8; 32]
}

var show_all: u32 = 0
var long_format: u32 = 0
var show_header: u32 = 0
var show_git: u32 = 0
var show_icons: u32 = 1
var color_scale: u32 = 1
var group_dirs_first: u32 = 1

fn ls_print_permissions(perms: u32) {
  var chars: [u8; 10] = "----------"
  
  if (perms & 0x4000) != 0 { chars[0] = 'd' }
  if (perms & 0x0100) != 0 { chars[1] = 'r' }
  if (perms & 0x0080) != 0 { chars[2] = 'w' }
  if (perms & 0x0040) != 0 { chars[3] = 'x' }
  if (perms & 0x0020) != 0 { chars[4] = 'r' }
  if (perms & 0x0010) != 0 { chars[5] = 'w' }
  if (perms & 0x0008) != 0 { chars[6] = 'x' }
  if (perms & 0x0004) != 0 { chars[7] = 'r' }
  if (perms & 0x0002) != 0 { chars[8] = 'w' }
  if (perms & 0x0001) != 0 { chars[9] = 'x' }
  
  foundation.vga_write_string(@ptrFromInt(chars))
}

fn ls_print_size(size: u64) {
  if size < 1024 {
    foundation.vga_write_string("   ")
    foundation.vga_write_string("B")
  } else if size < 1024 * 1024 {
    var kb: u64 = size / 1024
    foundation.vga_write_string(" ")
    foundation.vga_write_string("K")
  } else if size < 1024 * 1024 * 1024 {
    var mb: u64 = size / (1024 * 1024)
    foundation.vga_write_string(" ")
    foundation.vga_write_string("M")
  } else {
    var gb: u64 = size / (1024 * 1024 * 1024)
    foundation.vga_write_string(" ")
    foundation.vga_write_string("G")
  }
}

fn ls_print_date(timestamp: u64) {
  // Format: Oct 29 17:30
  foundation.vga_write_string("Oct 29 17:30")
}

fn ls_print_icon(entry: u64) {
  var e: FileEntry = @intToPtr(entry, FileEntry)
  
  if show_icons == 0 { return }
  
  if e.is_dir == 1 {
    foundation.vga_write_string("📁 ")
  } else if e.is_exec == 1 {
    foundation.vga_write_string("⚙️ ")
  } else if e.is_link == 1 {
    foundation.vga_write_string("🔗 ")
  } else {
    // Check extension for specific icons
    foundation.vga_write_string("📄 ")
  }
}

fn ls_print_git_status() {
  if show_git == 0 { return }
  
  // Git status indicators
  foundation.vga_write_string("-- ")
}

fn ls_print_entry_long(entry: u64) {
  var e: FileEntry = @intToPtr(entry, FileEntry)
  
  // Permissions
  ls_print_permissions(e.permissions)
  foundation.vga_write_string(" ")
  
  // Links (stub)
  foundation.vga_write_string("  1 ")
  
  // Owner and group
  foundation.vga_write_string(@ptrFromInt(e.owner))
  foundation.vga_write_string(" ")
  foundation.vga_write_string(@ptrFromInt(e.group))
  foundation.vga_write_string(" ")
  
  // Size with color scale
  if color_scale == 1 {
    if e.size > 1024 * 1024 * 100 {
      foundation.vga_set_color(0x0C)  // Red for large files
    } else if e.size > 1024 * 1024 {
      foundation.vga_set_color(0x0E)  // Yellow
    }
  }
  ls_print_size(e.size)
  foundation.vga_set_color(0x0F)
  foundation.vga_write_string(" ")
  
  // Modified date
  ls_print_date(e.modified)
  foundation.vga_write_string(" ")
  
  // Git status
  ls_print_git_status()
  
  // Icon
  ls_print_icon(entry)
  
  // Name with color
  if e.is_dir == 1 {
    foundation.vga_set_color(COLOR_DIR)
  } else if e.is_exec == 1 {
    foundation.vga_set_color(COLOR_EXEC)
  } else if e.is_link == 1 {
    foundation.vga_set_color(COLOR_LINK)
  }
  
  foundation.vga_write_string(@ptrFromInt(e.name))
  foundation.vga_set_color(0x0F)
  foundation.vga_write_string("\n")
}

fn ls_print_entry_short(entry: u64) {
  var e: FileEntry = @intToPtr(entry, FileEntry)
  
  ls_print_icon(entry)
  
  if e.is_dir == 1 {
    foundation.vga_set_color(COLOR_DIR)
  } else if e.is_exec == 1 {
    foundation.vga_set_color(COLOR_EXEC)
  }
  
  foundation.vga_write_string(@ptrFromInt(e.name))
  foundation.vga_set_color(0x0F)
  foundation.vga_write_string("  ")
}

fn ls_print_header() {
  if show_header == 0 or long_format == 0 { return }
  
  foundation.vga_write_string("Permissions Links Owner Group Size     Modified      ")
  if show_git == 1 {
    foundation.vga_write_string("Git ")
  }
  foundation.vga_write_string("Name\n")
  foundation.vga_write_string("----------- ----- ----- ----- -------- ------------- ")
  if show_git == 1 {
    foundation.vga_write_string("--- ")
  }
  foundation.vga_write_string("----\n")
}

export fn ls_main(path: u64, flags: u64) {
  foundation.vga_clear()
  
  // Parse flags
  show_all = 0
  long_format = 0
  show_header = 0
  show_git = 0
  
  // Check for --long, -l
  if foundation.str_contains(flags, "--long") or foundation.str_contains(flags, "-l") {
    long_format = 1
  }
  
  // Check for --all, -a
  if foundation.str_contains(flags, "--all") or foundation.str_contains(flags, "-a") {
    show_all = 1
  }
  
  // Check for --header
  if foundation.str_contains(flags, "--header") {
    show_header = 1
  }
  
  // Check for --git
  if foundation.str_contains(flags, "--git") {
    show_git = 1
  }
  
  // Check for --group-directories-first
  if foundation.str_contains(flags, "--group-directories-first") {
    group_dirs_first = 1
  }
  
  // Check for --color-scale
  if foundation.str_contains(flags, "--color-scale") {
    color_scale = 1
  }
  
  ls_print_header()
  
  // Read directory (stub - would use VFS)
  var entries: [FileEntry; 32]
  var entry_count: u32 = 0
  
  // Mock entries for demonstration
  entries[0].name = "."
  entries[0].is_dir = 1
  entries[0].size = 4096
  entries[0].permissions = 0x41ED
  entries[0].owner = "user"
  entries[0].group = "users"
  
  entries[1].name = ".."
  entries[1].is_dir = 1
  entries[1].size = 4096
  entries[1].permissions = 0x41ED
  entries[1].owner = "user"
  entries[1].group = "users"
  
  entries[2].name = "Documents"
  entries[2].is_dir = 1
  entries[2].size = 4096
  entries[2].permissions = 0x41ED
  entries[2].owner = "user"
  entries[2].group = "users"
  
  entries[3].name = "file.txt"
  entries[3].is_dir = 0
  entries[3].size = 1234
  entries[3].permissions = 0x01A4
  entries[3].owner = "user"
  entries[3].group = "users"
  
  entries[4].name = "script.sh"
  entries[4].is_dir = 0
  entries[4].is_exec = 1
  entries[4].size = 567
  entries[4].permissions = 0x01ED
  entries[4].owner = "user"
  entries[4].group = "users"
  
  entry_count = 5
  
  // Sort: directories first if requested
  if group_dirs_first == 1 {
    // Sort directories before files (stub)
  }
  
  // Display entries
  var i: u32 = 0
  while i < entry_count {
    if show_all == 0 and entries[i].name[0] == '.' {
      i = i + 1
      continue
    }
    
    if long_format == 1 {
      ls_print_entry_long(@ptrFromInt(entries[i]))
    } else {
      ls_print_entry_short(@ptrFromInt(entries[i]))
    }
    
    i = i + 1
  }
  
  if long_format == 0 {
    foundation.vga_write_string("\n")
  }
}

// Alias for common usage
export fn ll_main(path: u64) {
  var flags: [u8; 128] = "--long --header --group --git --modified --color-scale --group-directories-first -a"
  ls_main(path, @ptrFromInt(flags))
}
