// home-os Env
// Display or set environment variables

import "../../kernel/src/core/foundation.home" as foundation

const MAX_ENV_VARS: u32 = 64

struct EnvVar {
  name: [u8; 64],
  value: [u8; 256],
  set: u32
}

var env_vars: [EnvVar; 64]
var env_count: u32 = 0

fn env_init_defaults() {
  if env_count > 0 { return }
  
  // Set default environment variables
  env_set("PATH", "/bin:/usr/bin:/usr/local/bin")
  env_set("HOME", "/home/user")
  env_set("USER", "user")
  env_set("SHELL", "/bin/home-sh")
  env_set("TERM", "home-term")
}

export fn env_set(name: u64, value: u64) {
  if env_count >= MAX_ENV_VARS { return }
  
  var i: u32 = 0
  while i < 64 {
    env_vars[env_count].name[i] = @intToPtr(name + i, u8)
    if env_vars[env_count].name[i] == 0 { break }
    i = i + 1
  }
  
  i = 0
  while i < 256 {
    env_vars[env_count].value[i] = @intToPtr(value + i, u8)
    if env_vars[env_count].value[i] == 0 { break }
    i = i + 1
  }
  
  env_vars[env_count].set = 1
  env_count = env_count + 1
}

export fn env_get(name: u64) -> u64 {
  var i: u32 = 0
  while i < env_count {
    if env_vars[i].set == 1 {
      // Compare names
      var match: u32 = 1
      var j: u32 = 0
      while j < 64 {
        if env_vars[i].name[j] != @intToPtr(name + j, u8) {
          match = 0
          break
        }
        if env_vars[i].name[j] == 0 { break }
        j = j + 1
      }
      
      if match == 1 {
        return @ptrFromInt(env_vars[i].value)
      }
    }
    i = i + 1
  }
  
  return 0
}

export fn env_main() {
  foundation.vga_clear()
  foundation.vga_write_string("=== Environment Variables ===\n\n")
  
  env_init_defaults()
  
  var i: u32 = 0
  while i < env_count {
    if env_vars[i].set == 1 {
      foundation.vga_write_string(@ptrFromInt(env_vars[i].name))
      foundation.vga_write_string("=")
      foundation.vga_write_string(@ptrFromInt(env_vars[i].value))
      foundation.vga_write_string("\n")
    }
    i = i + 1
  }
}
