// home-os - Media Player Application
// Video and audio playback

import "../kernel/src/core/foundation.home" as foundation
import "../kernel/src/media/video_decoder.home" as video
import "../kernel/src/drivers/sound.home" as sound
import "../libs/craft/craft.home" as craft

var player_window: u32 = 0
var current_file: [u8; 256]
var playing: u32 = 0
var paused: u32 = 0
var volume: u32 = 80
var decoder_id: u32 = 0xFFFFFFFF

export fn media_player_init() {
  video.video_decoder_init()
  
  player_window = craft.window_create(800, 600, @ptrFromInt("Media Player"))
  
  media_player_create_ui()
}

fn media_player_create_ui() {
  // Video display area
  craft.canvas_create(player_window, 0, 0, 800, 500)
  
  // Control buttons
  craft.button_create(player_window, 50, 520, 80, 40, @ptrFromInt("Play"))
  craft.button_create(player_window, 140, 520, 80, 40, @ptrFromInt("Pause"))
  craft.button_create(player_window, 230, 520, 80, 40, @ptrFromInt("Stop"))
  craft.button_create(player_window, 320, 520, 80, 40, @ptrFromInt("Open"))
  
  // Volume slider
  craft.slider_create(player_window, 500, 530, 200, 20, 0, 100, volume)
  
  // Progress bar
  craft.progressbar_create(player_window, 50, 570, 700, 20)
}

export fn media_player_open(file_path: u64) -> u32 {
  foundation.serial_write_string("[MediaPlayer] Opening: ")
  foundation.serial_write_string(file_path)
  foundation.serial_write_string("\n")
  
  // Copy file path
  var i: u32 = 0
  while i < 255 {
    var ch: u8 = @intToPtr(file_path + i, u8)
    current_file[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  // Detect format and create decoder
  var codec: u32 = media_player_detect_codec(file_path)
  decoder_id = video.video_decoder_create(codec, 1920, 1080, 30)
  
  return 1
}

fn media_player_detect_codec(file_path: u64) -> u32 {
  // Check file extension
  var len: u32 = 0
  while @intToPtr(file_path + len, u8) != 0 { len = len + 1 }
  
  if len > 4 {
    var ext: u32 = @intToPtr(file_path + len - 3, u32)
    
    if ext == 0x346D70 { return 1 }  // mp4 -> H.264
    if ext == 0x6B6D { return 2 }    // mkv -> H.265
    if ext == 0x6D6265 { return 3 }  // webm -> VP9
  }
  
  return 1  // Default to H.264
}

export fn media_player_play() {
  if decoder_id == 0xFFFFFFFF { return }
  
  playing = 1
  paused = 0
  
  foundation.serial_write_string("[MediaPlayer] Playing\n")
  
  // Start playback thread
  media_player_playback_loop()
}

fn media_player_playback_loop() {
  while playing == 1 and paused == 0 {
    // Read frame from file
    var frame_data: [u8; 65536]
    var frame_size: u32 = media_player_read_frame(@ptrFromInt(frame_data))
    
    if frame_size == 0 { break }
    
    // Decode frame
    var decoded: [u8; 8294400]  // 1920x1080x4
    video.video_decode_frame(decoder_id, @ptrFromInt(frame_data), frame_size, @ptrFromInt(decoded))
    
    // Display frame
    craft.canvas_draw_image(player_window, 0, 0, @ptrFromInt(decoded), 1920, 1080)
    
    // Sleep for frame duration
    foundation.delay_ms(33)  // ~30 fps
  }
}

fn media_player_read_frame(buffer: u64) -> u32 {
  // Read next frame from file
  return 0  // Simplified
}

export fn media_player_pause() {
  paused = 1
  foundation.serial_write_string("[MediaPlayer] Paused\n")
}

export fn media_player_stop() {
  playing = 0
  paused = 0
  foundation.serial_write_string("[MediaPlayer] Stopped\n")
}

export fn media_player_set_volume(vol: u32) {
  volume = vol
  sound.sound_set_volume(vol)
}

export fn media_player_seek(position: u32) {
  // Seek to position in file
}

export fn main() {
  media_player_init()
  
  craft.event_loop(player_window)
}
