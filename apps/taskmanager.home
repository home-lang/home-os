// home-os Task Manager
// Process and system monitoring

import "../kernel/src/core/foundation.home" as foundation
import "../kernel/src/core/process.home" as process
import "../kernel/src/core/memory.home" as memory
import "../kernel/src/drivers/keyboard.home" as keyboard
import "../kernel/src/drivers/timer.home" as timer

fn taskmanager_draw() {
  foundation.vga_clear()
  foundation.vga_write_string("=== Task Manager ===\n\n")
  
  foundation.vga_write_string("System Information:\n")
  foundation.vga_write_string("  Uptime: ")
  var seconds: u64 = timer.timer_get_seconds()
  foundation.vga_write_string(" seconds\n")
  
  foundation.vga_write_string("  Processes: ")
  var count: u32 = process.process_get_count()
  foundation.vga_write_string("\n")
  
  foundation.vga_write_string("\nProcesses:\n")
  foundation.vga_write_string("  PID  NAME                STATE\n")
  foundation.vga_write_string("  ---  ----                -----\n")
  
  var i: u32 = 0
  while i < 10 {
    foundation.vga_write_string("  ")
    foundation.vga_write_string("    Process")
    foundation.vga_write_string("        Running\n")
    i = i + 1
  }
  
  foundation.vga_write_string("\nCommands: R=Refresh K=Kill Q=Quit\n")
}

export fn taskmanager_main() {
  taskmanager_draw()
  
  var running: u32 = 1
  while running == 1 {
    while keyboard.keyboard_has_char() == 0 {}
    var ch: u8 = keyboard.keyboard_getchar()
    
    if ch == 'q' or ch == 'Q' {
      running = 0
    } else if ch == 'r' or ch == 'R' {
      taskmanager_draw()
    } else if ch == 'k' or ch == 'K' {
      foundation.vga_write_string("\nEnter PID to kill: ")
      var input: [u8; 16]
      var len: u32 = keyboard.keyboard_getline(@ptrFromInt(input), 16)
      foundation.vga_write_string("(Not implemented)\n")
    }
  }
}
