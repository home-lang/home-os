// home-os Window Manager
// Multi-window management system

import "../../kernel/src/core/foundation.home" as foundation
import "../../kernel/src/drivers/framebuffer.home" as fb
import "../../kernel/src/drivers/mouse.home" as mouse
import "../../kernel/src/drivers/keyboard.home" as keyboard

const MAX_WINDOWS: u32 = 32

const WINDOW_STATE_NORMAL: u32 = 0
const WINDOW_STATE_MINIMIZED: u32 = 1
const WINDOW_STATE_MAXIMIZED: u32 = 2
const WINDOW_STATE_FULLSCREEN: u32 = 3

struct Window {
  id: u32,
  title: [u8; 256],
  x: u32,
  y: u32,
  width: u32,
  height: u32,
  state: u32,
  visible: u32,
  focused: u32,
  frameless: u32,
  resizable: u32,
  z_index: u32,
  min_width: u32,
  min_height: u32,
  max_width: u32,
  max_height: u32
}

var windows: [Window; 32]
var window_count: u32 = 0
var focused_window: u32 = 0xFFFFFFFF

var wm_initialized: u32 = 0

export fn wm_init() {
  if wm_initialized == 1 { return }
  
  window_count = 0
  focused_window = 0xFFFFFFFF
  
  wm_initialized = 1
  foundation.serial_write_string("[WM] Window manager initialized\n")
}

export fn wm_create_window(title: u64, x: u32, y: u32, width: u32, height: u32) -> u32 {
  if window_count >= MAX_WINDOWS { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < 256 {
    windows[window_count].title[i] = @intToPtr(title + i, u8)
    if windows[window_count].title[i] == 0 { break }
    i = i + 1
  }
  
  windows[window_count].id = window_count
  windows[window_count].x = x
  windows[window_count].y = y
  windows[window_count].width = width
  windows[window_count].height = height
  windows[window_count].state = WINDOW_STATE_NORMAL
  windows[window_count].visible = 1
  windows[window_count].focused = 0
  windows[window_count].frameless = 0
  windows[window_count].resizable = 1
  windows[window_count].z_index = window_count
  windows[window_count].min_width = 200
  windows[window_count].min_height = 150
  windows[window_count].max_width = 1920
  windows[window_count].max_height = 1080
  
  var id: u32 = window_count
  window_count = window_count + 1
  
  wm_focus_window(id)
  
  return id
}

export fn wm_close_window(window_id: u32) {
  if window_id >= window_count { return }
  
  windows[window_id].visible = 0
  
  if focused_window == window_id {
    wm_focus_next_window()
  }
}

export fn wm_minimize_window(window_id: u32) {
  if window_id >= window_count { return }
  windows[window_id].state = WINDOW_STATE_MINIMIZED
}

export fn wm_maximize_window(window_id: u32) {
  if window_id >= window_count { return }
  
  if windows[window_id].state == WINDOW_STATE_MAXIMIZED {
    windows[window_id].state = WINDOW_STATE_NORMAL
  } else {
    windows[window_id].state = WINDOW_STATE_MAXIMIZED
  }
}

export fn wm_focus_window(window_id: u32) {
  if window_id >= window_count { return }
  
  // Unfocus all windows
  var i: u32 = 0
  while i < window_count {
    windows[i].focused = 0
    i = i + 1
  }
  
  windows[window_id].focused = 1
  focused_window = window_id
  
  // Bring to front
  wm_bring_to_front(window_id)
}

fn wm_bring_to_front(window_id: u32) {
  var max_z: u32 = 0
  var i: u32 = 0
  while i < window_count {
    if windows[i].z_index > max_z {
      max_z = windows[i].z_index
    }
    i = i + 1
  }
  
  windows[window_id].z_index = max_z + 1
}

fn wm_focus_next_window() {
  var i: u32 = 0
  while i < window_count {
    if windows[i].visible == 1 and windows[i].state != WINDOW_STATE_MINIMIZED {
      wm_focus_window(i)
      return
    }
    i = i + 1
  }
  
  focused_window = 0xFFFFFFFF
}

export fn wm_move_window(window_id: u32, x: u32, y: u32) {
  if window_id >= window_count { return }
  windows[window_id].x = x
  windows[window_id].y = y
}

export fn wm_resize_window(window_id: u32, width: u32, height: u32) {
  if window_id >= window_count { return }
  if windows[window_id].resizable == 0 { return }
  
  // Enforce min/max constraints
  if width < windows[window_id].min_width {
    width = windows[window_id].min_width
  }
  if width > windows[window_id].max_width {
    width = windows[window_id].max_width
  }
  if height < windows[window_id].min_height {
    height = windows[window_id].min_height
  }
  if height > windows[window_id].max_height {
    height = windows[window_id].max_height
  }
  
  windows[window_id].width = width
  windows[window_id].height = height
}

export fn wm_render() {
  // Sort windows by z-index
  var sorted_indices: [u32; 32]
  var i: u32 = 0
  while i < window_count {
    sorted_indices[i] = i
    i = i + 1
  }
  
  // Simple bubble sort by z-index
  i = 0
  while i < window_count - 1 {
    var j: u32 = 0
    while j < window_count - i - 1 {
      if windows[sorted_indices[j]].z_index > windows[sorted_indices[j + 1]].z_index {
        var temp: u32 = sorted_indices[j]
        sorted_indices[j] = sorted_indices[j + 1]
        sorted_indices[j + 1] = temp
      }
      j = j + 1
    }
    i = i + 1
  }
  
  // Render windows in z-order
  i = 0
  while i < window_count {
    var win_id: u32 = sorted_indices[i]
    if windows[win_id].visible == 1 and windows[win_id].state != WINDOW_STATE_MINIMIZED {
      wm_render_window(win_id)
    }
    i = i + 1
  }
}

fn wm_render_window(window_id: u32) {
  var win: Window = windows[window_id]
  
  var x: u32 = win.x
  var y: u32 = win.y
  var width: u32 = win.width
  var height: u32 = win.height
  
  if win.state == WINDOW_STATE_MAXIMIZED {
    x = 0
    y = 0
    width = 1920
    height = 1080
  }
  
  // Draw window shadow
  fb.fb_fill_rect(x + 5, y + 5, width, height, 0x00000040)
  
  // Draw window background
  fb.fb_fill_rect(x, y, width, height, 0x2D2D2D)
  
  // Draw title bar (if not frameless)
  if win.frameless == 0 {
    var titlebar_color: u32 = 0x3C3C3C
    if win.focused == 1 {
      titlebar_color = 0x0078D4
    }
    
    fb.fb_fill_rect(x, y, width, 30, titlebar_color)
    fb.fb_draw_text(x + 10, y + 8, @ptrFromInt(win.title), 0xFFFFFF)
    
    // Draw window controls
    wm_draw_window_controls(x, y, width)
  }
  
  // Draw window border
  if win.focused == 1 {
    fb.fb_draw_rect(x, y, width, height, 0x0078D4)
  } else {
    fb.fb_draw_rect(x, y, width, height, 0x666666)
  }
}

fn wm_draw_window_controls(x: u32, y: u32, width: u32) {
  var button_x: u32 = x + width - 100
  
  // Minimize button
  fb.fb_fill_rect(button_x, y + 5, 25, 20, 0x555555)
  fb.fb_draw_text(button_x + 8, y + 8, "_", 0xFFFFFF)
  
  // Maximize button
  fb.fb_fill_rect(button_x + 30, y + 5, 25, 20, 0x555555)
  fb.fb_draw_text(button_x + 36, y + 8, "□", 0xFFFFFF)
  
  // Close button
  fb.fb_fill_rect(button_x + 60, y + 5, 25, 20, 0xE81123)
  fb.fb_draw_text(button_x + 66, y + 8, "×", 0xFFFFFF)
}
