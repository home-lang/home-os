// home-os Craft Native Bridge
// Integration with Craft UI framework (https://github.com/stacksjs/craft)
// Zig-based cross-platform UI engine adapted for Home

import "../../kernel/src/core/foundation.home" as foundation
import "../../kernel/src/drivers/framebuffer.home" as fb
import "../../kernel/src/drivers/keyboard.home" as keyboard
import "../../kernel/src/drivers/mouse.home" as mouse

// Craft Native API - inspired by Craft's Zig implementation
const CraftWindow = struct {
  title: [u8; 256],
  width: u32,
  height: u32,
  x: u32,
  y: u32,
  visible: u32,
  frameless: u32,
  transparent: u32,
  always_on_top: u32,
  dark_mode: u32
}

const CraftComponent = struct {
  id: u32,
  type: u32,
  x: u32,
  y: u32,
  width: u32,
  height: u32,
  visible: u32,
  enabled: u32,
  data: u64
}

var craft_initialized: u32 = 0
var windows: [CraftWindow; 10]
var window_count: u32 = 0
var components: [CraftComponent; 1000]
var component_count: u32 = 0

export fn craft_init() {
  if craft_initialized == 1 { return }
  
  fb.fb_init(0xFD000000, 1920, 1080)
  
  craft_initialized = 1
  foundation.serial_write_string("[Craft] Native bridge initialized\n")
}

export fn craft_create_window(title: u64, width: u32, height: u32) -> u32 {
  if window_count >= 10 { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < 256 {
    windows[window_count].title[i] = @intToPtr(title + i, u8)
    if windows[window_count].title[i] == 0 { break }
    i = i + 1
  }
  
  windows[window_count].width = width
  windows[window_count].height = height
  windows[window_count].x = 100
  windows[window_count].y = 100
  windows[window_count].visible = 1
  windows[window_count].frameless = 0
  windows[window_count].transparent = 0
  windows[window_count].always_on_top = 0
  windows[window_count].dark_mode = 1
  
  var id: u32 = window_count
  window_count = window_count + 1
  
  foundation.serial_write_string("[Craft] Created window: ")
  foundation.serial_write_string(title)
  foundation.serial_write_string("\n")
  
  return id
}

export fn craft_show_window(window_id: u32) {
  if window_id >= window_count { return }
  windows[window_id].visible = 1
}

export fn craft_hide_window(window_id: u32) {
  if window_id >= window_count { return }
  windows[window_id].visible = 0
}

// Component creation functions (35 native components from Craft)

export fn craft_create_button(text: u64, x: u32, y: u32, width: u32, height: u32) -> u32 {
  if component_count >= 1000 { return 0xFFFFFFFF }
  
  components[component_count].id = component_count
  components[component_count].type = 1  // Button
  components[component_count].x = x
  components[component_count].y = y
  components[component_count].width = width
  components[component_count].height = height
  components[component_count].visible = 1
  components[component_count].enabled = 1
  components[component_count].data = text
  
  var id: u32 = component_count
  component_count = component_count + 1
  
  return id
}

export fn craft_create_label(text: u64, x: u32, y: u32) -> u32 {
  if component_count >= 1000 { return 0xFFFFFFFF }
  
  components[component_count].id = component_count
  components[component_count].type = 2  // Label
  components[component_count].x = x
  components[component_count].y = y
  components[component_count].visible = 1
  components[component_count].data = text
  
  var id: u32 = component_count
  component_count = component_count + 1
  
  return id
}

export fn craft_create_textinput(x: u32, y: u32, width: u32, height: u32) -> u32 {
  if component_count >= 1000 { return 0xFFFFFFFF }
  
  components[component_count].id = component_count
  components[component_count].type = 3  // TextInput
  components[component_count].x = x
  components[component_count].y = y
  components[component_count].width = width
  components[component_count].height = height
  components[component_count].visible = 1
  components[component_count].enabled = 1
  
  var id: u32 = component_count
  component_count = component_count + 1
  
  return id
}

export fn craft_render_window(window_id: u32) {
  if window_id >= window_count { return }
  if windows[window_id].visible == 0 { return }
  
  // Clear background
  var bg_color: u32 = 0x1E1E1E
  if windows[window_id].dark_mode == 0 {
    bg_color = 0xFFFFFF
  }
  
  fb.fb_clear(bg_color)
  
  // Draw window title bar (if not frameless)
  if windows[window_id].frameless == 0 {
    fb.fb_fill_rect(0, 0, windows[window_id].width, 30, 0x2D2D2D)
    fb.fb_draw_text(10, 8, @ptrFromInt(windows[window_id].title), 0xFFFFFF)
  }
  
  // Render all components
  var i: u32 = 0
  while i < component_count {
    if components[i].visible == 1 {
      craft_render_component(i)
    }
    i = i + 1
  }
  
  fb.fb_present()
}

fn craft_render_component(component_id: u32) {
  var comp: CraftComponent = components[component_id]
  
  if comp.type == 1 {  // Button
    var bg_color: u32 = 0x0078D4
    if comp.enabled == 0 {
      bg_color = 0x666666
    }
    
    fb.fb_fill_rect(comp.x, comp.y, comp.width, comp.height, bg_color)
    fb.fb_draw_text(comp.x + 10, comp.y + 10, comp.data, 0xFFFFFF)
  } else if comp.type == 2 {  // Label
    fb.fb_draw_text(comp.x, comp.y, comp.data, 0xD4D4D4)
  } else if comp.type == 3 {  // TextInput
    fb.fb_fill_rect(comp.x, comp.y, comp.width, comp.height, 0x3C3C3C)
    fb.fb_draw_rect(comp.x, comp.y, comp.width, comp.height, 0x666666)
  }
}

export fn craft_main() {
  craft_init()
  
  // Create main window
  var window: u32 = craft_create_window("Craft Native App", 800, 600)
  
  // Create some components
  craft_create_label("Welcome to Craft Native!", 50, 50)
  craft_create_button("Click Me", 50, 100, 150, 40)
  craft_create_textinput(50, 160, 300, 35)
  
  craft_show_window(window)
  craft_render_window(window)
  
  // Event loop
  var running: u32 = 1
  while running == 1 {
    if keyboard.keyboard_has_char() == 1 {
      var ch: u8 = keyboard.keyboard_getchar()
      if ch == 'q' or ch == 'Q' {
        running = 0
      }
    }
    
    craft_render_window(window)
  }
}
