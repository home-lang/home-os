// home-os Terminal Emulator
// Full-featured terminal

import "../kernel/src/core/foundation.home" as foundation
import "../kernel/src/drivers/keyboard.home" as keyboard
import "../kernel/src/lib/den_lib.home" as den

const TERM_WIDTH: u32 = 80
const TERM_HEIGHT: u32 = 25

var cursor_x: u32 = 0
var cursor_y: u32 = 0
var command_buffer: [u8; 256]
var command_len: u32 = 0

fn terminal_clear() {
  foundation.vga_clear()
  cursor_x = 0
  cursor_y = 0
}

fn terminal_newline() {
  cursor_x = 0
  cursor_y = cursor_y + 1
  
  if cursor_y >= TERM_HEIGHT {
    cursor_y = TERM_HEIGHT - 1
    // Scroll (stub)
  }
}

fn terminal_putchar(ch: u8) {
  if ch == '\n' {
    terminal_newline()
  } else if ch == '\b' {
    if cursor_x > 0 {
      cursor_x = cursor_x - 1
      foundation.vga_write_char(' ')
    }
  } else {
    foundation.vga_write_char(ch)
    cursor_x = cursor_x + 1
    
    if cursor_x >= TERM_WIDTH {
      terminal_newline()
    }
  }
}

fn terminal_prompt() {
  foundation.vga_write_string("$ ")
}

fn terminal_execute() {
  if command_len == 0 { return }
  
  terminal_newline()
  
  // Check built-in commands
  if command_buffer[0] == 'c' and command_buffer[1] == 'l' and command_buffer[2] == 's' {
    terminal_clear()
  } else if command_buffer[0] == 'e' and command_buffer[1] == 'x' and command_buffer[2] == 'i' and command_buffer[3] == 't' {
    foundation.vga_write_string("Goodbye!\n")
    return
  } else {
    // Try Den integration
    var result: u32 = den.den_execute_command(@ptrFromInt(command_buffer), command_len)
    if result != 0 {
      foundation.vga_write_string("Command not found\n")
    }
  }
  
  command_len = 0
}

export fn terminal_main() {
  terminal_clear()
  foundation.vga_write_string("home-os Terminal v1.0\n\n")
  terminal_prompt()
  
  var running: u32 = 1
  while running == 1 {
    while keyboard.keyboard_has_char() == 0 {}
    var ch: u8 = keyboard.keyboard_getchar()
    
    if ch == '\n' {
      terminal_execute()
      terminal_prompt()
    } else if ch == '\b' {
      if command_len > 0 {
        command_len = command_len - 1
        terminal_putchar('\b')
      }
    } else if ch >= 32 and ch < 127 {
      if command_len < 255 {
        command_buffer[command_len] = ch
        command_len = command_len + 1
        terminal_putchar(ch)
      }
    }
  }
}
