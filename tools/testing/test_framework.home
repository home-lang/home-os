// home-os - Testing Framework
// Unit and integration testing

import "../../kernel/src/core/foundation.home" as foundation

const MAX_TESTS: u32 = 1000

struct TestCase {
  name: [u8; 128],
  func: u64,
  passed: u32,
  failed: u32,
  skipped: u32
}

var tests: [TestCase; 1000]
var test_count: u32 = 0
var tests_passed: u32 = 0
var tests_failed: u32 = 0

export fn test_init() {
  test_count = 0
  tests_passed = 0
  tests_failed = 0
  foundation.serial_write_string("[Test] Framework initialized\n")
}

export fn test_register(name: u64, func: u64) -> u32 {
  if test_count >= MAX_TESTS { return 0 }
  
  var i: u32 = 0
  while i < 127 {
    var ch: u8 = @intToPtr(name + i, u8)
    tests[test_count].name[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  tests[test_count].func = func
  tests[test_count].passed = 0
  tests[test_count].failed = 0
  tests[test_count].skipped = 0
  
  test_count = test_count + 1
  return test_count - 1
}

export fn test_run_all() {
  foundation.serial_write_string("\n=== Running Tests ===\n\n")
  
  var i: u32 = 0
  while i < test_count {
    foundation.serial_write_string("Running: ")
    foundation.serial_write_string(@ptrFromInt(tests[i].name))
    foundation.serial_write_string(" ... ")
    
    var result: u32 = foundation.call_function(tests[i].func, 0)
    
    if result == 1 {
      foundation.serial_write_string("PASS\n")
      tests[i].passed = 1
      tests_passed = tests_passed + 1
    } else {
      foundation.serial_write_string("FAIL\n")
      tests[i].failed = 1
      tests_failed = tests_failed + 1
    }
    
    i = i + 1
  }
  
  foundation.serial_write_string("\n=== Test Summary ===\n")
  foundation.serial_write_string("Total: ")
  foundation.serial_write_hex(test_count)
  foundation.serial_write_string("\nPassed: ")
  foundation.serial_write_hex(tests_passed)
  foundation.serial_write_string("\nFailed: ")
  foundation.serial_write_hex(tests_failed)
  foundation.serial_write_string("\n")
}

export fn test_assert(condition: u32, message: u64) -> u32 {
  if condition == 0 {
    foundation.serial_write_string("  Assertion failed: ")
    foundation.serial_write_string(message)
    foundation.serial_write_string("\n")
    return 0
  }
  return 1
}

export fn test_assert_eq(a: u64, b: u64, message: u64) -> u32 {
  if a != b {
    foundation.serial_write_string("  Assertion failed: ")
    foundation.serial_write_string(message)
    foundation.serial_write_string(" (")
    foundation.serial_write_hex(@truncate(a, u32))
    foundation.serial_write_string(" != ")
    foundation.serial_write_hex(@truncate(b, u32))
    foundation.serial_write_string(")\n")
    return 0
  }
  return 1
}

export fn main() {
  test_init()
  foundation.serial_write_string("Test Framework\n")
}
