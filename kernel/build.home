// home-os kernel build configuration
// Using Home's build system

const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{
        .default_target = .{
            .cpu_arch = .x86_64,
            .os_tag = .freestanding,
            .abi = .none,
        },
    });

    const optimize = b.standardOptimizeOption(.{});

    // Kernel executable
    const kernel = b.addExecutable(.{
        .name = "home-kernel",
        .root_source_file = b.path("src/kernel.home"),
        .target = target,
        .optimize = optimize,
    });

    // Set code model for kernel
    kernel.code_model = .kernel;

    // Add custom linker script
    kernel.setLinkerScriptPath(b.path("linker.ld"));

    // Link against Home's kernel, ffi, and threading packages
    kernel.addModule("multiboot2", b.dependency("home", .{}).module("kernel/multiboot2"));
    kernel.addModule("ffi", b.dependency("home", .{}).module("ffi"));
    kernel.addModule("threading", b.dependency("home", .{}).module("threading"));

    // Build artifacts
    b.installArtifact(kernel);

    // ISO creation step
    const iso = b.step("iso", "Create bootable ISO image");
    const create_iso = b.addSystemCommand(&[_][]const u8{
        "grub-mkrescue",
        "-o",
        "home-os.iso",
        "iso/",
    });
    create_iso.step.dependOn(&kernel.step);
    iso.dependOn(&create_iso.step);

    // QEMU testing step
    const qemu = b.step("qemu", "Run kernel in QEMU");
    const run_qemu = b.addSystemCommand(&[_][]const u8{
        "qemu-system-x86_64",
        "-cdrom",
        "home-os.iso",
        "-serial",
        "stdio",
        "-m",
        "512M",
    });
    run_qemu.step.dependOn(iso);
    qemu.dependOn(&run_qemu.step);

    // QEMU with KVM
    const qemu_kvm = b.step("qemu-kvm", "Run kernel in QEMU with KVM");
    const run_qemu_kvm = b.addSystemCommand(&[_][]const u8{
        "qemu-system-x86_64",
        "-cdrom",
        "home-os.iso",
        "-serial",
        "stdio",
        "-m",
        "512M",
        "-enable-kvm",
    });
    run_qemu_kvm.step.dependOn(iso);
    qemu_kvm.dependOn(&run_qemu_kvm.step);

    // QEMU debug mode
    const qemu_debug = b.step("qemu-debug", "Run kernel in QEMU with GDB support");
    const run_qemu_debug = b.addSystemCommand(&[_][]const u8{
        "qemu-system-x86_64",
        "-cdrom",
        "home-os.iso",
        "-serial",
        "stdio",
        "-m",
        "512M",
        "-s",
        "-S",
    });
    run_qemu_debug.step.dependOn(iso);
    qemu_debug.dependOn(&run_qemu_debug.step);

    // Tests
    const kernel_tests = b.addTest(.{
        .root_source_file = b.path("src/kernel.home"),
        .target = target,
        .optimize = optimize,
    });

    const run_tests = b.addRunArtifact(kernel_tests);
    const test_step = b.step("test", "Run kernel tests");
    test_step.dependOn(&run_tests.step);
}
