// home-os Kernel - Locale and Internationalization
// Language, timezone, and regional settings

import "../core/foundation.home" as foundation

const MAX_LOCALES: u32 = 100

struct Locale {
  code: [u8; 16],      // en_US, ja_JP, etc.
  name: [u8; 64],      // English (United States)
  language: [u8; 32],  // English
  country: [u8; 32],   // United States
  encoding: [u8; 16],  // UTF-8
  decimal_point: u8,
  thousands_sep: u8,
  currency_symbol: [u8; 8],
  date_format: [u8; 32],
  time_format: [u8; 32]
}

var locales: [Locale; 100]
var locale_count: u32 = 0
var current_locale: u32 = 0

export fn locale_init() {
  locale_count = 0
  
  // Register default locales
  locale_register_en_us()
  locale_register_ja_jp()
  locale_register_de_de()
  locale_register_fr_fr()
  locale_register_zh_cn()
  
  current_locale = 0  // en_US
  
  foundation.serial_write_string("[Locale] Initialized with ")
  foundation.serial_write_hex(locale_count)
  foundation.serial_write_string(" locales\n")
}

fn locale_register_en_us() {
  var id: u32 = locale_count
  
  locale_copy_string(@ptrFromInt(locales[id].code), @ptrFromInt("en_US"), 16)
  locale_copy_string(@ptrFromInt(locales[id].name), @ptrFromInt("English (United States)"), 64)
  locale_copy_string(@ptrFromInt(locales[id].language), @ptrFromInt("English"), 32)
  locale_copy_string(@ptrFromInt(locales[id].country), @ptrFromInt("United States"), 32)
  locale_copy_string(@ptrFromInt(locales[id].encoding), @ptrFromInt("UTF-8"), 16)
  
  locales[id].decimal_point = '.'
  locales[id].thousands_sep = ','
  
  locale_copy_string(@ptrFromInt(locales[id].currency_symbol), @ptrFromInt("$"), 8)
  locale_copy_string(@ptrFromInt(locales[id].date_format), @ptrFromInt("%m/%d/%Y"), 32)
  locale_copy_string(@ptrFromInt(locales[id].time_format), @ptrFromInt("%I:%M:%S %p"), 32)
  
  locale_count = locale_count + 1
}

fn locale_register_ja_jp() {
  var id: u32 = locale_count
  
  locale_copy_string(@ptrFromInt(locales[id].code), @ptrFromInt("ja_JP"), 16)
  locale_copy_string(@ptrFromInt(locales[id].name), @ptrFromInt("Japanese (Japan)"), 64)
  locale_copy_string(@ptrFromInt(locales[id].language), @ptrFromInt("Japanese"), 32)
  locale_copy_string(@ptrFromInt(locales[id].country), @ptrFromInt("Japan"), 32)
  locale_copy_string(@ptrFromInt(locales[id].encoding), @ptrFromInt("UTF-8"), 16)
  
  locales[id].decimal_point = '.'
  locales[id].thousands_sep = ','
  
  locale_copy_string(@ptrFromInt(locales[id].currency_symbol), @ptrFromInt("¥"), 8)
  locale_copy_string(@ptrFromInt(locales[id].date_format), @ptrFromInt("%Y/%m/%d"), 32)
  locale_copy_string(@ptrFromInt(locales[id].time_format), @ptrFromInt("%H:%M:%S"), 32)
  
  locale_count = locale_count + 1
}

fn locale_register_de_de() {
  var id: u32 = locale_count
  
  locale_copy_string(@ptrFromInt(locales[id].code), @ptrFromInt("de_DE"), 16)
  locale_copy_string(@ptrFromInt(locales[id].name), @ptrFromInt("German (Germany)"), 64)
  
  locales[id].decimal_point = ','
  locales[id].thousands_sep = '.'
  
  locale_copy_string(@ptrFromInt(locales[id].currency_symbol), @ptrFromInt("€"), 8)
  locale_copy_string(@ptrFromInt(locales[id].date_format), @ptrFromInt("%d.%m.%Y"), 32)
  
  locale_count = locale_count + 1
}

fn locale_register_fr_fr() {
  var id: u32 = locale_count
  
  locale_copy_string(@ptrFromInt(locales[id].code), @ptrFromInt("fr_FR"), 16)
  locale_copy_string(@ptrFromInt(locales[id].name), @ptrFromInt("French (France)"), 64)
  
  locales[id].decimal_point = ','
  locales[id].thousands_sep = ' '
  
  locale_copy_string(@ptrFromInt(locales[id].currency_symbol), @ptrFromInt("€"), 8)
  locale_copy_string(@ptrFromInt(locales[id].date_format), @ptrFromInt("%d/%m/%Y"), 32)
  
  locale_count = locale_count + 1
}

fn locale_register_zh_cn() {
  var id: u32 = locale_count
  
  locale_copy_string(@ptrFromInt(locales[id].code), @ptrFromInt("zh_CN"), 16)
  locale_copy_string(@ptrFromInt(locales[id].name), @ptrFromInt("Chinese (China)"), 64)
  
  locale_copy_string(@ptrFromInt(locales[id].currency_symbol), @ptrFromInt("¥"), 8)
  locale_copy_string(@ptrFromInt(locales[id].date_format), @ptrFromInt("%Y年%m月%d日"), 32)
  
  locale_count = locale_count + 1
}

fn locale_copy_string(dest: u64, src: u64, max_len: u32) {
  var i: u32 = 0
  while i < max_len - 1 {
    var ch: u8 = @intToPtr(src + i, u8)
    @intToPtr(dest + i, u8) = ch
    if ch == 0 { break }
    i = i + 1
  }
  @intToPtr(dest + i, u8) = 0
}

export fn locale_set(locale_code: u64) -> u32 {
  var i: u32 = 0
  while i < locale_count {
    if locale_strcmp(@ptrFromInt(locales[i].code), locale_code) == 1 {
      current_locale = i
      
      foundation.serial_write_string("[Locale] Set to ")
      foundation.serial_write_string(@ptrFromInt(locales[i].name))
      foundation.serial_write_string("\n")
      
      return 1
    }
    i = i + 1
  }
  
  return 0
}

fn locale_strcmp(s1: u64, s2: u64) -> u32 {
  var i: u32 = 0
  while 1 == 1 {
    var c1: u8 = @intToPtr(s1 + i, u8)
    var c2: u8 = @intToPtr(s2 + i, u8)
    
    if c1 != c2 { return 0 }
    if c1 == 0 { return 1 }
    
    i = i + 1
  }
  return 0
}

export fn locale_get_current() -> u32 {
  return current_locale
}

export fn locale_format_number(number: u64, buffer: u64, buffer_size: u32) -> u32 {
  var decimal: u8 = locales[current_locale].decimal_point
  var thousands: u8 = locales[current_locale].thousands_sep
  
  // Format number with locale-specific separators
  return 0
}

export fn locale_format_currency(amount: u64, buffer: u64, buffer_size: u32) -> u32 {
  var symbol: u64 = @ptrFromInt(locales[current_locale].currency_symbol)
  
  // Format currency with symbol
  return 0
}

export fn locale_list() {
  foundation.serial_write_string("\n[Locale] Available locales:\n")
  
  var i: u32 = 0
  while i < locale_count {
    foundation.serial_write_string("  ")
    foundation.serial_write_string(@ptrFromInt(locales[i].code))
    foundation.serial_write_string(" - ")
    foundation.serial_write_string(@ptrFromInt(locales[i].name))
    foundation.serial_write_string("\n")
    
    i = i + 1
  }
}
