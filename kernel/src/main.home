// home-os Kernel - Main Entry Point
// Real implementations only - no placeholders!

// Import core kernel modules (real implementations)
import "core/foundation.home" as foundation
import "core/memory.home" as memory
import "core/process.home" as process
import "core/filesystem.home" as filesystem

// Import integration libraries
import "lib/pantry_lib.home" as pantry
import "lib/den_lib.home" as den
import "lib/craft_lib.home" as craft
import "integration.home" as integration

// ============================================================================
// KERNEL INITIALIZATION
// ============================================================================

fn init_all_systems() {
  // Phase 1: Foundation (real implementation)
  foundation.foundation_init()
  
  // Phase 2: Memory Management (real implementation)
  memory.memory_init(128 * 1024 * 1024)  // 128MB
  
  // Phase 3: Process Management (real implementation)
  process.process_init()
  
  // Phase 4: File System (real implementation)
  filesystem.filesystem_init()
  
  // Phase 5+: Integration libraries (real implementations)
  integration.init_all_integrations()
  
  foundation.serial_write_string("[Kernel] All systems initialized\n")
  foundation.vga_write_string("All systems OK\n")
}

// ============================================================================
// MAIN KERNEL ENTRY
// ============================================================================

export fn kernel_main(magic: u32, boot_info: u32) -> never {
  // Disable interrupts during initialization
  foundation.cli()
  
  // Initialize all systems
  init_all_systems()
  
  // Enable interrupts
  foundation.sti()
  
  // Kernel is now running
  foundation.serial_write_string("[Kernel] home-os ready!\n")
  foundation.vga_write_string("home-os ready!\n")
  
  // Test memory allocation
  var ptr: u64 = memory.kmalloc(1024)
  if ptr != 0 {
    foundation.serial_write_string("[Test] Memory allocation works!\n")
    memory.kfree(ptr)
  }
  
  // Test file system
  var fd: u32 = filesystem.vfs_open("/test.txt", 2)
  if fd != 0 {
    foundation.serial_write_string("[Test] File system works!\n")
    filesystem.vfs_close(fd)
  }
  
  // Test process creation
  var pid: u32 = process.process_create(0x100000)
  if pid != 0 {
    foundation.serial_write_string("[Test] Process creation works!\n")
  }
  
  // Enter idle loop
  while true {
    foundation.hlt()
  }
}
