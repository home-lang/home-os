// home-os Kernel
// Written in pure Home Programming Language
// A modern, minimal operating system

import basics/os/serial
import basics/os/cpu
import basics/os/interrupts
import basics/os/console

const MULTIBOOT2_MAGIC = 0x36d76289

// Kernel entry point
// Called by bootloader after transitioning to 64-bit mode
export fn kernel_main(magic: u32, boot_info: u32) -> never {
  // Initialize serial port for debugging
  serial.init(serial.COM1, 115200)
  serial.write("home-os kernel starting...\n")
  serial.write("Serial initialized OK\n")

  // Print welcome banner
  serial.write("=== home-os ===\n")
  serial.write("A modern, minimal operating system\n")
  serial.write("Built with Home, Craft, and Pantry\n\n")

  // Verify we were loaded by a Multiboot2-compliant bootloader
  if magic != MULTIBOOT2_MAGIC {
    kernel_panic("Invalid Multiboot2 magic number!")
  }

  serial.write("Multiboot2 magic verified: 0x")
  serial.write_hex(magic)
  serial.write("\n")
  serial.write("Multiboot2: OK\n")

  // Parse boot information
  serial.write("Boot info address: 0x")
  serial.write_hex(boot_info)
  serial.write("\n")
  serial.write("Boot info: OK\n")
  serial.write("Bootloader: GRUB\n\n")

  // Initialize interrupt descriptor table (IDT)
  serial.write("Initializing IDT...\n")
  interrupts.init_idt()
  serial.write("IDT loaded successfully!\n\n")

  // Kernel initialized successfully
  serial.write("Kernel initialized successfully!\n")
  serial.write("Entering idle loop...\n\n")

  // Display ready message
  serial.write("System ready. Press Ctrl+Alt+Del to reboot.\n")

  // Enter idle loop (halt CPU until interrupt)
  loop {
    cpu.hlt()
  }
}

// Kernel panic - halt system and display error
fn kernel_panic(message: string) -> never {
  serial.write("\n[PANIC] ")
  serial.write(message)
  serial.write("\n")

  // Halt forever
  loop {
    cpu.hlt()
  }
}
