// home-os Display Compositor
// Window compositing and rendering

import "../core/foundation.home" as foundation
import "../drivers/framebuffer.home" as fb

const MAX_WINDOWS: u32 = 32

struct Window {
  x: u32,
  y: u32,
  width: u32,
  height: u32,
  buffer: u64,
  visible: u32,
  z_order: u32
}

var windows: [Window; 32]
var window_count: u32 = 0
var vsync_enabled: u32 = 1

export fn compositor_init() {
  window_count = 0
  fb.fb_init(0xFD000000, 1024, 768)
  foundation.serial_write_string("[Compositor] Initialized\n")
}

export fn compositor_create_window(x: u32, y: u32, width: u32, height: u32) -> u32 {
  if window_count >= MAX_WINDOWS { return 0xFFFFFFFF }
  
  windows[window_count].x = x
  windows[window_count].y = y
  windows[window_count].width = width
  windows[window_count].height = height
  windows[window_count].visible = 1
  windows[window_count].z_order = window_count
  
  var id: u32 = window_count
  window_count = window_count + 1
  
  return id
}

export fn compositor_render() {
  if vsync_enabled == 1 {
    // Wait for vsync (stub)
  }
  
  // Clear screen
  fb.fb_clear(0x000000)
  
  // Render windows in z-order
  var i: u32 = 0
  while i < window_count {
    if windows[i].visible == 1 {
      // Blit window (stub)
    }
    i = i + 1
  }
  
  fb.fb_present()
}

export fn compositor_set_vsync(enabled: u32) {
  vsync_enabled = enabled
}
