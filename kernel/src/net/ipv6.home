// home-os IPv6 Protocol
// Internet Protocol version 6

import "../core/foundation.home" as foundation
import "../drivers/e1000.home" as e1000

const IPV6_HEADER_SIZE: u32 = 40

struct Ipv6Header {
  version_class_flow: u32,
  payload_length: u16,
  next_header: u8,
  hop_limit: u8,
  src_addr: [u8; 16],
  dst_addr: [u8; 16]
}

var ipv6_initialized: u32 = 0
var ipv6_address: [u8; 16]

export fn ipv6_init() {
  if ipv6_initialized == 1 { return }
  
  // Set link-local address (fe80::)
  ipv6_address[0] = 0xFE
  ipv6_address[1] = 0x80
  
  ipv6_initialized = 1
  foundation.serial_write_string("[IPv6] Initialized\n")
}

export fn ipv6_send(dst_addr: u64, data: u64, length: u32) -> u32 {
  if ipv6_initialized == 0 { return 1 }
  
  var packet: [u8; 2048]
  var offset: u32 = 0
  
  // Ethernet header
  offset = offset + 14
  
  // IPv6 header
  var header: Ipv6Header
  header.version_class_flow = 0x60000000
  header.payload_length = length
  header.next_header = 59  // No next header
  header.hop_limit = 64
  
  var i: u32 = 0
  while i < 16 {
    header.src_addr[i] = ipv6_address[i]
    header.dst_addr[i] = @intToPtr(dst_addr + i, u8)
    i = i + 1
  }
  
  offset = offset + IPV6_HEADER_SIZE
  
  // Copy data
  i = 0
  while i < length {
    packet[offset + i] = @intToPtr(data + i, u8)
    i = i + 1
  }
  
  return e1000.e1000_send_packet(@ptrFromInt(packet), offset + length)
}
