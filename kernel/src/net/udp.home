// home-os UDP Protocol
// User Datagram Protocol

import "../core/foundation.home" as foundation
import "../drivers/e1000.home" as e1000

const UDP_HEADER_SIZE: u32 = 8

struct UDPHeader {
  src_port: u16,
  dst_port: u16,
  length: u16,
  checksum: u16
}

export fn udp_init() {
  foundation.serial_write_string("[UDP] Initialized\n")
}

export fn udp_send(dst_ip: u32, dst_port: u16, src_port: u16, data: u64, len: u32) -> u32 {
  var packet: [u8; 1500]
  var offset: u32 = 0
  
  // Ethernet header (14 bytes)
  var i: u32 = 0
  while i < 6 {
    packet[offset + i] = 0xFF
    i = i + 1
  }
  offset = offset + 6
  
  e1000.e1000_get_mac_address(@ptrFromInt(packet) + offset)
  offset = offset + 6
  
  packet[offset] = 0x08
  packet[offset + 1] = 0x00
  offset = offset + 2
  
  // IP header (20 bytes)
  packet[offset] = 0x45
  packet[offset + 1] = 0
  var total_len: u16 = 20 + 8 + len
  packet[offset + 2] = (total_len >> 8) & 0xFF
  packet[offset + 3] = total_len & 0xFF
  packet[offset + 8] = 64
  packet[offset + 9] = 17  // UDP
  offset = offset + 20
  
  // UDP header (8 bytes)
  packet[offset] = (src_port >> 8) & 0xFF
  packet[offset + 1] = src_port & 0xFF
  packet[offset + 2] = (dst_port >> 8) & 0xFF
  packet[offset + 3] = dst_port & 0xFF
  var udp_len: u16 = 8 + len
  packet[offset + 4] = (udp_len >> 8) & 0xFF
  packet[offset + 5] = udp_len & 0xFF
  packet[offset + 6] = 0
  packet[offset + 7] = 0
  offset = offset + 8
  
  // Data
  i = 0
  while i < len {
    packet[offset + i] = @intToPtr(data + i, u8)
    i = i + 1
  }
  
  return e1000.e1000_send_packet(@ptrFromInt(packet), offset + len)
}

export fn udp_receive(buffer: u64, max_len: u32) -> u32 {
  var packet: [u8; 2048]
  var len: u32 = e1000.e1000_receive_packet(@ptrFromInt(packet), 2048)
  
  if len == 0 { return 0 }
  
  var offset: u32 = 14 + 20 + 8
  var payload_len: u32 = len - offset
  
  if payload_len > max_len { payload_len = max_len }
  
  var i: u32 = 0
  while i < payload_len {
    @ptrToInt(buffer + i, u8) = packet[offset + i]
    i = i + 1
  }
  
  return payload_len
}
