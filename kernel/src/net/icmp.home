// home-os ICMP Protocol
// Internet Control Message Protocol

import "../core/foundation.home" as foundation
import "../drivers/e1000.home" as e1000

const ICMP_ECHO_REQUEST: u8 = 8
const ICMP_ECHO_REPLY: u8 = 0

struct ICMPHeader {
  type: u8,
  code: u8,
  checksum: u16,
  id: u16,
  sequence: u16
}

var icmp_sequence: u16 = 0

export fn icmp_init() {
  icmp_sequence = 0
  foundation.serial_write_string("[ICMP] Initialized\n")
}

fn icmp_checksum(data: u64, len: u32) -> u16 {
  var sum: u32 = 0
  var i: u32 = 0
  
  while i < len - 1 {
    var word: u16 = (@intToPtr(data + i, u8) << 8) | @intToPtr(data + i + 1, u8)
    sum = sum + word
    i = i + 2
  }
  
  if i < len {
    sum = sum + (@intToPtr(data + i, u8) << 8)
  }
  
  while (sum >> 16) != 0 {
    sum = (sum & 0xFFFF) + (sum >> 16)
  }
  
  return ~sum
}

export fn icmp_ping(dst_ip: u32) -> u32 {
  var packet: [u8; 1500]
  var offset: u32 = 0
  
  // Ethernet header
  var i: u32 = 0
  while i < 6 {
    packet[offset + i] = 0xFF
    i = i + 1
  }
  offset = offset + 6
  
  e1000.e1000_get_mac_address(@ptrFromInt(packet) + offset)
  offset = offset + 6
  
  packet[offset] = 0x08
  packet[offset + 1] = 0x00
  offset = offset + 2
  
  // IP header
  var ip_start: u32 = offset
  packet[offset] = 0x45
  packet[offset + 1] = 0
  var total_len: u16 = 20 + 8 + 32
  packet[offset + 2] = (total_len >> 8) & 0xFF
  packet[offset + 3] = total_len & 0xFF
  packet[offset + 8] = 64
  packet[offset + 9] = 1  // ICMP
  offset = offset + 20
  
  // ICMP header
  var icmp_start: u32 = offset
  packet[offset] = ICMP_ECHO_REQUEST
  packet[offset + 1] = 0
  packet[offset + 2] = 0
  packet[offset + 3] = 0
  packet[offset + 4] = 0
  packet[offset + 5] = 1
  packet[offset + 6] = (icmp_sequence >> 8) & 0xFF
  packet[offset + 7] = icmp_sequence & 0xFF
  offset = offset + 8
  
  // Data
  i = 0
  while i < 32 {
    packet[offset + i] = i
    i = i + 1
  }
  offset = offset + 32
  
  // Calculate ICMP checksum
  var csum: u16 = icmp_checksum(@ptrFromInt(packet) + icmp_start, 40)
  packet[icmp_start + 2] = (csum >> 8) & 0xFF
  packet[icmp_start + 3] = csum & 0xFF
  
  icmp_sequence = icmp_sequence + 1
  
  return e1000.e1000_send_packet(@ptrFromInt(packet), offset)
}
