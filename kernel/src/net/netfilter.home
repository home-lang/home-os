// home-os Netfilter
// Packet filtering and firewall

import "../core/foundation.home" as foundation

const NF_DROP: u32 = 0
const NF_ACCEPT: u32 = 1

const MAX_RULES: u32 = 128

struct FirewallRule {
  src_ip: u32,
  dst_ip: u32,
  src_port: u16,
  dst_port: u16,
  protocol: u8,
  action: u32,
  enabled: u32
}

var rules: [FirewallRule; 128]
var rule_count: u32 = 0
var netfilter_enabled: u32 = 0

export fn netfilter_init() {
  rule_count = 0
  netfilter_enabled = 1
  foundation.serial_write_string("[Netfilter] Initialized\n")
}

export fn netfilter_add_rule(src_ip: u32, dst_ip: u32, protocol: u8, action: u32) -> u32 {
  if rule_count >= MAX_RULES { return 0xFFFFFFFF }
  
  rules[rule_count].src_ip = src_ip
  rules[rule_count].dst_ip = dst_ip
  rules[rule_count].protocol = protocol
  rules[rule_count].action = action
  rules[rule_count].enabled = 1
  
  var id: u32 = rule_count
  rule_count = rule_count + 1
  
  return id
}

export fn netfilter_check_packet(src_ip: u32, dst_ip: u32, protocol: u8) -> u32 {
  if netfilter_enabled == 0 { return NF_ACCEPT }
  
  var i: u32 = 0
  while i < rule_count {
    if rules[i].enabled == 1 {
      if (rules[i].src_ip == 0 or rules[i].src_ip == src_ip) and
         (rules[i].dst_ip == 0 or rules[i].dst_ip == dst_ip) and
         (rules[i].protocol == 0 or rules[i].protocol == protocol) {
        return rules[i].action
      }
    }
    i = i + 1
  }
  
  return NF_ACCEPT
}

export fn netfilter_enable() {
  netfilter_enabled = 1
}

export fn netfilter_disable() {
  netfilter_enabled = 0
}
