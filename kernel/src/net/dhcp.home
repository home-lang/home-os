// home-os DHCP Client
// Dynamic Host Configuration Protocol

import "../core/foundation.home" as foundation
import "udp.home" as udp

const DHCP_DISCOVER: u8 = 1
const DHCP_OFFER: u8 = 2
const DHCP_REQUEST: u8 = 3
const DHCP_ACK: u8 = 5

struct DhcpPacket {
  op: u8,
  htype: u8,
  hlen: u8,
  hops: u8,
  xid: u32,
  secs: u16,
  flags: u16,
  ciaddr: u32,
  yiaddr: u32,
  siaddr: u32,
  giaddr: u32,
  chaddr: [u8; 16],
  sname: [u8; 64],
  file: [u8; 128],
  options: [u8; 312]
}

var dhcp_state: u32 = 0
var dhcp_ip: u32 = 0

export fn dhcp_init() {
  dhcp_state = 0
  dhcp_ip = 0
  foundation.serial_write_string("[DHCP] Initialized\n")
}

export fn dhcp_discover() -> u32 {
  foundation.serial_write_string("[DHCP] Sending DISCOVER\n")
  
  var packet: DhcpPacket
  packet.op = 1  // Boot request
  packet.htype = 1  // Ethernet
  packet.hlen = 6
  packet.xid = 0x12345678
  
  // Send via UDP (stub)
  return 0
}

export fn dhcp_request_ip(offered_ip: u32) -> u32 {
  foundation.serial_write_string("[DHCP] Sending REQUEST\n")
  
  var packet: DhcpPacket
  packet.op = 1
  packet.htype = 1
  packet.hlen = 6
  packet.xid = 0x12345678
  packet.yiaddr = offered_ip
  
  // Send via UDP (stub)
  return 0
}

export fn dhcp_get_ip() -> u32 {
  return dhcp_ip
}
