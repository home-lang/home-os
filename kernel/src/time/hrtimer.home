// home-os High-Resolution Timers
// Nanosecond precision timers

import "../core/foundation.home" as foundation
import "clocksource.home" as clocksource

const MAX_TIMERS: u32 = 64

struct HrTimer {
  expires: u64,
  callback: u64,
  active: u32
}

var timers: [HrTimer; 64]
var timer_count: u32 = 0

export fn hrtimer_init() {
  timer_count = 0
  foundation.serial_write_string("[HRTimer] High-resolution timers initialized\n")
}

export fn hrtimer_start(nanoseconds: u64, callback: u64) -> u32 {
  if timer_count >= MAX_TIMERS { return 0xFFFFFFFF }
  
  var now: u64 = clocksource.clocksource_read()
  
  var i: u32 = 0
  while i < MAX_TIMERS {
    if timers[i].active == 0 {
      timers[i].expires = now + nanoseconds
      timers[i].callback = callback
      timers[i].active = 1
      timer_count = timer_count + 1
      return i
    }
    i = i + 1
  }
  
  return 0xFFFFFFFF
}

export fn hrtimer_cancel(timer_id: u32) {
  if timer_id >= MAX_TIMERS { return }
  
  if timers[timer_id].active == 1 {
    timers[timer_id].active = 0
    timer_count = timer_count - 1
  }
}

export fn hrtimer_tick() {
  var now: u64 = clocksource.clocksource_read()
  
  var i: u32 = 0
  while i < MAX_TIMERS {
    if timers[i].active == 1 and now >= timers[i].expires {
      // Call callback (stub)
      timers[i].active = 0
      timer_count = timer_count - 1
    }
    i = i + 1
  }
}

export fn hrtimer_get_active_count() -> u32 {
  return timer_count
}
