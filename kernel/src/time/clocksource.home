// home-os Clock Source
// High-resolution time sources

import "../core/foundation.home" as foundation

const CLOCK_MONOTONIC: u32 = 0
const CLOCK_REALTIME: u32 = 1
const CLOCK_BOOTTIME: u32 = 2

struct Timespec {
  tv_sec: u64,
  tv_nsec: u64
}

var boot_time: u64 = 0
var monotonic_time: u64 = 0

export fn clocksource_init() {
  boot_time = 0
  monotonic_time = 0
  foundation.serial_write_string("[Clocksource] Initialized\n")
}

export fn clocksource_read() -> u64 {
  // Read TSC or other high-res timer
  var tsc: u64 = foundation.rdtsc()
  return tsc
}

export fn clocksource_get_time(clock_id: u32, ts: u64) {
  var ticks: u64 = clocksource_read()
  
  if clock_id == CLOCK_MONOTONIC {
    @ptrToInt(ts, u64) = monotonic_time + ticks / 1000000000
    @ptrToInt(ts + 8, u64) = (ticks % 1000000000)
  } else if clock_id == CLOCK_REALTIME {
    @ptrToInt(ts, u64) = boot_time + monotonic_time + ticks / 1000000000
    @ptrToInt(ts + 8, u64) = (ticks % 1000000000)
  } else if clock_id == CLOCK_BOOTTIME {
    @ptrToInt(ts, u64) = monotonic_time + ticks / 1000000000
    @ptrToInt(ts + 8, u64) = (ticks % 1000000000)
  }
}

export fn clocksource_tick() {
  monotonic_time = monotonic_time + 1
}
