// home-os Completely Fair Scheduler
// CFS implementation

import "../core/foundation.home" as foundation

const SCHED_NORMAL: u32 = 0
const SCHED_FIFO: u32 = 1
const SCHED_RR: u32 = 2

struct SchedEntity {
  vruntime: u64,
  weight: u32,
  on_rq: u32
}

struct RunQueue {
  nr_running: u32,
  min_vruntime: u64,
  curr: u32
}

var runqueue: RunQueue
var cfs_initialized: u32 = 0

export fn cfs_init() {
  runqueue.nr_running = 0
  runqueue.min_vruntime = 0
  runqueue.curr = 0
  cfs_initialized = 1
  foundation.serial_write_string("[CFS] Completely Fair Scheduler initialized\n")
}

export fn cfs_enqueue(task_id: u32, weight: u32) {
  runqueue.nr_running = runqueue.nr_running + 1
}

export fn cfs_dequeue(task_id: u32) {
  if runqueue.nr_running > 0 {
    runqueue.nr_running = runqueue.nr_running - 1
  }
}

export fn cfs_pick_next() -> u32 {
  if runqueue.nr_running == 0 { return 0xFFFFFFFF }
  
  // Simple round-robin for now
  runqueue.curr = (runqueue.curr + 1) % runqueue.nr_running
  return runqueue.curr
}

export fn cfs_tick() {
  runqueue.min_vruntime = runqueue.min_vruntime + 1
}

export fn cfs_get_load() -> u32 {
  return runqueue.nr_running
}
