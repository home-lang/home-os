// home-os kernel main entry point
// Written in Home language

const multiboot2 = @import("multiboot2");
const serial = @import("serial.home");
const vga = @import("vga.home");
const basics = @import("basics");

// Kernel panic handler
fn panic(msg: []const u8, error_return_trace: ?*basics.builtin.StackTrace, ret_addr: ?usize) noreturn {
    _ = error_return_trace;
    _ = ret_addr;

    serial.writeString("\n[PANIC] ");
    serial.writeString(msg);
    serial.writeString("\n");

    vga.setColor(.Red, .Black);
    vga.writeString("\n*** KERNEL PANIC ***\n");
    vga.writeString(msg);
    vga.writeString("\n");

    // Halt the CPU
    while (true) {
        asm volatile ("hlt");
    }
}

// Set custom panic handler
pub const panic_handler = panic;

// Kernel entry point (called from boot.s)
export fn kernel_main(magic: u32, info_addr: u32) callconv(.C) noreturn {
    // Initialize serial console
    serial.init();
    serial.writeString("home-os kernel starting...\n");

    // Initialize VGA text mode
    vga.init();
    vga.clear();

    // Display boot banner
    vga.setColor(.Cyan, .Black);
    vga.writeString("=== home-os ===\n");
    vga.setColor(.White, .Black);
    vga.writeString("A modern, minimal operating system\n");
    vga.writeString("Built with Home, Craft, and Pantry\n\n");

    // Verify Multiboot2 magic number
    if (magic != multiboot2.MAGIC) {
        @panic("Invalid Multiboot2 magic number!");
    }

    serial.writeString("Multiboot2 magic verified: ");
    serial.writeHex(magic);
    serial.writeString("\n");
    vga.writeString("Multiboot2: OK\n");

    // Parse boot information
    const info = @intToPtr(*multiboot2.Info, info_addr);

    serial.writeString("Boot info address: ");
    serial.writeHex(info_addr);
    serial.writeString("\n");

    // Display bootloader name and memory info
    var tag_iter = info.iterateTags();
    var total_memory: u64 = 0;

    while (tag_iter.next()) |tag| {
        switch (tag.type) {
            .BootloaderName => {
                const bootloader_tag = @ptrCast(*multiboot2.BootloaderNameTag, tag);
                const name = bootloader_tag.getName();

                vga.writeString("Bootloader: ");
                vga.writeString(name);
                vga.writeString("\n");

                serial.writeString("Bootloader: ");
                serial.writeString(name);
                serial.writeString("\n");
            },
            .MemoryMap => {
                const mmap_tag = @ptrCast(*multiboot2.MemoryMapTag, tag);
                var entries = mmap_tag.iterateEntries();

                vga.writeString("Memory map:\n");
                serial.writeString("\nMemory map:\n");

                while (entries.next()) |entry| {
                    serial.writeString("  ");
                    serial.writeHex(entry.base_addr);
                    serial.writeString(" - ");
                    serial.writeHex(entry.base_addr + entry.length);
                    serial.writeString(" (");
                    serial.writeDec(entry.length / 1024);
                    serial.writeString(" KB) - ");
                    serial.writeString(multiboot2.memoryTypeName(entry.type));
                    serial.writeString("\n");

                    if (entry.type == .Available) {
                        total_memory += entry.length;
                    }
                }

                vga.writeString("  Total usable: ");
                vga.writeDec(total_memory / (1024 * 1024));
                vga.writeString(" MB\n");

                serial.writeString("Total usable memory: ");
                serial.writeDec(total_memory / (1024 * 1024));
                serial.writeString(" MB\n\n");
            },
            .CommandLine => {
                const cmdline_tag = @ptrCast(*multiboot2.CommandLineTag, tag);
                const cmdline = cmdline_tag.getCommandLine();

                if (cmdline.len > 0) {
                    vga.writeString("Cmdline: ");
                    vga.writeString(cmdline);
                    vga.writeString("\n");

                    serial.writeString("Command line: ");
                    serial.writeString(cmdline);
                    serial.writeString("\n");
                }
            },
            else => {},
        }
    }

    // Kernel initialized successfully
    vga.writeString("\n");
    vga.setColor(.Green, .Black);
    vga.writeString("Kernel initialized successfully!\n");
    vga.setColor(.White, .Black);

    serial.writeString("\nKernel initialized successfully!\n");
    serial.writeString("Entering idle loop...\n");

    // Display system info
    vga.writeString("\nSystem ready. Press Ctrl+Alt+Del to reboot.\n");

    // Idle loop
    while (true) {
        asm volatile ("hlt");
    }
}
