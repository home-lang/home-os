// home-os Kernel - IoT Sensor Support
// GPIO-based sensors and I2C/SPI devices

import "../core/foundation.home" as foundation
import "../drivers/gpio.home" as gpio
import "../drivers/i2c.home" as i2c
import "../drivers/spi.home" as spi

const MAX_SENSORS: u32 = 64

// Sensor types
const SENSOR_TEMPERATURE: u32 = 1
const SENSOR_HUMIDITY: u32 = 2
const SENSOR_PRESSURE: u32 = 3
const SENSOR_MOTION: u32 = 4
const SENSOR_LIGHT: u32 = 5
const SENSOR_DISTANCE: u32 = 6

struct Sensor {
  type: u32,
  name: [u8; 64],
  interface: u32,  // 0=GPIO, 1=I2C, 2=SPI
  address: u32,
  pin: u32,
  value: i32,
  last_read: u64,
  active: u32
}

var sensors: [Sensor; 64]
var sensor_count: u32 = 0

export fn iot_sensors_init() {
  sensor_count = 0
  
  foundation.serial_write_string("[IoT-Sensors] Initialized\n")
}

export fn iot_sensor_register(type: u32, name: u64, interface: u32, address: u32, pin: u32) -> u32 {
  if sensor_count >= MAX_SENSORS { return 0xFFFFFFFF }
  
  var sensor_id: u32 = sensor_count
  
  sensors[sensor_id].type = type
  sensors[sensor_id].interface = interface
  sensors[sensor_id].address = address
  sensors[sensor_id].pin = pin
  sensors[sensor_id].value = 0
  sensors[sensor_id].last_read = 0
  sensors[sensor_id].active = 1
  
  // Copy name
  var i: u32 = 0
  while i < 63 {
    var ch: u8 = @intToPtr(name + i, u8)
    sensors[sensor_id].name[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  sensor_count = sensor_count + 1
  
  foundation.serial_write_string("[IoT-Sensors] Registered: ")
  foundation.serial_write_string(name)
  foundation.serial_write_string("\n")
  
  return sensor_id
}

export fn iot_sensor_read(sensor_id: u32) -> i32 {
  if sensor_id >= sensor_count { return -1 }
  
  var interface: u32 = sensors[sensor_id].interface
  var type: u32 = sensors[sensor_id].type
  
  if interface == 0 {
    // GPIO sensor
    return iot_sensor_read_gpio(sensor_id)
  } else if interface == 1 {
    // I2C sensor
    return iot_sensor_read_i2c(sensor_id)
  } else if interface == 2 {
    // SPI sensor
    return iot_sensor_read_spi(sensor_id)
  }
  
  return -1
}

fn iot_sensor_read_gpio(sensor_id: u32) -> i32 {
  var pin: u32 = sensors[sensor_id].pin
  var value: u32 = gpio.gpio_read(pin)
  
  sensors[sensor_id].value = @bitCast(value, i32)
  sensors[sensor_id].last_read = foundation.timer_get_ticks()
  
  return @bitCast(value, i32)
}

fn iot_sensor_read_i2c(sensor_id: u32) -> i32 {
  var address: u32 = sensors[sensor_id].address
  var type: u32 = sensors[sensor_id].type
  
  if type == SENSOR_TEMPERATURE {
    return iot_read_temperature_i2c(address)
  } else if type == SENSOR_HUMIDITY {
    return iot_read_humidity_i2c(address)
  } else if type == SENSOR_PRESSURE {
    return iot_read_pressure_i2c(address)
  }
  
  return -1
}

fn iot_sensor_read_spi(sensor_id: u32) -> i32 {
  // Read from SPI sensor
  return 0
}

fn iot_read_temperature_i2c(address: u32) -> i32 {
  // Read from common temperature sensors (e.g., TMP102, LM75)
  var data: [u8; 2]
  i2c.i2c_read(address, 0x00, @ptrFromInt(data), 2)
  
  var temp: i32 = (data[0] << 8) | data[1]
  temp = temp >> 4  // 12-bit value
  
  // Convert to Celsius (0.0625Â°C per LSB)
  return temp * 625 / 100
}

fn iot_read_humidity_i2c(address: u32) -> i32 {
  // Read from humidity sensors (e.g., DHT22, SHT31)
  var data: [u8; 2]
  i2c.i2c_read(address, 0x00, @ptrFromInt(data), 2)
  
  var humidity: i32 = (data[0] << 8) | data[1]
  
  return humidity
}

fn iot_read_pressure_i2c(address: u32) -> i32 {
  // Read from pressure sensors (e.g., BMP280, BME280)
  var data: [u8; 3]
  i2c.i2c_read(address, 0xF7, @ptrFromInt(data), 3)
  
  var pressure: i32 = (data[0] << 16) | (data[1] << 8) | data[2]
  
  return pressure
}

export fn iot_sensor_get_value(sensor_id: u32) -> i32 {
  if sensor_id >= sensor_count { return -1 }
  return sensors[sensor_id].value
}

export fn iot_sensor_list() {
  foundation.serial_write_string("\n[IoT-Sensors] Registered sensors:\n")
  foundation.serial_write_string("ID  Type          Name              Value\n")
  foundation.serial_write_string("--------------------------------------------\n")
  
  var i: u32 = 0
  while i < sensor_count {
    if sensors[i].active == 1 {
      foundation.serial_write_hex(i)
      foundation.serial_write_string("  ")
      
      if sensors[i].type == SENSOR_TEMPERATURE {
        foundation.serial_write_string("Temperature  ")
      } else if sensors[i].type == SENSOR_HUMIDITY {
        foundation.serial_write_string("Humidity     ")
      } else if sensors[i].type == SENSOR_MOTION {
        foundation.serial_write_string("Motion       ")
      }
      
      foundation.serial_write_string(@ptrFromInt(sensors[i].name))
      foundation.serial_write_string("  ")
      foundation.serial_write_hex(@bitCast(sensors[i].value, u32))
      foundation.serial_write_string("\n")
    }
    i = i + 1
  }
}

export fn iot_sensor_poll_all() {
  var i: u32 = 0
  while i < sensor_count {
    if sensors[i].active == 1 {
      iot_sensor_read(i)
    }
    i = i + 1
  }
}
