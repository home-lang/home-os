// home-os Kernel - Home Automation
// Smart home device integration and automation

import "../core/foundation.home" as foundation

const MAX_DEVICES: u32 = 256
const MAX_RULES: u32 = 128

// Device types
const DEVICE_LIGHT: u32 = 1
const DEVICE_SWITCH: u32 = 2
const DEVICE_SENSOR: u32 = 3
const DEVICE_THERMOSTAT: u32 = 4
const DEVICE_LOCK: u32 = 5
const DEVICE_CAMERA: u32 = 6

struct SmartDevice {
  id: u32,
  type: u32,
  name: [u8; 64],
  protocol: u32,  // 0=Zigbee, 1=Z-Wave, 2=WiFi
  address: u64,
  state: u32,
  value: i32,
  online: u32
}

struct AutomationRule {
  id: u32,
  name: [u8; 64],
  trigger_device: u32,
  trigger_condition: u32,
  trigger_value: i32,
  action_device: u32,
  action_type: u32,
  action_value: i32,
  enabled: u32
}

var devices: [SmartDevice; 256]
var device_count: u32 = 0
var rules: [AutomationRule; 128]
var rule_count: u32 = 0

export fn home_automation_init() {
  device_count = 0
  rule_count = 0
  
  foundation.serial_write_string("[HomeAutomation] Initialized\n")
}

export fn home_device_register(type: u32, name: u64, protocol: u32, address: u64) -> u32 {
  if device_count >= MAX_DEVICES { return 0xFFFFFFFF }
  
  var device_id: u32 = device_count
  
  devices[device_id].id = device_id
  devices[device_id].type = type
  devices[device_id].protocol = protocol
  devices[device_id].address = address
  devices[device_id].state = 0
  devices[device_id].value = 0
  devices[device_id].online = 1
  
  // Copy name
  var i: u32 = 0
  while i < 63 {
    var ch: u8 = @intToPtr(name + i, u8)
    devices[device_id].name[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  device_count = device_count + 1
  
  foundation.serial_write_string("[HomeAutomation] Device registered: ")
  foundation.serial_write_string(name)
  foundation.serial_write_string("\n")
  
  return device_id
}

export fn home_device_set_state(device_id: u32, state: u32) -> u32 {
  if device_id >= device_count { return 0 }
  
  devices[device_id].state = state
  
  foundation.serial_write_string("[HomeAutomation] Device ")
  foundation.serial_write_string(@ptrFromInt(devices[device_id].name))
  foundation.serial_write_string(" state set to ")
  foundation.serial_write_hex(state)
  foundation.serial_write_string("\n")
  
  // Send command to device
  home_send_command(device_id, state)
  
  // Check automation rules
  home_check_rules(device_id)
  
  return 1
}

fn home_send_command(device_id: u32, state: u32) {
  var protocol: u32 = devices[device_id].protocol
  
  if protocol == 0 {
    // Zigbee
    home_send_zigbee_command(device_id, state)
  } else if protocol == 1 {
    // Z-Wave
    home_send_zwave_command(device_id, state)
  } else if protocol == 2 {
    // WiFi
    home_send_wifi_command(device_id, state)
  }
}

fn home_send_zigbee_command(device_id: u32, state: u32) {
  // Send Zigbee command
}

fn home_send_zwave_command(device_id: u32, state: u32) {
  // Send Z-Wave command
}

fn home_send_wifi_command(device_id: u32, state: u32) {
  // Send WiFi command (HTTP/MQTT)
}

export fn home_device_get_state(device_id: u32) -> u32 {
  if device_id >= device_count { return 0 }
  return devices[device_id].state
}

export fn home_rule_create(name: u64, trigger_device: u32, trigger_condition: u32, trigger_value: i32, action_device: u32, action_type: u32, action_value: i32) -> u32 {
  if rule_count >= MAX_RULES { return 0xFFFFFFFF }
  
  var rule_id: u32 = rule_count
  
  rules[rule_id].id = rule_id
  rules[rule_id].trigger_device = trigger_device
  rules[rule_id].trigger_condition = trigger_condition
  rules[rule_id].trigger_value = trigger_value
  rules[rule_id].action_device = action_device
  rules[rule_id].action_type = action_type
  rules[rule_id].action_value = action_value
  rules[rule_id].enabled = 1
  
  // Copy name
  var i: u32 = 0
  while i < 63 {
    var ch: u8 = @intToPtr(name + i, u8)
    rules[rule_id].name[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  rule_count = rule_count + 1
  
  foundation.serial_write_string("[HomeAutomation] Rule created: ")
  foundation.serial_write_string(name)
  foundation.serial_write_string("\n")
  
  return rule_id
}

fn home_check_rules(device_id: u32) {
  var i: u32 = 0
  while i < rule_count {
    if rules[i].enabled == 1 and rules[i].trigger_device == device_id {
      if home_evaluate_condition(i) == 1 {
        home_execute_action(i)
      }
    }
    i = i + 1
  }
}

fn home_evaluate_condition(rule_id: u32) -> u32 {
  var device_id: u32 = rules[rule_id].trigger_device
  var condition: u32 = rules[rule_id].trigger_condition
  var trigger_value: i32 = rules[rule_id].trigger_value
  var device_value: i32 = devices[device_id].value
  
  if condition == 0 {  // Equal
    return if device_value == trigger_value { 1 } else { 0 }
  } else if condition == 1 {  // Greater than
    return if device_value > trigger_value { 1 } else { 0 }
  } else if condition == 2 {  // Less than
    return if device_value < trigger_value { 1 } else { 0 }
  }
  
  return 0
}

fn home_execute_action(rule_id: u32) {
  var device_id: u32 = rules[rule_id].action_device
  var action_value: i32 = rules[rule_id].action_value
  
  foundation.serial_write_string("[HomeAutomation] Executing rule: ")
  foundation.serial_write_string(@ptrFromInt(rules[rule_id].name))
  foundation.serial_write_string("\n")
  
  home_device_set_state(device_id, @bitCast(action_value, u32))
}

export fn home_device_list() {
  foundation.serial_write_string("\n[HomeAutomation] Devices:\n")
  foundation.serial_write_string("ID  Type        Name              State  Online\n")
  foundation.serial_write_string("-----------------------------------------------\n")
  
  var i: u32 = 0
  while i < device_count {
    foundation.serial_write_hex(devices[i].id)
    foundation.serial_write_string("  ")
    
    if devices[i].type == DEVICE_LIGHT {
      foundation.serial_write_string("Light      ")
    } else if devices[i].type == DEVICE_SWITCH {
      foundation.serial_write_string("Switch     ")
    } else if devices[i].type == DEVICE_SENSOR {
      foundation.serial_write_string("Sensor     ")
    }
    
    foundation.serial_write_string(@ptrFromInt(devices[i].name))
    foundation.serial_write_string("  ")
    foundation.serial_write_hex(devices[i].state)
    foundation.serial_write_string("     ")
    
    if devices[i].online == 1 {
      foundation.serial_write_string("Yes")
    } else {
      foundation.serial_write_string("No")
    }
    
    foundation.serial_write_string("\n")
    i = i + 1
  }
}

export fn home_rule_list() {
  foundation.serial_write_string("\n[HomeAutomation] Rules:\n")
  
  var i: u32 = 0
  while i < rule_count {
    foundation.serial_write_hex(rules[i].id)
    foundation.serial_write_string(": ")
    foundation.serial_write_string(@ptrFromInt(rules[i].name))
    
    if rules[i].enabled == 1 {
      foundation.serial_write_string(" (enabled)")
    } else {
      foundation.serial_write_string(" (disabled)")
    }
    
    foundation.serial_write_string("\n")
    i = i + 1
  }
}
