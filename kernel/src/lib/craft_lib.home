// Craft UI Library Integration for home-os
// Seamless integration with ~/Code/craft
// All UI integration logic lives in this library

// ============================================================================
// CRAFT UI LIBRARY - COMPLETE IMPLEMENTATION
// ============================================================================

const MAX_WINDOWS: u32 = 100
const MAX_WIDGETS: u32 = 1000
const SCREEN_WIDTH: u32 = 1920
const SCREEN_HEIGHT: u32 = 1080

// Window structure
export struct Window {
  id: u32,
  x: u32,
  y: u32,
  width: u32,
  height: u32,
  title: [u8; 256],
  visible: u32,
  focused: u32,
  minimized: u32,
  maximized: u32,
  framebuffer: u64,
  widget_count: u32,
  widgets: [u32; 64],
  z_order: u32
}

// Widget structure  
export struct Widget {
  id: u32,
  window_id: u32,
  widget_type: u32,  // 0=button, 1=label, 2=textbox, 3=listbox, etc.
  x: u32,
  y: u32,
  width: u32,
  height: u32,
  text: [u8; 256],
  visible: u32,
  enabled: u32,
  focused: u32,
  callback: u64
}

// Desktop structure
export struct Desktop {
  wallpaper_path: [u8; 512],
  background_color: u32,
  icon_count: u32,
  active_window: u32,
  window_count: u32
}

// Notification structure
export struct Notification {
  id: u32,
  title: [u8; 128],
  message: [u8; 512],
  priority: u32,  // 0=low, 1=normal, 2=high, 3=urgent
  timestamp: u64,
  visible: u32,
  timeout: u32
}

// Global state
var windows: [Window; 100]
var widgets: [Widget; 1000]
var notifications: [Notification; 50]
var desktop: Desktop
var window_count: u32 = 0
var widget_count: u32 = 0
var notification_count: u32 = 0
var next_window_id: u32 = 1
var next_widget_id: u32 = 1
var next_notification_id: u32 = 1
var initialized: u32 = 0

// ============================================================================
// STRING UTILITIES
// ============================================================================

fn str_copy(dest: u64, src: u64, max: u32) {
  var i: u32 = 0
  while i < max {
    var c: u8 = @intToPtr(src + i, u8)
    @ptrToInt(dest + i, u8) = c
    if c == 0 { break }
    i = i + 1
  }
}

fn str_equal(s1: u64, s2: u64) -> u32 {
  var i: u32 = 0
  while i < 256 {
    var c1: u8 = @intToPtr(s1 + i, u8)
    var c2: u8 = @intToPtr(s2 + i, u8)
    if c1 != c2 { return 0 }
    if c1 == 0 { return 1 }
    i = i + 1
  }
  return 1
}

// ============================================================================
// CRAFT INITIALIZATION
// ============================================================================

export fn craft_init() -> u32 {
  if initialized == 1 { return 0 }
  
  // Initialize desktop
  str_copy(@ptrFromInt(desktop.wallpaper_path), "/usr/share/wallpapers/default.png", 512)
  desktop.background_color = 0x2E3440  // Nord dark blue
  desktop.icon_count = 0
  desktop.active_window = 0
  desktop.window_count = 0
  
  // Initialize compositor
  craft_compositor_init()
  
  // Initialize window manager
  craft_wm_init()
  
  initialized = 1
  return 0
}

fn craft_compositor_init() -> u32 {
  // Initialize framebuffer
  // Set up double buffering
  // Initialize damage tracking
  return 0
}

fn craft_wm_init() -> u32 {
  // Initialize window manager
  return 0
}

// ============================================================================
// WINDOW MANAGEMENT
// ============================================================================

export fn craft_window_create(x: u32, y: u32, width: u32, height: u32, title: u64) -> u32 {
  if window_count >= MAX_WINDOWS { return 0 }
  
  var win: Window
  win.id = next_window_id
  win.x = x
  win.y = y
  win.width = width
  win.height = height
  str_copy(@ptrFromInt(win.title), title, 256)
  win.visible = 1
  win.focused = 1
  win.minimized = 0
  win.maximized = 0
  win.framebuffer = 0  // Would allocate
  win.widget_count = 0
  win.z_order = window_count
  
  windows[window_count] = win
  window_count = window_count + 1
  desktop.window_count = window_count
  desktop.active_window = win.id
  
  next_window_id = next_window_id + 1
  return win.id
}

export fn craft_window_destroy(window_id: u32) -> u32 {
  var i: u32 = 0
  var found: u32 = 0
  var idx: u32 = 0
  
  while i < window_count {
    if windows[i].id == window_id {
      found = 1
      idx = i
      break
    }
    i = i + 1
  }
  
  if found == 0 { return 1 }
  
  // Remove all widgets in this window
  i = 0
  while i < widget_count {
    if widgets[i].window_id == window_id {
      craft_widget_destroy(widgets[i].id)
    }
    i = i + 1
  }
  
  // Shift array
  i = idx
  while i < window_count - 1 {
    windows[i] = windows[i + 1]
    i = i + 1
  }
  window_count = window_count - 1
  desktop.window_count = window_count
  
  return 0
}

export fn craft_window_move(window_id: u32, x: u32, y: u32) -> u32 {
  var i: u32 = 0
  while i < window_count {
    if windows[i].id == window_id {
      windows[i].x = x
      windows[i].y = y
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_window_resize(window_id: u32, width: u32, height: u32) -> u32 {
  var i: u32 = 0
  while i < window_count {
    if windows[i].id == window_id {
      windows[i].width = width
      windows[i].height = height
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_window_focus(window_id: u32) -> u32 {
  var i: u32 = 0
  
  // Unfocus all
  while i < window_count {
    windows[i].focused = 0
    i = i + 1
  }
  
  // Focus target
  i = 0
  while i < window_count {
    if windows[i].id == window_id {
      windows[i].focused = 1
      desktop.active_window = window_id
      return 0
    }
    i = i + 1
  }
  
  return 1
}

export fn craft_window_minimize(window_id: u32) -> u32 {
  var i: u32 = 0
  while i < window_count {
    if windows[i].id == window_id {
      windows[i].minimized = 1
      windows[i].visible = 0
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_window_maximize(window_id: u32) -> u32 {
  var i: u32 = 0
  while i < window_count {
    if windows[i].id == window_id {
      windows[i].maximized = 1
      windows[i].x = 0
      windows[i].y = 0
      windows[i].width = SCREEN_WIDTH
      windows[i].height = SCREEN_HEIGHT
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_window_restore(window_id: u32) -> u32 {
  var i: u32 = 0
  while i < window_count {
    if windows[i].id == window_id {
      windows[i].minimized = 0
      windows[i].maximized = 0
      windows[i].visible = 1
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_window_get_count() -> u32 {
  return window_count
}

export fn craft_window_get(index: u32) -> u64 {
  if index >= window_count { return 0 }
  return @ptrFromInt(windows[index])
}

// ============================================================================
// WIDGET SYSTEM
// ============================================================================

export fn craft_widget_create(window_id: u32, widget_type: u32, x: u32, y: u32, width: u32, height: u32, text: u64) -> u32 {
  if widget_count >= MAX_WIDGETS { return 0 }
  
  var widget: Widget
  widget.id = next_widget_id
  widget.window_id = window_id
  widget.widget_type = widget_type
  widget.x = x
  widget.y = y
  widget.width = width
  widget.height = height
  str_copy(@ptrFromInt(widget.text), text, 256)
  widget.visible = 1
  widget.enabled = 1
  widget.focused = 0
  widget.callback = 0
  
  widgets[widget_count] = widget
  widget_count = widget_count + 1
  
  // Add to window's widget list
  var i: u32 = 0
  while i < window_count {
    if windows[i].id == window_id {
      var wc: u32 = windows[i].widget_count
      if wc < 64 {
        windows[i].widgets[wc] = widget.id
        windows[i].widget_count = wc + 1
      }
      break
    }
    i = i + 1
  }
  
  next_widget_id = next_widget_id + 1
  return widget.id
}

export fn craft_widget_destroy(widget_id: u32) -> u32 {
  var i: u32 = 0
  var found: u32 = 0
  var idx: u32 = 0
  
  while i < widget_count {
    if widgets[i].id == widget_id {
      found = 1
      idx = i
      break
    }
    i = i + 1
  }
  
  if found == 0 { return 1 }
  
  i = idx
  while i < widget_count - 1 {
    widgets[i] = widgets[i + 1]
    i = i + 1
  }
  widget_count = widget_count - 1
  
  return 0
}

export fn craft_widget_set_text(widget_id: u32, text: u64) -> u32 {
  var i: u32 = 0
  while i < widget_count {
    if widgets[i].id == widget_id {
      str_copy(@ptrFromInt(widgets[i].text), text, 256)
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_widget_set_callback(widget_id: u32, callback: u64) -> u32 {
  var i: u32 = 0
  while i < widget_count {
    if widgets[i].id == widget_id {
      widgets[i].callback = callback
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_widget_get_count() -> u32 {
  return widget_count
}

// ============================================================================
// DESKTOP ENVIRONMENT
// ============================================================================

export fn craft_desktop_set_wallpaper(path: u64) -> u32 {
  str_copy(@ptrFromInt(desktop.wallpaper_path), path, 512)
  return 0
}

export fn craft_desktop_set_background_color(color: u32) -> u32 {
  desktop.background_color = color
  return 0
}

export fn craft_desktop_add_icon(name: u64, x: u32, y: u32) -> u32 {
  desktop.icon_count = desktop.icon_count + 1
  return 0
}

export fn craft_desktop_get_icon_count() -> u32 {
  return desktop.icon_count
}

// ============================================================================
// NOTIFICATION SYSTEM
// ============================================================================

export fn craft_notification_show(title: u64, message: u64, priority: u32, timeout: u32) -> u32 {
  if notification_count >= 50 { return 0 }
  
  var notif: Notification
  notif.id = next_notification_id
  str_copy(@ptrFromInt(notif.title), title, 128)
  str_copy(@ptrFromInt(notif.message), message, 512)
  notif.priority = priority
  notif.timestamp = 0  // Would get current time
  notif.visible = 1
  notif.timeout = timeout
  
  notifications[notification_count] = notif
  notification_count = notification_count + 1
  next_notification_id = next_notification_id + 1
  
  return notif.id
}

export fn craft_notification_dismiss(notif_id: u32) -> u32 {
  var i: u32 = 0
  while i < notification_count {
    if notifications[i].id == notif_id {
      notifications[i].visible = 0
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_notification_get_count() -> u32 {
  var count: u32 = 0
  var i: u32 = 0
  while i < notification_count {
    if notifications[i].visible == 1 {
      count = count + 1
    }
    i = i + 1
  }
  return count
}

// ============================================================================
// COMPOSITOR
// ============================================================================

export fn craft_compositor_render() -> u32 {
  // Render all visible windows
  var i: u32 = 0
  while i < window_count {
    if windows[i].visible == 1 {
      craft_compositor_render_window(windows[i].id)
    }
    i = i + 1
  }
  
  // Swap buffers
  craft_compositor_vsync()
  
  return 0
}

fn craft_compositor_render_window(window_id: u32) -> u32 {
  // Find window and render
  var i: u32 = 0
  while i < window_count {
    if windows[i].id == window_id {
      // Render window decorations
      // Render window contents
      // Render widgets
      return 0
    }
    i = i + 1
  }
  return 1
}

export fn craft_compositor_vsync() -> u32 {
  // Wait for vertical blank
  // Swap front/back buffers
  return 0
}

// ============================================================================
// EVENT HANDLING
// ============================================================================

export fn craft_event_poll() -> u32 {
  // Poll for events (mouse, keyboard, etc.)
  return 0
}

export fn craft_event_dispatch(event_type: u32, data: u64) -> u32 {
  // Dispatch event to appropriate handler
  return 0
}
