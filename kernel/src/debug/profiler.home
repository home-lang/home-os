// home-os Kernel Profiler
// Performance profiling

import "../core/foundation.home" as foundation
import "../drivers/timer.home" as timer

const MAX_PROFILE_POINTS: u32 = 64

struct ProfilePoint {
  name: [u8; 32],
  count: u64,
  total_time: u64,
  min_time: u64,
  max_time: u64,
  in_use: u32
}

var profile_points: [ProfilePoint; 64]
var profile_count: u32 = 0
var profiling_enabled: u32 = 0

export fn profiler_init() {
  profile_count = 0
  profiling_enabled = 0
  foundation.serial_write_string("[Profiler] Initialized\n")
}

export fn profiler_enable() {
  profiling_enabled = 1
}

export fn profiler_disable() {
  profiling_enabled = 0
}

export fn profiler_start(name: u64) -> u64 {
  if profiling_enabled == 0 { return 0 }
  return timer.timer_get_ticks()
}

export fn profiler_end(name: u64, start_tick: u64) {
  if profiling_enabled == 0 { return }
  
  var elapsed: u64 = timer.timer_get_ticks() - start_tick
  
  var i: u32 = 0
  while i < profile_count {
    if profile_points[i].in_use == 1 {
      var match: u32 = 1
      var j: u32 = 0
      while j < 32 {
        if profile_points[i].name[j] != @intToPtr(name + j, u8) {
          match = 0
          break
        }
        if profile_points[i].name[j] == 0 { break }
        j = j + 1
      }
      
      if match == 1 {
        profile_points[i].count = profile_points[i].count + 1
        profile_points[i].total_time = profile_points[i].total_time + elapsed
        
        if elapsed < profile_points[i].min_time or profile_points[i].min_time == 0 {
          profile_points[i].min_time = elapsed
        }
        if elapsed > profile_points[i].max_time {
          profile_points[i].max_time = elapsed
        }
        return
      }
    }
    i = i + 1
  }
  
  // Add new profile point
  if profile_count < MAX_PROFILE_POINTS {
    var j: u32 = 0
    while j < 32 {
      profile_points[profile_count].name[j] = @intToPtr(name + j, u8)
      if profile_points[profile_count].name[j] == 0 { break }
      j = j + 1
    }
    
    profile_points[profile_count].count = 1
    profile_points[profile_count].total_time = elapsed
    profile_points[profile_count].min_time = elapsed
    profile_points[profile_count].max_time = elapsed
    profile_points[profile_count].in_use = 1
    profile_count = profile_count + 1
  }
}

export fn profiler_report() {
  foundation.serial_write_string("\n=== Profiler Report ===\n")
  
  var i: u32 = 0
  while i < profile_count {
    if profile_points[i].in_use == 1 {
      foundation.serial_write_string("\n")
      foundation.serial_write_string(@ptrFromInt(profile_points[i].name))
      foundation.serial_write_string(":\n")
      foundation.serial_write_string("  Count: ")
      foundation.serial_write_string("\n")
      foundation.serial_write_string("  Total: ")
      foundation.serial_write_string(" ticks\n")
      foundation.serial_write_string("  Avg: ")
      var avg: u64 = profile_points[i].total_time / profile_points[i].count
      foundation.serial_write_string(" ticks\n")
      foundation.serial_write_string("  Min: ")
      foundation.serial_write_string(" ticks\n")
      foundation.serial_write_string("  Max: ")
      foundation.serial_write_string(" ticks\n")
    }
    i = i + 1
  }
}
