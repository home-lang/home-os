// home-os Kernel Debugger
// Built-in kernel debugger

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory
import "../core/process.home" as process
import "../drivers/keyboard.home" as keyboard

var kdb_active: u32 = 0

export fn kdb_init() {
  kdb_active = 0
  foundation.serial_write_string("[KDB] Kernel debugger initialized\n")
}

export fn kdb_enter() {
  kdb_active = 1
  foundation.vga_clear()
  foundation.vga_write_string("=== Kernel Debugger ===\n\n")
  foundation.vga_write_string("Commands:\n")
  foundation.vga_write_string("  ps - List processes\n")
  foundation.vga_write_string("  mem - Memory info\n")
  foundation.vga_write_string("  bt - Backtrace\n")
  foundation.vga_write_string("  regs - Show registers\n")
  foundation.vga_write_string("  c - Continue\n\n")
  foundation.vga_write_string("kdb> ")
  
  var running: u32 = 1
  while running == 1 {
    var input: [u8; 256]
    var len: u32 = keyboard.keyboard_getline(@ptrFromInt(input), 256)
    
    if len == 0 { continue }
    
    if input[0] == 'c' {
      running = 0
    } else if input[0] == 'p' and input[1] == 's' {
      foundation.vga_write_string("\nProcesses:\n")
      var count: u32 = process.process_get_count()
      foundation.vga_write_string("  Count: ")
      foundation.vga_write_string("\n")
    } else if input[0] == 'm' and input[1] == 'e' and input[2] == 'm' {
      foundation.vga_write_string("\nMemory:\n")
      foundation.vga_write_string("  (Not implemented)\n")
    } else if input[0] == 'b' and input[1] == 't' {
      foundation.vga_write_string("\nBacktrace:\n")
      foundation.vga_write_string("  (Not implemented)\n")
    } else if input[0] == 'r' and input[1] == 'e' and input[2] == 'g' and input[3] == 's' {
      foundation.vga_write_string("\nRegisters:\n")
      foundation.vga_write_string("  (Not implemented)\n")
    } else {
      foundation.vga_write_string("Unknown command\n")
    }
    
    foundation.vga_write_string("\nkdb> ")
  }
  
  kdb_active = 0
}

export fn kdb_panic(message: u64) {
  foundation.vga_clear()
  foundation.vga_write_string("!!! KERNEL PANIC !!!\n\n")
  foundation.vga_write_string(message)
  foundation.vga_write_string("\n\nEntering debugger...\n")
  kdb_enter()
}
