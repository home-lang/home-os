// home-os Virtual Memory Allocator
// Virtual address space management

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const VMALLOC_START: u64 = 0xFFFF_8000_0000_0000
const VMALLOC_END: u64 = 0xFFFF_C000_0000_0000

var vmalloc_next: u64 = VMALLOC_START
var vmalloc_initialized: u32 = 0

export fn vmalloc_init() {
  vmalloc_initialized = 1
  foundation.serial_write_string("[Vmalloc] Initialized\n")
}

export fn vmalloc(size: u64) -> u64 {
  if vmalloc_initialized == 0 { return 0 }
  
  var pages: u64 = (size + 4095) / 4096
  var vaddr: u64 = vmalloc_next
  
  var i: u64 = 0
  while i < pages {
    var paddr: u64 = memory.pmm_alloc_page()
    if paddr == 0 { return 0 }
    
    memory.vmm_map_page(vaddr + (i * 4096), paddr, 3)
    i = i + 1
  }
  
  vmalloc_next = vmalloc_next + (pages * 4096)
  return vaddr
}

export fn vfree(addr: u64, size: u64) {
  var pages: u64 = (size + 4095) / 4096
  
  var i: u64 = 0
  while i < pages {
    var paddr: u64 = memory.vmm_get_physical(addr + (i * 4096))
    if paddr != 0 {
      memory.vmm_unmap_page(addr + (i * 4096))
      memory.pmm_free_page(paddr)
    }
    i = i + 1
  }
}
