// home-os Slab Allocator
// Efficient kernel object allocation

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const SLAB_SIZE: u32 = 4096
const MAX_SLABS: u32 = 64

struct Slab {
  size: u32,
  free_count: u32,
  total_count: u32,
  free_list: u64,
  memory: u64
}

var slabs: [Slab; 64]
var slab_count: u32 = 0

export fn slab_create(object_size: u32) -> u32 {
  if slab_count >= MAX_SLABS { return 0xFFFFFFFF }
  
  var slab: Slab
  slab.size = object_size
  slab.total_count = SLAB_SIZE / object_size
  slab.free_count = slab.total_count
  slab.memory = memory.kmalloc(SLAB_SIZE)
  
  if slab.memory == 0 { return 0xFFFFFFFF }
  
  // Build free list
  var i: u32 = 0
  while i < slab.total_count - 1 {
    var obj: u64 = slab.memory + (i * object_size)
    @ptrToInt(obj, u64) = obj + object_size
    i = i + 1
  }
  
  var last: u64 = slab.memory + ((slab.total_count - 1) * object_size)
  @ptrToInt(last, u64) = 0
  
  slab.free_list = slab.memory
  
  slabs[slab_count] = slab
  var id: u32 = slab_count
  slab_count = slab_count + 1
  
  return id
}

export fn slab_alloc(slab_id: u32) -> u64 {
  if slab_id >= slab_count { return 0 }
  
  if slabs[slab_id].free_count == 0 { return 0 }
  
  var obj: u64 = slabs[slab_id].free_list
  slabs[slab_id].free_list = @intToPtr(obj, u64)
  slabs[slab_id].free_count = slabs[slab_id].free_count - 1
  
  return obj
}

export fn slab_free(slab_id: u32, obj: u64) {
  if slab_id >= slab_count { return }
  
  @ptrToInt(obj, u64) = slabs[slab_id].free_list
  slabs[slab_id].free_list = obj
  slabs[slab_id].free_count = slabs[slab_id].free_count + 1
}

export fn slab_init() {
  slab_count = 0
  foundation.serial_write_string("[Slab] Initialized\n")
}
