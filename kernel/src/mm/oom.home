// home-os OOM Killer
// Out-of-memory handler

import "../core/foundation.home" as foundation
import "../core/process.home" as process
import "../core/memory.home" as memory

var oom_enabled: u32 = 1

fn oom_score_process(pid: u32) -> u32 {
  // Calculate OOM score based on memory usage (stub)
  return 50
}

export fn oom_init() {
  oom_enabled = 1
  foundation.serial_write_string("[OOM] Killer initialized\n")
}

export fn oom_check() {
  if oom_enabled == 0 { return }
  
  var free_mem: u64 = memory.get_free_memory()
  var threshold: u64 = 1024 * 1024  // 1MB
  
  if free_mem < threshold {
    foundation.serial_write_string("[OOM] Low memory detected!\n")
    oom_kill_process()
  }
}

fn oom_kill_process() {
  foundation.serial_write_string("[OOM] Selecting victim...\n")
  
  var victim_pid: u32 = 0
  var highest_score: u32 = 0
  
  var count: u32 = process.process_get_count()
  var i: u32 = 0
  while i < count {
    var score: u32 = oom_score_process(i)
    if score > highest_score {
      highest_score = score
      victim_pid = i
    }
    i = i + 1
  }
  
  if victim_pid != 0 {
    foundation.serial_write_string("[OOM] Killing process ")
    foundation.serial_write_string("\n")
    process.process_kill(victim_pid, 9)
  }
}

export fn oom_disable() {
  oom_enabled = 0
}

export fn oom_enable() {
  oom_enabled = 1
}
