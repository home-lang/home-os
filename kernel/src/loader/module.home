// home-os Kernel Module Loader
// Dynamic kernel module loading

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const MAX_MODULES: u32 = 32

struct Module {
  name: [u8; 64],
  base: u64,
  size: u32,
  init: u64,
  exit: u64,
  loaded: u32
}

var modules: [Module; 32]
var module_count: u32 = 0

export fn module_init() {
  module_count = 0
  foundation.serial_write_string("[Module] Kernel module system initialized\n")
}

export fn module_load(name: u64, data: u64, size: u32) -> u32 {
  if module_count >= MAX_MODULES { return 0xFFFFFFFF }
  
  var mem: u64 = memory.kmalloc(size)
  if mem == 0 { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < size {
    @ptrToInt(mem + i, u8) = @intToPtr(data + i, u8)
    i = i + 1
  }
  
  var idx: u32 = module_count
  
  i = 0
  while i < 64 {
    modules[idx].name[i] = @intToPtr(name + i, u8)
    if modules[idx].name[i] == 0 { break }
    i = i + 1
  }
  
  modules[idx].base = mem
  modules[idx].size = size
  modules[idx].init = 0
  modules[idx].exit = 0
  modules[idx].loaded = 1
  
  module_count = module_count + 1
  
  foundation.serial_write_string("[Module] Loaded: ")
  foundation.serial_write_string(name)
  foundation.serial_write_string("\n")
  
  return idx
}

export fn module_unload(module_id: u32) -> u32 {
  if module_id >= module_count { return 1 }
  if modules[module_id].loaded == 0 { return 1 }
  
  if modules[module_id].exit != 0 {
    // Call exit function (stub)
  }
  
  memory.kfree(modules[module_id].base)
  modules[module_id].loaded = 0
  
  foundation.serial_write_string("[Module] Unloaded: ")
  foundation.serial_write_string(@ptrFromInt(modules[module_id].name))
  foundation.serial_write_string("\n")
  
  return 0
}

export fn module_get_count() -> u32 {
  return module_count
}

export fn module_list() {
  foundation.serial_write_string("\nLoaded modules:\n")
  
  var i: u32 = 0
  while i < module_count {
    if modules[i].loaded == 1 {
      foundation.serial_write_string("  ")
      foundation.serial_write_string(@ptrFromInt(modules[i].name))
      foundation.serial_write_string("\n")
    }
    i = i + 1
  }
}
