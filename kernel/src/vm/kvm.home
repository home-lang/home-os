// home-os KVM
// Kernel Virtual Machine (hypervisor)

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const KVM_MAX_VMS: u32 = 8

struct VirtualMachine {
  id: u32,
  memory_size: u64,
  memory_base: u64,
  vcpu_count: u32,
  running: u32
}

var vms: [VirtualMachine; 8]
var vm_count: u32 = 0

export fn kvm_init() {
  vm_count = 0
  foundation.serial_write_string("[KVM] Hypervisor initialized\n")
}

export fn kvm_create_vm(memory_size: u64, vcpu_count: u32) -> u32 {
  if vm_count >= KVM_MAX_VMS { return 0xFFFFFFFF }
  
  var mem: u64 = memory.kmalloc(memory_size)
  if mem == 0 { return 0xFFFFFFFF }
  
  vms[vm_count].id = vm_count
  vms[vm_count].memory_size = memory_size
  vms[vm_count].memory_base = mem
  vms[vm_count].vcpu_count = vcpu_count
  vms[vm_count].running = 0
  
  var id: u32 = vm_count
  vm_count = vm_count + 1
  
  foundation.serial_write_string("[KVM] Created VM with ")
  foundation.serial_write_string(" MB\n")
  
  return id
}

export fn kvm_run_vm(vm_id: u32) -> u32 {
  if vm_id >= vm_count { return 1 }
  
  vms[vm_id].running = 1
  foundation.serial_write_string("[KVM] Starting VM ")
  foundation.serial_write_string("\n")
  
  // Enter VMX mode (stub)
  return 0
}

export fn kvm_stop_vm(vm_id: u32) {
  if vm_id >= vm_count { return }
  vms[vm_id].running = 0
}
