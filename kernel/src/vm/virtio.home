// home-os VirtIO Framework
// Virtualization I/O framework

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const VIRTIO_DEVICE_NETWORK: u32 = 1
const VIRTIO_DEVICE_BLOCK: u32 = 2
const VIRTIO_DEVICE_CONSOLE: u32 = 3

const VIRTIO_QUEUE_SIZE: u32 = 256

struct VirtioDevice {
  type: u32,
  queue_base: u64,
  queue_size: u32,
  features: u32,
  status: u32
}

var virtio_devices: [VirtioDevice; 8]
var virtio_device_count: u32 = 0

export fn virtio_init() {
  virtio_device_count = 0
  foundation.serial_write_string("[VirtIO] Framework initialized\n")
}

export fn virtio_register_device(type: u32) -> u32 {
  if virtio_device_count >= 8 { return 0xFFFFFFFF }
  
  var queue: u64 = memory.kmalloc(VIRTIO_QUEUE_SIZE * 16)
  if queue == 0 { return 0xFFFFFFFF }
  
  virtio_devices[virtio_device_count].type = type
  virtio_devices[virtio_device_count].queue_base = queue
  virtio_devices[virtio_device_count].queue_size = VIRTIO_QUEUE_SIZE
  virtio_devices[virtio_device_count].features = 0
  virtio_devices[virtio_device_count].status = 0
  
  var id: u32 = virtio_device_count
  virtio_device_count = virtio_device_count + 1
  
  return id
}

export fn virtio_queue_notify(device_id: u32, queue_id: u32) {
  if device_id >= virtio_device_count { return }
  // Notify guest (stub)
}
