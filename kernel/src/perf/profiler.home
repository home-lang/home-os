// home-os Kernel - Performance Profiler
// Profile kernel hot paths and identify bottlenecks

import "../core/foundation.home" as foundation
import "../drivers/timer.home" as timer

const MAX_PROFILE_POINTS: u32 = 1000
const MAX_CALL_STACK: u32 = 64

struct ProfilePoint {
  name: [u8; 64],
  hit_count: u64,
  total_time: u64,
  min_time: u64,
  max_time: u64,
  enabled: u32
}

struct CallStackEntry {
  name: [u8; 64],
  start_time: u64
}

var profile_points: [ProfilePoint; 1000]
var profile_count: u32 = 0
var call_stack: [CallStackEntry; 64]
var stack_depth: u32 = 0
var profiling_enabled: u32 = 0
var profiler_initialized: u32 = 0

export fn profiler_init() {
  if profiler_initialized == 1 { return }
  
  profile_count = 0
  stack_depth = 0
  profiling_enabled = 1
  
  profiler_initialized = 1
  foundation.serial_write_string("[Profiler] Initialized\n")
}

export fn profiler_register(name: u64) -> u32 {
  if profile_count >= MAX_PROFILE_POINTS { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < 64 {
    var ch: u8 = @intToPtr(name + i, u8)
    profile_points[profile_count].name[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  profile_points[profile_count].hit_count = 0
  profile_points[profile_count].total_time = 0
  profile_points[profile_count].min_time = 0xFFFFFFFFFFFFFFFF
  profile_points[profile_count].max_time = 0
  profile_points[profile_count].enabled = 1
  
  var id: u32 = profile_count
  profile_count = profile_count + 1
  
  return id
}

export fn profiler_enter(id: u32) {
  if profiling_enabled == 0 { return }
  if id >= profile_count { return }
  if stack_depth >= MAX_CALL_STACK { return }
  
  var i: u32 = 0
  while i < 64 {
    call_stack[stack_depth].name[i] = profile_points[id].name[i]
    i = i + 1
  }
  
  call_stack[stack_depth].start_time = timer.timer_get_ticks()
  stack_depth = stack_depth + 1
}

export fn profiler_exit(id: u32) {
  if profiling_enabled == 0 { return }
  if id >= profile_count { return }
  if stack_depth == 0 { return }
  
  stack_depth = stack_depth - 1
  
  var end_time: u64 = timer.timer_get_ticks()
  var start_time: u64 = call_stack[stack_depth].start_time
  var elapsed: u64 = end_time - start_time
  
  profile_points[id].hit_count = profile_points[id].hit_count + 1
  profile_points[id].total_time = profile_points[id].total_time + elapsed
  
  if elapsed < profile_points[id].min_time {
    profile_points[id].min_time = elapsed
  }
  
  if elapsed > profile_points[id].max_time {
    profile_points[id].max_time = elapsed
  }
}

export fn profiler_report() {
  foundation.serial_write_string("\n=== Profiler Report ===\n\n")
  foundation.serial_write_string("Name                          Hits        Total(us)   Avg(us)   Min(us)   Max(us)\n")
  foundation.serial_write_string("--------------------------------------------------------------------------------\n")
  
  var i: u32 = 0
  while i < profile_count {
    if profile_points[i].hit_count > 0 {
      foundation.serial_write_string(@ptrFromInt(profile_points[i].name))
      
      // Padding
      var name_len: u32 = 0
      while profile_points[i].name[name_len] != 0 { name_len = name_len + 1 }
      var j: u32 = name_len
      while j < 30 {
        foundation.serial_write_string(" ")
        j = j + 1
      }
      
      foundation.serial_write_hex(@truncate(profile_points[i].hit_count, u32))
      foundation.serial_write_string("  ")
      foundation.serial_write_hex(@truncate(profile_points[i].total_time, u32))
      foundation.serial_write_string("  ")
      
      var avg: u64 = profile_points[i].total_time / profile_points[i].hit_count
      foundation.serial_write_hex(@truncate(avg, u32))
      foundation.serial_write_string("  ")
      foundation.serial_write_hex(@truncate(profile_points[i].min_time, u32))
      foundation.serial_write_string("  ")
      foundation.serial_write_hex(@truncate(profile_points[i].max_time, u32))
      foundation.serial_write_string("\n")
    }
    i = i + 1
  }
  
  foundation.serial_write_string("\n")
}

export fn profiler_reset() {
  var i: u32 = 0
  while i < profile_count {
    profile_points[i].hit_count = 0
    profile_points[i].total_time = 0
    profile_points[i].min_time = 0xFFFFFFFFFFFFFFFF
    profile_points[i].max_time = 0
    i = i + 1
  }
  
  foundation.serial_write_string("[Profiler] Reset\n")
}

export fn profiler_enable() {
  profiling_enabled = 1
}

export fn profiler_disable() {
  profiling_enabled = 0
}

export fn profiler_is_enabled() -> u32 {
  return profiling_enabled
}

export fn profiler_get_count() -> u32 {
  return profile_count
}
