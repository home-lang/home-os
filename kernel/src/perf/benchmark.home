// home-os Kernel - Benchmark Suite
// Comprehensive performance testing

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory
import "../core/process.home" as process
import "../core/filesystem.home" as filesystem
import "../network/network.home" as network

struct BenchmarkResult {
  name: [u8; 64],
  iterations: u32,
  total_time: u64,
  min_time: u64,
  max_time: u64,
  avg_time: u64
}

var benchmark_results: [BenchmarkResult; 32]
var result_count: u32 = 0

export fn benchmark_init() {
  result_count = 0
  foundation.serial_write_string("[Benchmark] Suite initialized\n")
}

export fn benchmark_syscall_latency() -> u64 {
  foundation.serial_write_string("[Benchmark] Testing syscall latency...\n")
  
  var iterations: u32 = 100000
  var start: u64 = foundation.timer_get_ticks()
  
  var i: u32 = 0
  while i < iterations {
    foundation.getpid()
    i = i + 1
  }
  
  var end: u64 = foundation.timer_get_ticks()
  var total: u64 = end - start
  var avg: u64 = (total * 1000) / iterations  // nanoseconds
  
  foundation.serial_write_string("  Average: ")
  foundation.serial_write_hex(@truncate(avg, u32))
  foundation.serial_write_string(" ns\n")
  
  return avg
}

export fn benchmark_process_creation() -> u64 {
  foundation.serial_write_string("[Benchmark] Testing process creation...\n")
  
  var iterations: u32 = 1000
  var start: u64 = foundation.timer_get_ticks()
  
  var i: u32 = 0
  while i < iterations {
    var pid: u32 = process.process_fork()
    if pid == 0 {
      process.process_exit(0)
    } else {
      process.process_wait(pid)
    }
    i = i + 1
  }
  
  var end: u64 = foundation.timer_get_ticks()
  var total: u64 = end - start
  var avg: u64 = (total * 1000) / iterations  // microseconds
  
  foundation.serial_write_string("  Average: ")
  foundation.serial_write_hex(@truncate(avg, u32))
  foundation.serial_write_string(" us\n")
  
  return avg
}

export fn benchmark_memory_allocation() -> u64 {
  foundation.serial_write_string("[Benchmark] Testing memory allocation...\n")
  
  var iterations: u32 = 10000
  var size: u32 = 4096
  var start: u64 = foundation.timer_get_ticks()
  
  var i: u32 = 0
  while i < iterations {
    var ptr: u64 = memory.memory_alloc(size)
    memory.memory_free(ptr, size)
    i = i + 1
  }
  
  var end: u64 = foundation.timer_get_ticks()
  var total: u64 = end - start
  var avg: u64 = (total * 1000) / iterations  // nanoseconds
  
  foundation.serial_write_string("  Average: ")
  foundation.serial_write_hex(@truncate(avg, u32))
  foundation.serial_write_string(" ns\n")
  
  return avg
}

export fn benchmark_file_io() -> u64 {
  foundation.serial_write_string("[Benchmark] Testing file I/O...\n")
  
  var iterations: u32 = 1000
  var size: u32 = 4096
  var buffer: [u8; 4096]
  
  // Create test file
  var fd: u32 = filesystem.vfs_open(@ptrFromInt("/tmp/bench"), 0x0242, 0x1B6)
  if fd == 0xFFFFFFFF {
    foundation.serial_write_string("  Failed to create test file\n")
    return 0
  }
  
  var start: u64 = foundation.timer_get_ticks()
  
  var i: u32 = 0
  while i < iterations {
    filesystem.vfs_write(fd, @ptrFromInt(buffer), size)
    i = i + 1
  }
  
  var end: u64 = foundation.timer_get_ticks()
  filesystem.vfs_close(fd)
  filesystem.vfs_unlink(@ptrFromInt("/tmp/bench"))
  
  var total: u64 = end - start
  var throughput: u64 = (iterations * size * 1000) / total  // MB/s
  
  foundation.serial_write_string("  Throughput: ")
  foundation.serial_write_hex(@truncate(throughput, u32))
  foundation.serial_write_string(" MB/s\n")
  
  return throughput
}

export fn benchmark_network_throughput() -> u64 {
  foundation.serial_write_string("[Benchmark] Testing network throughput...\n")
  
  var iterations: u32 = 1000
  var size: u32 = 1500  // MTU
  var buffer: [u8; 1500]
  
  var start: u64 = foundation.timer_get_ticks()
  
  var i: u32 = 0
  while i < iterations {
    network.net_send_raw(@ptrFromInt(buffer), size)
    i = i + 1
  }
  
  var end: u64 = foundation.timer_get_ticks()
  var total: u64 = end - start
  var throughput: u64 = (iterations * size * 1000) / total  // MB/s
  
  foundation.serial_write_string("  Throughput: ")
  foundation.serial_write_hex(@truncate(throughput, u32))
  foundation.serial_write_string(" MB/s\n")
  
  return throughput
}

export fn benchmark_context_switch() -> u64 {
  foundation.serial_write_string("[Benchmark] Testing context switch...\n")
  
  var iterations: u32 = 10000
  var start: u64 = foundation.timer_get_ticks()
  
  var i: u32 = 0
  while i < iterations {
    foundation.yield_cpu()
    i = i + 1
  }
  
  var end: u64 = foundation.timer_get_ticks()
  var total: u64 = end - start
  var avg: u64 = (total * 1000) / iterations  // nanoseconds
  
  foundation.serial_write_string("  Average: ")
  foundation.serial_write_hex(@truncate(avg, u32))
  foundation.serial_write_string(" ns\n")
  
  return avg
}

export fn benchmark_run_all() {
  foundation.serial_write_string("\n=== Running Full Benchmark Suite ===\n\n")
  
  benchmark_syscall_latency()
  benchmark_process_creation()
  benchmark_memory_allocation()
  benchmark_file_io()
  benchmark_network_throughput()
  benchmark_context_switch()
  
  foundation.serial_write_string("\n=== Benchmark Complete ===\n")
}
