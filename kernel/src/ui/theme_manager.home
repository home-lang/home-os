// home-os Kernel - Theme Manager
// UI themes and visual customization

import "../core/foundation.home" as foundation

const MAX_THEMES: u32 = 32

struct Theme {
  name: [u8; 64],
  background: u32,
  foreground: u32,
  accent: u32,
  border: u32,
  window_bg: u32,
  window_fg: u32,
  button_bg: u32,
  button_fg: u32,
  menu_bg: u32,
  menu_fg: u32,
  selection_bg: u32,
  selection_fg: u32
}

var themes: [Theme; 32]
var theme_count: u32 = 0
var current_theme: u32 = 0

export fn theme_manager_init() {
  theme_count = 0
  
  // Register default themes
  theme_register_light()
  theme_register_dark()
  theme_register_blue()
  theme_register_high_contrast()
  
  current_theme = 1  // Dark theme by default
  
  foundation.serial_write_string("[ThemeManager] Initialized with ")
  foundation.serial_write_hex(theme_count)
  foundation.serial_write_string(" themes\n")
}

fn theme_register_light() {
  var id: u32 = theme_count
  
  theme_copy_string(@ptrFromInt(themes[id].name), @ptrFromInt("Light"), 64)
  
  themes[id].background = 0xFFFFFFFF     // White
  themes[id].foreground = 0xFF000000     // Black
  themes[id].accent = 0xFF0078D7         // Blue
  themes[id].border = 0xFFCCCCCC         // Light gray
  themes[id].window_bg = 0xFFF0F0F0      // Very light gray
  themes[id].window_fg = 0xFF000000      // Black
  themes[id].button_bg = 0xFFE1E1E1      // Light gray
  themes[id].button_fg = 0xFF000000      // Black
  themes[id].menu_bg = 0xFFF0F0F0        // Very light gray
  themes[id].menu_fg = 0xFF000000        // Black
  themes[id].selection_bg = 0xFF0078D7   // Blue
  themes[id].selection_fg = 0xFFFFFFFF   // White
  
  theme_count = theme_count + 1
}

fn theme_register_dark() {
  var id: u32 = theme_count
  
  theme_copy_string(@ptrFromInt(themes[id].name), @ptrFromInt("Dark"), 64)
  
  themes[id].background = 0xFF1E1E1E     // Dark gray
  themes[id].foreground = 0xFFFFFFFF     // White
  themes[id].accent = 0xFF0078D7         // Blue
  themes[id].border = 0xFF3E3E3E         // Medium gray
  themes[id].window_bg = 0xFF2D2D2D      // Dark gray
  themes[id].window_fg = 0xFFFFFFFF      // White
  themes[id].button_bg = 0xFF3E3E3E      // Medium gray
  themes[id].button_fg = 0xFFFFFFFF      // White
  themes[id].menu_bg = 0xFF2D2D2D        // Dark gray
  themes[id].menu_fg = 0xFFFFFFFF        // White
  themes[id].selection_bg = 0xFF0078D7   // Blue
  themes[id].selection_fg = 0xFFFFFFFF   // White
  
  theme_count = theme_count + 1
}

fn theme_register_blue() {
  var id: u32 = theme_count
  
  theme_copy_string(@ptrFromInt(themes[id].name), @ptrFromInt("Blue"), 64)
  
  themes[id].background = 0xFF003366     // Dark blue
  themes[id].foreground = 0xFFFFFFFF     // White
  themes[id].accent = 0xFF66B2FF         // Light blue
  themes[id].border = 0xFF004080         // Medium blue
  themes[id].window_bg = 0xFF004080      // Medium blue
  themes[id].window_fg = 0xFFFFFFFF      // White
  themes[id].button_bg = 0xFF0059B3      // Blue
  themes[id].button_fg = 0xFFFFFFFF      // White
  themes[id].menu_bg = 0xFF004080        // Medium blue
  themes[id].menu_fg = 0xFFFFFFFF        // White
  themes[id].selection_bg = 0xFF66B2FF   // Light blue
  themes[id].selection_fg = 0xFF000000   // Black
  
  theme_count = theme_count + 1
}

fn theme_register_high_contrast() {
  var id: u32 = theme_count
  
  theme_copy_string(@ptrFromInt(themes[id].name), @ptrFromInt("High Contrast"), 64)
  
  themes[id].background = 0xFF000000     // Black
  themes[id].foreground = 0xFFFFFFFF     // White
  themes[id].accent = 0xFFFFFF00         // Yellow
  themes[id].border = 0xFFFFFFFF         // White
  themes[id].window_bg = 0xFF000000      // Black
  themes[id].window_fg = 0xFFFFFFFF      // White
  themes[id].button_bg = 0xFF000000      // Black
  themes[id].button_fg = 0xFFFFFF00      // Yellow
  themes[id].menu_bg = 0xFF000000        // Black
  themes[id].menu_fg = 0xFFFFFFFF        // White
  themes[id].selection_bg = 0xFFFFFF00   // Yellow
  themes[id].selection_fg = 0xFF000000   // Black
  
  theme_count = theme_count + 1
}

fn theme_copy_string(dest: u64, src: u64, max_len: u32) {
  var i: u32 = 0
  while i < max_len - 1 {
    var ch: u8 = @intToPtr(src + i, u8)
    @intToPtr(dest + i, u8) = ch
    if ch == 0 { break }
    i = i + 1
  }
  @intToPtr(dest + i, u8) = 0
}

export fn theme_set(theme_id: u32) -> u32 {
  if theme_id >= theme_count { return 0 }
  
  current_theme = theme_id
  
  foundation.serial_write_string("[ThemeManager] Theme set to: ")
  foundation.serial_write_string(@ptrFromInt(themes[theme_id].name))
  foundation.serial_write_string("\n")
  
  // Notify UI to refresh
  theme_apply()
  
  return 1
}

fn theme_apply() {
  // Apply theme to all windows
  foundation.ui_refresh_all()
}

export fn theme_get_color(color_type: u32) -> u32 {
  var theme: Theme = themes[current_theme]
  
  if color_type == 0 { return theme.background }
  if color_type == 1 { return theme.foreground }
  if color_type == 2 { return theme.accent }
  if color_type == 3 { return theme.border }
  if color_type == 4 { return theme.window_bg }
  if color_type == 5 { return theme.window_fg }
  if color_type == 6 { return theme.button_bg }
  if color_type == 7 { return theme.button_fg }
  if color_type == 8 { return theme.menu_bg }
  if color_type == 9 { return theme.menu_fg }
  if color_type == 10 { return theme.selection_bg }
  if color_type == 11 { return theme.selection_fg }
  
  return 0xFFFFFFFF
}

export fn theme_list() {
  foundation.serial_write_string("\n[ThemeManager] Available themes:\n")
  
  var i: u32 = 0
  while i < theme_count {
    foundation.serial_write_string("  ")
    foundation.serial_write_hex(i)
    foundation.serial_write_string(": ")
    foundation.serial_write_string(@ptrFromInt(themes[i].name))
    
    if i == current_theme {
      foundation.serial_write_string(" (active)")
    }
    
    foundation.serial_write_string("\n")
    i = i + 1
  }
}

export fn theme_get_current() -> u32 {
  return current_theme
}
