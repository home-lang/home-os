// home-os Kernel - WiFi Hotspot Mode
// Turn device into WiFi access point

import "../core/foundation.home" as foundation
import "../drivers/wifi.home" as wifi
import "network.home" as network

const MAX_HOTSPOT_CLIENTS: u32 = 32

struct HotspotClient {
  mac_addr: [u8; 6],
  ip_addr: u32,
  connected_time: u64,
  bytes_sent: u64,
  bytes_received: u64,
  active: u32
}

var hotspot_enabled: u32 = 0
var hotspot_ssid: [u8; 32]
var hotspot_password: [u8; 64]
var hotspot_channel: u32 = 6
var hotspot_clients: [HotspotClient; 32]
var hotspot_client_count: u32 = 0

export fn wifi_hotspot_init() {
  hotspot_enabled = 0
  hotspot_client_count = 0
  
  foundation.serial_write_string("[WiFi-Hotspot] Initialized\n")
}

export fn wifi_hotspot_start(ssid: u64, password: u64, channel: u32) -> u32 {
  foundation.serial_write_string("[WiFi-Hotspot] Starting hotspot: ")
  foundation.serial_write_string(ssid)
  foundation.serial_write_string("\n")
  
  // Copy SSID
  var i: u32 = 0
  while i < 31 {
    var ch: u8 = @intToPtr(ssid + i, u8)
    hotspot_ssid[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  hotspot_ssid[i] = 0
  
  // Copy password
  i = 0
  while i < 63 {
    var ch: u8 = @intToPtr(password + i, u8)
    hotspot_password[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  hotspot_password[i] = 0
  
  hotspot_channel = channel
  
  // Configure WiFi adapter in AP mode
  wifi.wifi_set_mode(2)  // AP mode
  wifi.wifi_set_channel(channel)
  
  // Start DHCP server
  wifi_hotspot_start_dhcp()
  
  hotspot_enabled = 1
  
  foundation.serial_write_string("[WiFi-Hotspot] Hotspot started on channel ")
  foundation.serial_write_hex(channel)
  foundation.serial_write_string("\n")
  
  return 1
}

fn wifi_hotspot_start_dhcp() {
  // Start DHCP server for clients
  network.dhcp_server_start(@ptrFromInt("192.168.4.1"), @ptrFromInt("192.168.4.100"), @ptrFromInt("192.168.4.200"))
}

export fn wifi_hotspot_client_connect(mac_addr: u64) -> u32 {
  if hotspot_client_count >= MAX_HOTSPOT_CLIENTS { return 0 }
  
  var client_id: u32 = hotspot_client_count
  
  // Copy MAC address
  var i: u32 = 0
  while i < 6 {
    hotspot_clients[client_id].mac_addr[i] = @intToPtr(mac_addr + i, u8)
    i = i + 1
  }
  
  // Assign IP address
  hotspot_clients[client_id].ip_addr = 0xC0A80464 + client_id  // 192.168.4.100+
  hotspot_clients[client_id].connected_time = foundation.timer_get_ticks()
  hotspot_clients[client_id].bytes_sent = 0
  hotspot_clients[client_id].bytes_received = 0
  hotspot_clients[client_id].active = 1
  
  hotspot_client_count = hotspot_client_count + 1
  
  foundation.serial_write_string("[WiFi-Hotspot] Client connected: ")
  wifi_hotspot_print_mac(mac_addr)
  foundation.serial_write_string("\n")
  
  return client_id
}

fn wifi_hotspot_print_mac(mac_addr: u64) {
  var i: u32 = 0
  while i < 6 {
    foundation.serial_write_hex(@intToPtr(mac_addr + i, u8))
    if i < 5 {
      foundation.serial_write_string(":")
    }
    i = i + 1
  }
}

export fn wifi_hotspot_client_disconnect(client_id: u32) -> u32 {
  if client_id >= hotspot_client_count { return 0 }
  
  hotspot_clients[client_id].active = 0
  
  foundation.serial_write_string("[WiFi-Hotspot] Client disconnected\n")
  
  return 1
}

export fn wifi_hotspot_update_stats(client_id: u32, bytes_sent: u64, bytes_received: u64) {
  if client_id >= hotspot_client_count { return }
  
  hotspot_clients[client_id].bytes_sent = hotspot_clients[client_id].bytes_sent + bytes_sent
  hotspot_clients[client_id].bytes_received = hotspot_clients[client_id].bytes_received + bytes_received
}

export fn wifi_hotspot_list_clients() {
  foundation.serial_write_string("\n[WiFi-Hotspot] Connected clients:\n")
  foundation.serial_write_string("MAC Address        IP Address      Uptime    Data\n")
  foundation.serial_write_string("---------------------------------------------------\n")
  
  var i: u32 = 0
  while i < hotspot_client_count {
    if hotspot_clients[i].active == 1 {
      wifi_hotspot_print_mac(@ptrFromInt(hotspot_clients[i].mac_addr))
      foundation.serial_write_string("  ")
      
      var ip: u32 = hotspot_clients[i].ip_addr
      foundation.serial_write_hex((ip >> 24) & 0xFF)
      foundation.serial_write_string(".")
      foundation.serial_write_hex((ip >> 16) & 0xFF)
      foundation.serial_write_string(".")
      foundation.serial_write_hex((ip >> 8) & 0xFF)
      foundation.serial_write_string(".")
      foundation.serial_write_hex(ip & 0xFF)
      foundation.serial_write_string("  ")
      
      var uptime: u64 = foundation.timer_get_ticks() - hotspot_clients[i].connected_time
      foundation.serial_write_hex(@truncate(uptime / 1000, u32))
      foundation.serial_write_string("s  ")
      
      var total_data: u64 = hotspot_clients[i].bytes_sent + hotspot_clients[i].bytes_received
      foundation.serial_write_hex(@truncate(total_data / (1024 * 1024), u32))
      foundation.serial_write_string(" MB\n")
    }
    i = i + 1
  }
}

export fn wifi_hotspot_stop() -> u32 {
  if hotspot_enabled == 0 { return 0 }
  
  foundation.serial_write_string("[WiFi-Hotspot] Stopping hotspot\n")
  
  // Disconnect all clients
  var i: u32 = 0
  while i < hotspot_client_count {
    hotspot_clients[i].active = 0
    i = i + 1
  }
  
  hotspot_client_count = 0
  
  // Stop DHCP server
  network.dhcp_server_stop()
  
  // Switch WiFi back to station mode
  wifi.wifi_set_mode(1)
  
  hotspot_enabled = 0
  
  foundation.serial_write_string("[WiFi-Hotspot] Hotspot stopped\n")
  
  return 1
}

export fn wifi_hotspot_is_enabled() -> u32 {
  return hotspot_enabled
}

export fn wifi_hotspot_get_client_count() -> u32 {
  var count: u32 = 0
  var i: u32 = 0
  
  while i < hotspot_client_count {
    if hotspot_clients[i].active == 1 {
      count = count + 1
    }
    i = i + 1
  }
  
  return count
}
