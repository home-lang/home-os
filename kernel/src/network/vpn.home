// home-os Kernel - VPN Support
// WireGuard and OpenVPN client

import "../core/foundation.home" as foundation
import "network.home" as network

const VPN_WIREGUARD: u32 = 1
const VPN_OPENVPN: u32 = 2

const MAX_VPN_CONNECTIONS: u32 = 8

struct VPNConnection {
  type: u32,
  name: [u8; 128],
  server: [u8; 256],
  port: u16,
  private_key: [u8; 32],
  public_key: [u8; 32],
  preshared_key: [u8; 32],
  local_ip: u32,
  remote_ip: u32,
  connected: u32
}

var vpn_connections: [VPNConnection; 8]
var vpn_count: u32 = 0

export fn vpn_init() {
  vpn_count = 0
  foundation.serial_write_string("[VPN] Initialized\n")
}

export fn vpn_create_wireguard(name: u64, server: u64, port: u16, private_key: u64, public_key: u64) -> u32 {
  if vpn_count >= MAX_VPN_CONNECTIONS { return 0xFFFFFFFF }
  
  var vpn_id: u32 = vpn_count
  
  vpn_connections[vpn_id].type = VPN_WIREGUARD
  
  // Copy name
  var i: u32 = 0
  while i < 127 {
    var ch: u8 = @intToPtr(name + i, u8)
    vpn_connections[vpn_id].name[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  // Copy server
  i = 0
  while i < 255 {
    var ch: u8 = @intToPtr(server + i, u8)
    vpn_connections[vpn_id].server[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  vpn_connections[vpn_id].port = port
  
  // Copy keys
  i = 0
  while i < 32 {
    vpn_connections[vpn_id].private_key[i] = @intToPtr(private_key + i, u8)
    vpn_connections[vpn_id].public_key[i] = @intToPtr(public_key + i, u8)
    i = i + 1
  }
  
  vpn_connections[vpn_id].connected = 0
  
  vpn_count = vpn_count + 1
  
  foundation.serial_write_string("[VPN] Created WireGuard connection: ")
  foundation.serial_write_string(name)
  foundation.serial_write_string("\n")
  
  return vpn_id
}

export fn vpn_connect(vpn_id: u32) -> u32 {
  if vpn_id >= vpn_count { return 0 }
  
  foundation.serial_write_string("[VPN] Connecting to ")
  foundation.serial_write_string(@ptrFromInt(vpn_connections[vpn_id].name))
  foundation.serial_write_string("...\n")
  
  if vpn_connections[vpn_id].type == VPN_WIREGUARD {
    return vpn_connect_wireguard(vpn_id)
  } else if vpn_connections[vpn_id].type == VPN_OPENVPN {
    return vpn_connect_openvpn(vpn_id)
  }
  
  return 0
}

fn vpn_connect_wireguard(vpn_id: u32) -> u32 {
  // WireGuard handshake
  // Setup tunnel interface
  // Configure routing
  
  vpn_connections[vpn_id].connected = 1
  
  foundation.serial_write_string("[VPN] WireGuard connected\n")
  
  return 1
}

fn vpn_connect_openvpn(vpn_id: u32) -> u32 {
  // OpenVPN connection
  
  vpn_connections[vpn_id].connected = 1
  
  foundation.serial_write_string("[VPN] OpenVPN connected\n")
  
  return 1
}

export fn vpn_disconnect(vpn_id: u32) -> u32 {
  if vpn_id >= vpn_count { return 0 }
  
  vpn_connections[vpn_id].connected = 0
  
  foundation.serial_write_string("[VPN] Disconnected\n")
  
  return 1
}

export fn vpn_get_status(vpn_id: u32) -> u32 {
  if vpn_id >= vpn_count { return 0 }
  return vpn_connections[vpn_id].connected
}
