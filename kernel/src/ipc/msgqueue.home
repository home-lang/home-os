// home-os Message Queue
// Message passing IPC

import "../core/foundation.home" as foundation

const MAX_QUEUES: u32 = 32
const MAX_MESSAGES: u32 = 16
const MAX_MSG_SIZE: u32 = 256

struct Message {
  type: u32,
  size: u32,
  data: [u8; 256]
}

struct MessageQueue {
  key: u32,
  messages: [Message; 16],
  count: u32,
  in_use: u32
}

var queues: [MessageQueue; 32]
var queue_count: u32 = 0

export fn msgqueue_init() {
  queue_count = 0
  foundation.serial_write_string("[MsgQueue] Initialized\n")
}

export fn msgqueue_create(key: u32) -> u32 {
  if queue_count >= MAX_QUEUES { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < MAX_QUEUES {
    if queues[i].in_use == 0 {
      queues[i].key = key
      queues[i].count = 0
      queues[i].in_use = 1
      queue_count = queue_count + 1
      return i
    }
    i = i + 1
  }
  
  return 0xFFFFFFFF
}

export fn msgqueue_send(queue_id: u32, msg_type: u32, data: u64, size: u32) -> u32 {
  if queue_id >= MAX_QUEUES or queues[queue_id].in_use == 0 { return 1 }
  if queues[queue_id].count >= MAX_MESSAGES { return 1 }
  if size > MAX_MSG_SIZE { return 1 }
  
  var idx: u32 = queues[queue_id].count
  queues[queue_id].messages[idx].type = msg_type
  queues[queue_id].messages[idx].size = size
  
  var i: u32 = 0
  while i < size {
    queues[queue_id].messages[idx].data[i] = @intToPtr(data + i, u8)
    i = i + 1
  }
  
  queues[queue_id].count = queues[queue_id].count + 1
  return 0
}

export fn msgqueue_receive(queue_id: u32, msg_type: u32, buffer: u64, max_size: u32) -> u32 {
  if queue_id >= MAX_QUEUES or queues[queue_id].in_use == 0 { return 0 }
  if queues[queue_id].count == 0 { return 0 }
  
  var i: u32 = 0
  while i < queues[queue_id].count {
    if queues[queue_id].messages[i].type == msg_type {
      var size: u32 = queues[queue_id].messages[i].size
      if size > max_size { size = max_size }
      
      var j: u32 = 0
      while j < size {
        @ptrToInt(buffer + j, u8) = queues[queue_id].messages[i].data[j]
        j = j + 1
      }
      
      // Remove message
      while i < queues[queue_id].count - 1 {
        queues[queue_id].messages[i] = queues[queue_id].messages[i + 1]
        i = i + 1
      }
      queues[queue_id].count = queues[queue_id].count - 1
      
      return size
    }
    i = i + 1
  }
  
  return 0
}

export fn msgqueue_destroy(queue_id: u32) {
  if queue_id >= MAX_QUEUES { return }
  queues[queue_id].in_use = 0
  queue_count = queue_count - 1
}
