// home-os Pipe IPC
// Unix-style pipes

import "../core/foundation.home" as foundation

const PIPE_SIZE: u32 = 4096
const MAX_PIPES: u32 = 64

struct Pipe {
  buffer: [u8; 4096],
  read_pos: u32,
  write_pos: u32,
  readers: u32,
  writers: u32,
  in_use: u32
}

var pipes: [Pipe; 64]
var pipe_count: u32 = 0

export fn pipe_init() {
  pipe_count = 0
  foundation.serial_write_string("[Pipe] Initialized\n")
}

export fn pipe_create() -> u32 {
  if pipe_count >= MAX_PIPES { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < MAX_PIPES {
    if pipes[i].in_use == 0 {
      pipes[i].read_pos = 0
      pipes[i].write_pos = 0
      pipes[i].readers = 1
      pipes[i].writers = 1
      pipes[i].in_use = 1
      return i
    }
    i = i + 1
  }
  
  return 0xFFFFFFFF
}

export fn pipe_write(pipe_id: u32, data: u64, len: u32) -> u32 {
  if pipe_id >= MAX_PIPES or pipes[pipe_id].in_use == 0 { return 0 }
  
  var written: u32 = 0
  
  while written < len {
    var space: u32 = PIPE_SIZE - pipes[pipe_id].write_pos
    if space == 0 { break }
    
    pipes[pipe_id].buffer[pipes[pipe_id].write_pos] = @intToPtr(data + written, u8)
    pipes[pipe_id].write_pos = (pipes[pipe_id].write_pos + 1) % PIPE_SIZE
    written = written + 1
  }
  
  return written
}

export fn pipe_read(pipe_id: u32, buffer: u64, len: u32) -> u32 {
  if pipe_id >= MAX_PIPES or pipes[pipe_id].in_use == 0 { return 0 }
  
  var read: u32 = 0
  
  while read < len and pipes[pipe_id].read_pos != pipes[pipe_id].write_pos {
    @ptrToInt(buffer + read, u8) = pipes[pipe_id].buffer[pipes[pipe_id].read_pos]
    pipes[pipe_id].read_pos = (pipes[pipe_id].read_pos + 1) % PIPE_SIZE
    read = read + 1
  }
  
  return read
}

export fn pipe_close(pipe_id: u32) {
  if pipe_id >= MAX_PIPES { return }
  pipes[pipe_id].in_use = 0
}

export fn pipe_available(pipe_id: u32) -> u32 {
  if pipe_id >= MAX_PIPES or pipes[pipe_id].in_use == 0 { return 0 }
  
  if pipes[pipe_id].write_pos >= pipes[pipe_id].read_pos {
    return pipes[pipe_id].write_pos - pipes[pipe_id].read_pos
  }
  
  return PIPE_SIZE - pipes[pipe_id].read_pos + pipes[pipe_id].write_pos
}
