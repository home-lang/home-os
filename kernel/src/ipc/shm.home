// home-os Shared Memory
// Shared memory segments

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const MAX_SHM_SEGMENTS: u32 = 32

struct ShmSegment {
  key: u32,
  size: u32,
  addr: u64,
  ref_count: u32,
  in_use: u32
}

var shm_segments: [ShmSegment; 32]
var shm_count: u32 = 0

export fn shm_init() {
  shm_count = 0
  foundation.serial_write_string("[SHM] Initialized\n")
}

export fn shm_create(key: u32, size: u32) -> u32 {
  if shm_count >= MAX_SHM_SEGMENTS { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < MAX_SHM_SEGMENTS {
    if shm_segments[i].in_use == 0 {
      var addr: u64 = memory.kmalloc(size)
      if addr == 0 { return 0xFFFFFFFF }
      
      shm_segments[i].key = key
      shm_segments[i].size = size
      shm_segments[i].addr = addr
      shm_segments[i].ref_count = 1
      shm_segments[i].in_use = 1
      shm_count = shm_count + 1
      
      return i
    }
    i = i + 1
  }
  
  return 0xFFFFFFFF
}

export fn shm_attach(shm_id: u32) -> u64 {
  if shm_id >= MAX_SHM_SEGMENTS or shm_segments[shm_id].in_use == 0 {
    return 0
  }
  
  shm_segments[shm_id].ref_count = shm_segments[shm_id].ref_count + 1
  return shm_segments[shm_id].addr
}

export fn shm_detach(shm_id: u32) {
  if shm_id >= MAX_SHM_SEGMENTS or shm_segments[shm_id].in_use == 0 {
    return
  }
  
  if shm_segments[shm_id].ref_count > 0 {
    shm_segments[shm_id].ref_count = shm_segments[shm_id].ref_count - 1
  }
  
  if shm_segments[shm_id].ref_count == 0 {
    memory.kfree(shm_segments[shm_id].addr)
    shm_segments[shm_id].in_use = 0
    shm_count = shm_count - 1
  }
}

export fn shm_get(key: u32) -> u32 {
  var i: u32 = 0
  while i < MAX_SHM_SEGMENTS {
    if shm_segments[i].in_use == 1 and shm_segments[i].key == key {
      return i
    }
    i = i + 1
  }
  return 0xFFFFFFFF
}
