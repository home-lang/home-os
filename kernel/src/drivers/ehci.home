// home-os EHCI Driver
// Enhanced Host Controller Interface (USB 2.0)

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const EHCI_USBCMD: u32 = 0x00
const EHCI_USBSTS: u32 = 0x04
const EHCI_PERIODICLISTBASE: u32 = 0x14
const EHCI_ASYNCLISTADDR: u32 = 0x18

var ehci_base: u64 = 0
var ehci_periodic_list: u64 = 0
var ehci_async_list: u64 = 0
var ehci_initialized: u32 = 0

export fn ehci_init() {
  if ehci_initialized == 1 { return }
  
  ehci_base = 0xF0001000  // Stub: would read from PCI
  
  // Allocate lists
  ehci_periodic_list = memory.kmalloc(4096)
  ehci_async_list = memory.kmalloc(4096)
  
  if ehci_periodic_list == 0 or ehci_async_list == 0 {
    foundation.serial_write_string("[EHCI] Failed to allocate lists\n")
    return
  }
  
  // Reset controller
  @ptrToInt(ehci_base + EHCI_USBCMD, u32) = 0x00080000
  
  var timeout: u32 = 1000
  while timeout > 0 {
    if (@intToPtr(ehci_base + EHCI_USBCMD, u32) & 0x00080000) == 0 {
      break
    }
    timeout = timeout - 1
  }
  
  // Set periodic list
  @ptrToInt(ehci_base + EHCI_PERIODICLISTBASE, u32) = ehci_periodic_list & 0xFFFFFFFF
  
  // Set async list
  @ptrToInt(ehci_base + EHCI_ASYNCLISTADDR, u32) = ehci_async_list & 0xFFFFFFFF
  
  // Start controller
  @ptrToInt(ehci_base + EHCI_USBCMD, u32) = 0x00010001
  
  ehci_initialized = 1
  foundation.serial_write_string("[EHCI] Initialized\n")
}

export fn ehci_control_transfer(device: u8, request: u8, value: u16, index: u16, data: u64, length: u16) -> u32 {
  if ehci_initialized == 0 { return 1 }
  
  // Stub: would perform control transfer
  return 0
}
