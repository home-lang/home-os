// home-os I2C Driver
// Inter-Integrated Circuit bus

import "../core/foundation.home" as foundation

const I2C_BASE: u16 = 0x0CF8

const I2C_CMD_START: u8 = 0x01
const I2C_CMD_STOP: u8 = 0x02
const I2C_CMD_READ: u8 = 0x04
const I2C_CMD_WRITE: u8 = 0x08

var i2c_initialized: u32 = 0

export fn i2c_init() {
  if i2c_initialized == 1 { return }
  
  i2c_initialized = 1
  foundation.serial_write_string("[I2C] Initialized\n")
}

fn i2c_start() {
  foundation.outb(I2C_BASE, I2C_CMD_START)
}

fn i2c_stop() {
  foundation.outb(I2C_BASE, I2C_CMD_STOP)
}

fn i2c_write_byte(data: u8) {
  foundation.outb(I2C_BASE + 1, data)
  foundation.outb(I2C_BASE, I2C_CMD_WRITE)
}

fn i2c_read_byte() -> u8 {
  foundation.outb(I2C_BASE, I2C_CMD_READ)
  return foundation.inb(I2C_BASE + 1)
}

export fn i2c_write(device_addr: u8, reg_addr: u8, data: u64, length: u32) -> u32 {
  if i2c_initialized == 0 { return 1 }
  
  i2c_start()
  i2c_write_byte(device_addr << 1)
  i2c_write_byte(reg_addr)
  
  var i: u32 = 0
  while i < length {
    i2c_write_byte(@intToPtr(data + i, u8))
    i = i + 1
  }
  
  i2c_stop()
  return 0
}

export fn i2c_read(device_addr: u8, reg_addr: u8, buffer: u64, length: u32) -> u32 {
  if i2c_initialized == 0 { return 0 }
  
  i2c_start()
  i2c_write_byte(device_addr << 1)
  i2c_write_byte(reg_addr)
  
  i2c_start()
  i2c_write_byte((device_addr << 1) | 1)
  
  var i: u32 = 0
  while i < length {
    @ptrToInt(buffer + i, u8) = i2c_read_byte()
    i = i + 1
  }
  
  i2c_stop()
  return length
}
