// home-os Sound System
// Advanced sound driver

import "../core/foundation.home" as foundation
import "audio.home" as audio

const SOUND_CHANNELS: u32 = 16

struct SoundChannel {
  playing: u32,
  volume: u8,
  pan: u8,
  frequency: u32,
  position: u32
}

var channels: [SoundChannel; 16]
var sound_initialized: u32 = 0

export fn sound_init() {
  var i: u32 = 0
  while i < SOUND_CHANNELS {
    channels[i].playing = 0
    channels[i].volume = 255
    channels[i].pan = 128
    i = i + 1
  }
  
  audio.audio_init()
  sound_initialized = 1
  foundation.serial_write_string("[Sound] Sound system initialized\n")
}

export fn sound_play(channel: u32, samples: u64, length: u32, frequency: u32) {
  if channel >= SOUND_CHANNELS { return }
  if sound_initialized == 0 { return }
  
  channels[channel].playing = 1
  channels[channel].frequency = frequency
  channels[channel].position = 0
  
  audio.audio_play(samples, length)
}

export fn sound_stop(channel: u32) {
  if channel >= SOUND_CHANNELS { return }
  channels[channel].playing = 0
}

export fn sound_set_volume(channel: u32, volume: u8) {
  if channel >= SOUND_CHANNELS { return }
  channels[channel].volume = volume
  audio.audio_set_volume(volume)
}

export fn sound_set_pan(channel: u32, pan: u8) {
  if channel >= SOUND_CHANNELS { return }
  channels[channel].pan = pan
}

export fn sound_is_playing(channel: u32) -> u32 {
  if channel >= SOUND_CHANNELS { return 0 }
  return channels[channel].playing
}
