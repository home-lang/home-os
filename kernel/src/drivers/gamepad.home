// home-os Gamepad Driver
// USB/Bluetooth gamepad support

import "../core/foundation.home" as foundation

const MAX_GAMEPADS: u32 = 4

const BTN_A: u16 = 0x0001
const BTN_B: u16 = 0x0002
const BTN_X: u16 = 0x0004
const BTN_Y: u16 = 0x0008
const BTN_START: u16 = 0x0010
const BTN_SELECT: u16 = 0x0020

struct Gamepad {
  connected: u32,
  buttons: u16,
  axis_x: i16,
  axis_y: i16,
  trigger_l: u8,
  trigger_r: u8
}

var gamepads: [Gamepad; 4]

export fn gamepad_init() {
  var i: u32 = 0
  while i < MAX_GAMEPADS {
    gamepads[i].connected = 0
    i = i + 1
  }
  foundation.serial_write_string("[Gamepad] Initialized\n")
}

export fn gamepad_connect(id: u32) {
  if id >= MAX_GAMEPADS { return }
  gamepads[id].connected = 1
  gamepads[id].buttons = 0
  gamepads[id].axis_x = 0
  gamepads[id].axis_y = 0
  foundation.serial_write_string("[Gamepad] Controller connected\n")
}

export fn gamepad_disconnect(id: u32) {
  if id >= MAX_GAMEPADS { return }
  gamepads[id].connected = 0
}

export fn gamepad_get_buttons(id: u32) -> u16 {
  if id >= MAX_GAMEPADS { return 0 }
  return gamepads[id].buttons
}

export fn gamepad_get_axis_x(id: u32) -> i16 {
  if id >= MAX_GAMEPADS { return 0 }
  return gamepads[id].axis_x
}

export fn gamepad_get_axis_y(id: u32) -> i16 {
  if id >= MAX_GAMEPADS { return 0 }
  return gamepads[id].axis_y
}

export fn gamepad_is_connected(id: u32) -> u32 {
  if id >= MAX_GAMEPADS { return 0 }
  return gamepads[id].connected
}
