// home-os PWM Driver
// Pulse Width Modulation

import "../core/foundation.home" as foundation

const PWM_BASE: u64 = 0xFE20C000

const PWM_CTL: u32 = 0x00
const PWM_STA: u32 = 0x04
const PWM_RNG1: u32 = 0x10
const PWM_DAT1: u32 = 0x14
const PWM_RNG2: u32 = 0x20
const PWM_DAT2: u32 = 0x24

var pwm_initialized: u32 = 0

export fn pwm_init() {
  if pwm_initialized == 1 { return }
  
  pwm_initialized = 1
  foundation.serial_write_string("[PWM] Initialized\n")
}

export fn pwm_set_frequency(channel: u32, frequency: u32) {
  if pwm_initialized == 0 { return }
  
  var range: u32 = 19200000 / frequency
  
  var addr: u64
  if channel == 0 {
    addr = PWM_BASE + PWM_RNG1
  } else {
    addr = PWM_BASE + PWM_RNG2
  }
  
  @ptrToInt(addr, u32) = range
}

export fn pwm_set_duty_cycle(channel: u32, duty: u32) {
  if pwm_initialized == 0 { return }
  if duty > 100 { return }
  
  var range_addr: u64
  var data_addr: u64
  
  if channel == 0 {
    range_addr = PWM_BASE + PWM_RNG1
    data_addr = PWM_BASE + PWM_DAT1
  } else {
    range_addr = PWM_BASE + PWM_RNG2
    data_addr = PWM_BASE + PWM_DAT2
  }
  
  var range: u32 = @intToPtr(range_addr, u32)
  var data: u32 = (range * duty) / 100
  
  @ptrToInt(data_addr, u32) = data
}

export fn pwm_enable(channel: u32) {
  if pwm_initialized == 0 { return }
  
  var ctl: u32 = @intToPtr(PWM_BASE + PWM_CTL, u32)
  
  if channel == 0 {
    ctl = ctl | 0x01
  } else {
    ctl = ctl | 0x0100
  }
  
  @ptrToInt(PWM_BASE + PWM_CTL, u32) = ctl
}

export fn pwm_disable(channel: u32) {
  if pwm_initialized == 0 { return }
  
  var ctl: u32 = @intToPtr(PWM_BASE + PWM_CTL, u32)
  
  if channel == 0 {
    ctl = ctl & ~0x01
  } else {
    ctl = ctl & ~0x0100
  }
  
  @ptrToInt(PWM_BASE + PWM_CTL, u32) = ctl
}
