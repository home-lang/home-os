// home-os Camera Driver
// Webcam support

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const CAMERA_FORMAT_RGB: u32 = 0
const CAMERA_FORMAT_YUV: u32 = 1

struct CameraConfig {
  width: u32,
  height: u32,
  format: u32,
  fps: u32
}

var camera_initialized: u32 = 0
var camera_buffer: u64 = 0
var camera_config: CameraConfig

export fn camera_init() {
  if camera_initialized == 1 { return }
  
  camera_config.width = 640
  camera_config.height = 480
  camera_config.format = CAMERA_FORMAT_RGB
  camera_config.fps = 30
  
  camera_buffer = memory.kmalloc(640 * 480 * 3)
  
  camera_initialized = 1
  foundation.serial_write_string("[Camera] Initialized (640x480)\n")
}

export fn camera_start() {
  if camera_initialized == 0 { return }
  foundation.serial_write_string("[Camera] Started\n")
}

export fn camera_stop() {
  if camera_initialized == 0 { return }
  foundation.serial_write_string("[Camera] Stopped\n")
}

export fn camera_capture(buffer: u64) -> u32 {
  if camera_initialized == 0 { return 0 }
  
  // Capture frame (stub)
  var size: u32 = camera_config.width * camera_config.height * 3
  return size
}

export fn camera_set_resolution(width: u32, height: u32) {
  camera_config.width = width
  camera_config.height = height
}
