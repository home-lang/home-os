// home-os NVDIMM Driver
// Non-Volatile DIMM support

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const NVDIMM_NAMESPACE_SIZE: u64 = 1024 * 1024 * 1024  // 1GB

var nvdimm_base: u64 = 0
var nvdimm_size: u64 = 0
var nvdimm_initialized: u32 = 0

export fn nvdimm_init() {
  if nvdimm_initialized == 1 { return }
  
  // Detect NVDIMM (stub)
  nvdimm_base = 0x100000000  // 4GB
  nvdimm_size = NVDIMM_NAMESPACE_SIZE
  
  nvdimm_initialized = 1
  foundation.serial_write_string("[NVDIMM] Initialized\n")
}

export fn nvdimm_read(offset: u64, buffer: u64, size: u64) -> u64 {
  if nvdimm_initialized == 0 { return 0 }
  if offset + size > nvdimm_size { return 0 }
  
  var i: u64 = 0
  while i < size {
    @ptrToInt(buffer + i, u8) = @intToPtr(nvdimm_base + offset + i, u8)
    i = i + 1
  }
  
  return size
}

export fn nvdimm_write(offset: u64, buffer: u64, size: u64) -> u64 {
  if nvdimm_initialized == 0 { return 0 }
  if offset + size > nvdimm_size { return 0 }
  
  var i: u64 = 0
  while i < size {
    @ptrToInt(nvdimm_base + offset + i, u8) = @intToPtr(buffer + i, u8)
    i = i + 1
  }
  
  return size
}

export fn nvdimm_flush(offset: u64, size: u64) {
  // Flush to persistent storage
  foundation.clflush(nvdimm_base + offset)
}
