// home-os PCI Driver
// PCI device enumeration

import "../core/foundation.home" as foundation

const PCI_CONFIG_ADDRESS: u16 = 0xCF8
const PCI_CONFIG_DATA: u16 = 0xCFC

struct PCIDevice {
  bus: u8,
  device: u8,
  function: u8,
  vendor_id: u16,
  device_id: u16,
  class_code: u8,
  subclass: u8,
  prog_if: u8,
  bar0: u32,
  bar1: u32,
  irq: u8
}

var pci_devices: [PCIDevice; 64]
var pci_device_count: u32 = 0

fn pci_config_read(bus: u8, device: u8, func: u8, offset: u8) -> u32 {
  var address: u32 = (1 << 31) | (bus << 16) | (device << 11) | (func << 8) | (offset & 0xFC)
  
  foundation.outb(PCI_CONFIG_ADDRESS, address & 0xFF)
  foundation.outb(PCI_CONFIG_ADDRESS + 1, (address >> 8) & 0xFF)
  foundation.outb(PCI_CONFIG_ADDRESS + 2, (address >> 16) & 0xFF)
  foundation.outb(PCI_CONFIG_ADDRESS + 3, (address >> 24) & 0xFF)
  
  var data: u32 = foundation.inb(PCI_CONFIG_DATA)
  data = data | (foundation.inb(PCI_CONFIG_DATA + 1) << 8)
  data = data | (foundation.inb(PCI_CONFIG_DATA + 2) << 16)
  data = data | (foundation.inb(PCI_CONFIG_DATA + 3) << 24)
  
  return data
}

fn pci_check_device(bus: u8, device: u8, func: u8) {
  var vendor: u32 = pci_config_read(bus, device, func, 0)
  var vendor_id: u16 = vendor & 0xFFFF
  var device_id: u16 = (vendor >> 16) & 0xFFFF
  
  if vendor_id == 0xFFFF { return }  // No device
  
  if pci_device_count < 64 {
    var dev: PCIDevice
    dev.bus = bus
    dev.device = device
    dev.function = func
    dev.vendor_id = vendor_id
    dev.device_id = device_id
    
    var class_info: u32 = pci_config_read(bus, device, func, 0x08)
    dev.class_code = (class_info >> 24) & 0xFF
    dev.subclass = (class_info >> 16) & 0xFF
    dev.prog_if = (class_info >> 8) & 0xFF
    
    dev.bar0 = pci_config_read(bus, device, func, 0x10)
    dev.bar1 = pci_config_read(bus, device, func, 0x14)
    
    var irq_info: u32 = pci_config_read(bus, device, func, 0x3C)
    dev.irq = irq_info & 0xFF
    
    pci_devices[pci_device_count] = dev
    pci_device_count = pci_device_count + 1
  }
}

export fn pci_init() {
  pci_device_count = 0
  
  // Scan all buses, devices, functions
  var bus: u32 = 0
  while bus < 256 {
    var device: u32 = 0
    while device < 32 {
      pci_check_device(bus, device, 0)
      device = device + 1
    }
    bus = bus + 1
  }
  
  foundation.serial_write_string("[PCI] Found ")
  foundation.serial_write_string(" devices\n")
}

export fn pci_get_device_count() -> u32 {
  return pci_device_count
}

export fn pci_get_device(index: u32) -> u64 {
  if index >= pci_device_count { return 0 }
  return @ptrFromInt(pci_devices[index])
}

export fn pci_find_device(vendor: u16, device: u16) -> u64 {
  var i: u32 = 0
  while i < pci_device_count {
    if pci_devices[i].vendor_id == vendor and pci_devices[i].device_id == device {
      return @ptrFromInt(pci_devices[i])
    }
    i = i + 1
  }
  return 0
}
