// home-os RTC (Real-Time Clock) Driver
// CMOS RTC support

import "../core/foundation.home" as foundation

const CMOS_ADDRESS: u16 = 0x70
const CMOS_DATA: u16 = 0x71

fn cmos_read(reg: u8) -> u8 {
  foundation.outb(CMOS_ADDRESS, reg)
  return foundation.inb(CMOS_DATA)
}

fn bcd_to_binary(bcd: u8) -> u8 {
  return ((bcd >> 4) * 10) + (bcd & 0x0F)
}

export fn rtc_init() {
  foundation.serial_write_string("[RTC] Initialized\n")
}

export fn rtc_get_second() -> u8 {
  return bcd_to_binary(cmos_read(0x00))
}

export fn rtc_get_minute() -> u8 {
  return bcd_to_binary(cmos_read(0x02))
}

export fn rtc_get_hour() -> u8 {
  return bcd_to_binary(cmos_read(0x04))
}

export fn rtc_get_day() -> u8 {
  return bcd_to_binary(cmos_read(0x07))
}

export fn rtc_get_month() -> u8 {
  return bcd_to_binary(cmos_read(0x08))
}

export fn rtc_get_year() -> u16 {
  var year: u16 = bcd_to_binary(cmos_read(0x09))
  return 2000 + year
}

export fn rtc_get_timestamp() -> u64 {
  var year: u64 = rtc_get_year()
  var month: u64 = rtc_get_month()
  var day: u64 = rtc_get_day()
  var hour: u64 = rtc_get_hour()
  var minute: u64 = rtc_get_minute()
  var second: u64 = rtc_get_second()
  
  // Simple timestamp calculation
  var timestamp: u64 = year * 31536000
  timestamp = timestamp + (month * 2592000)
  timestamp = timestamp + (day * 86400)
  timestamp = timestamp + (hour * 3600)
  timestamp = timestamp + (minute * 60)
  timestamp = timestamp + second
  
  return timestamp
}
