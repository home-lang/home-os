// home-os RAM Disk Driver
// In-memory block device

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const RAMDISK_SIZE: u32 = 1024 * 1024  // 1MB
const RAMDISK_SECTOR_SIZE: u32 = 512

var ramdisk_data: u64 = 0
var ramdisk_initialized: u32 = 0

export fn ramdisk_init() {
  if ramdisk_initialized == 1 { return }
  
  ramdisk_data = memory.kmalloc(RAMDISK_SIZE)
  if ramdisk_data == 0 {
    foundation.serial_write_string("[Ramdisk] Failed to allocate memory\n")
    return
  }
  
  ramdisk_initialized = 1
  foundation.serial_write_string("[Ramdisk] Initialized (1MB)\n")
}

export fn ramdisk_read(sector: u32, buffer: u64) -> u32 {
  if ramdisk_initialized == 0 { return 1 }
  
  var offset: u64 = sector * RAMDISK_SECTOR_SIZE
  if offset >= RAMDISK_SIZE { return 1 }
  
  var i: u32 = 0
  while i < RAMDISK_SECTOR_SIZE {
    @ptrToInt(buffer + i, u8) = @intToPtr(ramdisk_data + offset + i, u8)
    i = i + 1
  }
  
  return 0
}

export fn ramdisk_write(sector: u32, buffer: u64) -> u32 {
  if ramdisk_initialized == 0 { return 1 }
  
  var offset: u64 = sector * RAMDISK_SECTOR_SIZE
  if offset >= RAMDISK_SIZE { return 1 }
  
  var i: u32 = 0
  while i < RAMDISK_SECTOR_SIZE {
    @ptrToInt(ramdisk_data + offset + i, u8) = @intToPtr(buffer + i, u8)
    i = i + 1
  }
  
  return 0
}

export fn ramdisk_get_size() -> u32 {
  return RAMDISK_SIZE / RAMDISK_SECTOR_SIZE
}
