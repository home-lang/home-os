// home-os Realtek RTL8139 Network Driver
// RTL8139 Ethernet controller

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory
import "pci.home" as pci

const RTL8139_VENDOR: u16 = 0x10EC
const RTL8139_DEVICE: u16 = 0x8139

const RTL8139_IDR0: u16 = 0x00
const RTL8139_MAR0: u16 = 0x08
const RTL8139_RBSTART: u16 = 0x30
const RTL8139_CMD: u16 = 0x37
const RTL8139_IMR: u16 = 0x3C
const RTL8139_ISR: u16 = 0x3E
const RTL8139_RCR: u16 = 0x44
const RTL8139_CONFIG1: u16 = 0x52

const CMD_RESET: u8 = 0x10
const CMD_RX_ENABLE: u8 = 0x08
const CMD_TX_ENABLE: u8 = 0x04

var rtl8139_base: u16 = 0
var rtl8139_rx_buffer: u64 = 0
var rtl8139_initialized: u32 = 0

export fn rtl8139_init() {
  if rtl8139_initialized == 1 { return }
  
  var device: u64 = pci.pci_find_device(RTL8139_VENDOR, RTL8139_DEVICE)
  if device == 0 {
    foundation.serial_write_string("[RTL8139] Device not found\n")
    return
  }
  
  rtl8139_base = 0xC000  // Stub: would read from PCI BAR
  
  // Reset
  foundation.outb(rtl8139_base + RTL8139_CMD, CMD_RESET)
  
  var timeout: u32 = 1000
  while timeout > 0 {
    if (foundation.inb(rtl8139_base + RTL8139_CMD) & CMD_RESET) == 0 {
      break
    }
    timeout = timeout - 1
  }
  
  // Allocate RX buffer
  rtl8139_rx_buffer = memory.kmalloc(8192 + 16)
  
  // Set RX buffer
  foundation.outb(rtl8139_base + RTL8139_RBSTART, rtl8139_rx_buffer & 0xFFFFFFFF)
  
  // Enable RX/TX
  foundation.outb(rtl8139_base + RTL8139_CMD, CMD_RX_ENABLE | CMD_TX_ENABLE)
  
  // Configure RX
  foundation.outb(rtl8139_base + RTL8139_RCR, 0x0F)
  
  rtl8139_initialized = 1
  foundation.serial_write_string("[RTL8139] Initialized\n")
}

export fn rtl8139_send_packet(data: u64, length: u32) -> u32 {
  if rtl8139_initialized == 0 { return 1 }
  
  // Stub: would transmit packet
  return 0
}

export fn rtl8139_receive_packet(buffer: u64, max_length: u32) -> u32 {
  if rtl8139_initialized == 0 { return 0 }
  
  // Stub: would receive packet
  return 0
}
