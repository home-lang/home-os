// home-os Sensor Framework
// Accelerometer, gyroscope, magnetometer

import "../core/foundation.home" as foundation

const SENSOR_TYPE_ACCEL: u32 = 0
const SENSOR_TYPE_GYRO: u32 = 1
const SENSOR_TYPE_MAG: u32 = 2
const SENSOR_TYPE_LIGHT: u32 = 3
const SENSOR_TYPE_PROXIMITY: u32 = 4

const MAX_SENSORS: u32 = 16

struct SensorData {
  x: i32,
  y: i32,
  z: i32,
  timestamp: u64
}

struct Sensor {
  type: u32,
  enabled: u32,
  data: SensorData
}

var sensors: [Sensor; 16]
var sensor_count: u32 = 0

export fn sensors_init() {
  sensor_count = 0
  foundation.serial_write_string("[Sensors] Framework initialized\n")
}

export fn sensors_register(type: u32) -> u32 {
  if sensor_count >= MAX_SENSORS { return 0xFFFFFFFF }
  
  sensors[sensor_count].type = type
  sensors[sensor_count].enabled = 0
  
  var id: u32 = sensor_count
  sensor_count = sensor_count + 1
  
  return id
}

export fn sensors_enable(sensor_id: u32) {
  if sensor_id >= sensor_count { return }
  sensors[sensor_id].enabled = 1
}

export fn sensors_disable(sensor_id: u32) {
  if sensor_id >= sensor_count { return }
  sensors[sensor_id].enabled = 0
}

export fn sensors_read(sensor_id: u32) -> u64 {
  if sensor_id >= sensor_count { return 0 }
  if sensors[sensor_id].enabled == 0 { return 0 }
  
  // Read from hardware (stub)
  return @ptrFromInt(sensors[sensor_id].data)
}
