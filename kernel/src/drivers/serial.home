// home-os Serial Port Driver (Extended)
// Full serial port implementation with buffering

import "../core/foundation.home" as foundation

const SERIAL_BUFFER_SIZE: u32 = 1024

var serial_rx_buffer: [u8; 1024]
var serial_rx_head: u32 = 0
var serial_rx_tail: u32 = 0

export fn serial_init_extended() {
  serial_rx_head = 0
  serial_rx_tail = 0
  foundation.serial_write_string("[Serial] Extended driver initialized\n")
}

export fn serial_interrupt_handler() {
  while (foundation.inb(0x3FD) & 0x01) != 0 {
    var ch: u8 = foundation.inb(0x3F8)
    
    var next_head: u32 = (serial_rx_head + 1) % SERIAL_BUFFER_SIZE
    if next_head != serial_rx_tail {
      serial_rx_buffer[serial_rx_head] = ch
      serial_rx_head = next_head
    }
  }
}

export fn serial_available() -> u32 {
  if serial_rx_head >= serial_rx_tail {
    return serial_rx_head - serial_rx_tail
  }
  return SERIAL_BUFFER_SIZE - serial_rx_tail + serial_rx_head
}

export fn serial_read_char() -> u8 {
  if serial_rx_head == serial_rx_tail {
    return 0
  }
  
  var ch: u8 = serial_rx_buffer[serial_rx_tail]
  serial_rx_tail = (serial_rx_tail + 1) % SERIAL_BUFFER_SIZE
  return ch
}

export fn serial_read_line(buffer: u64, max_len: u32) -> u32 {
  var i: u32 = 0
  
  while i < max_len - 1 {
    if serial_rx_head == serial_rx_tail {
      break
    }
    
    var ch: u8 = serial_read_char()
    if ch == '\n' or ch == '\r' {
      break
    }
    
    @ptrToInt(buffer + i, u8) = ch
    i = i + 1
  }
  
  @ptrToInt(buffer + i, u8) = 0
  return i
}
