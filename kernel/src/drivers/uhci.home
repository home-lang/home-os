// home-os UHCI Driver
// Universal Host Controller Interface (USB 1.1)

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const UHCI_USBCMD: u16 = 0x00
const UHCI_USBSTS: u16 = 0x02
const UHCI_FRNUM: u16 = 0x06
const UHCI_FRBASEADD: u16 = 0x08

var uhci_base: u16 = 0
var uhci_frame_list: u64 = 0
var uhci_initialized: u32 = 0

export fn uhci_init() {
  if uhci_initialized == 1 { return }
  
  uhci_base = 0xC020  // Stub: would read from PCI
  
  // Allocate frame list
  uhci_frame_list = memory.kmalloc(4096)
  if uhci_frame_list == 0 {
    foundation.serial_write_string("[UHCI] Failed to allocate frame list\n")
    return
  }
  
  // Reset controller
  foundation.outb(uhci_base + UHCI_USBCMD, 0x0004)
  
  var timeout: u32 = 1000
  while timeout > 0 {
    if (foundation.inb(uhci_base + UHCI_USBCMD) & 0x0004) == 0 {
      break
    }
    timeout = timeout - 1
  }
  
  // Set frame list base
  foundation.outb(uhci_base + UHCI_FRBASEADD, uhci_frame_list & 0xFFFFFFFF)
  
  // Start controller
  foundation.outb(uhci_base + UHCI_USBCMD, 0x0001)
  
  uhci_initialized = 1
  foundation.serial_write_string("[UHCI] Initialized\n")
}

export fn uhci_control_transfer(device: u8, request: u8, value: u16, index: u16, data: u64, length: u16) -> u32 {
  if uhci_initialized == 0 { return 1 }
  
  // Stub: would perform control transfer
  return 0
}
