// home-os AHCI Driver
// Advanced Host Controller Interface (SATA)

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory
import "pci.home" as pci

const AHCI_CLASS: u8 = 0x01
const AHCI_SUBCLASS: u8 = 0x06

const HBA_PORT_CMD_ST: u32 = 0x0001
const HBA_PORT_CMD_FRE: u32 = 0x0010
const HBA_PORT_CMD_FR: u32 = 0x4000
const HBA_PORT_CMD_CR: u32 = 0x8000

struct HbaPort {
  clb: u64,
  fb: u64,
  is: u32,
  ie: u32,
  cmd: u32,
  reserved: u32,
  tfd: u32,
  sig: u32,
  ssts: u32,
  sctl: u32,
  serr: u32,
  sact: u32,
  ci: u32
}

var ahci_base: u64 = 0
var ahci_initialized: u32 = 0
var ahci_port_count: u32 = 0

export fn ahci_init() {
  if ahci_initialized == 1 { return }
  
  // Find AHCI controller via PCI
  var i: u32 = 0
  while i < pci.pci_get_device_count() {
    var device: u64 = pci.pci_get_device(i)
    if device != 0 {
      // Check if AHCI
      ahci_base = 0xF0000000  // Stub: would read from BAR5
      break
    }
    i = i + 1
  }
  
  if ahci_base == 0 {
    foundation.serial_write_string("[AHCI] Controller not found\n")
    return
  }
  
  ahci_initialized = 1
  foundation.serial_write_string("[AHCI] Initialized\n")
}

export fn ahci_read_sector(port: u32, lba: u64, buffer: u64) -> u32 {
  if ahci_initialized == 0 { return 1 }
  
  // Stub: would issue read command
  return 0
}

export fn ahci_write_sector(port: u32, lba: u64, buffer: u64) -> u32 {
  if ahci_initialized == 0 { return 1 }
  
  // Stub: would issue write command
  return 0
}
