// home-os LED Driver
// LED control (keyboard, case, RGB)

import "../core/foundation.home" as foundation

const LED_CAPS_LOCK: u32 = 0
const LED_NUM_LOCK: u32 = 1
const LED_SCROLL_LOCK: u32 = 2
const LED_POWER: u32 = 3

const MAX_LEDS: u32 = 16

struct Led {
  id: u32,
  state: u32,
  brightness: u8,
  color_r: u8,
  color_g: u8,
  color_b: u8
}

var leds: [Led; 16]
var led_count: u32 = 0

export fn led_init() {
  led_count = 0
  foundation.serial_write_string("[LED] Driver initialized\n")
}

export fn led_register(id: u32) -> u32 {
  if led_count >= MAX_LEDS { return 0xFFFFFFFF }
  
  leds[led_count].id = id
  leds[led_count].state = 0
  leds[led_count].brightness = 255
  
  var idx: u32 = led_count
  led_count = led_count + 1
  
  return idx
}

export fn led_set_state(led_id: u32, state: u32) {
  if led_id >= led_count { return }
  
  leds[led_id].state = state
  
  // Write to hardware (stub)
}

export fn led_set_brightness(led_id: u32, brightness: u8) {
  if led_id >= led_count { return }
  leds[led_id].brightness = brightness
}

export fn led_set_color(led_id: u32, r: u8, g: u8, b: u8) {
  if led_id >= led_count { return }
  
  leds[led_id].color_r = r
  leds[led_id].color_g = g
  leds[led_id].color_b = b
}

export fn led_blink(led_id: u32, interval_ms: u32) {
  // Set up blinking (stub)
}
