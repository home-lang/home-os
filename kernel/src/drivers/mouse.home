// home-os Mouse Driver
// PS/2 mouse support

import "../core/foundation.home" as foundation

const MOUSE_DATA_PORT: u16 = 0x60
const MOUSE_STATUS_PORT: u16 = 0x64
const MOUSE_COMMAND_PORT: u16 = 0x64

var mouse_x: i32 = 0
var mouse_y: i32 = 0
var mouse_buttons: u8 = 0
var mouse_initialized: u32 = 0

fn mouse_wait_input() {
  var timeout: u32 = 100000
  while timeout > 0 {
    if (foundation.inb(MOUSE_STATUS_PORT) & 0x02) == 0 {
      return
    }
    timeout = timeout - 1
  }
}

fn mouse_wait_output() {
  var timeout: u32 = 100000
  while timeout > 0 {
    if (foundation.inb(MOUSE_STATUS_PORT) & 0x01) != 0 {
      return
    }
    timeout = timeout - 1
  }
}

fn mouse_write(data: u8) {
  mouse_wait_input()
  foundation.outb(MOUSE_COMMAND_PORT, 0xD4)
  mouse_wait_input()
  foundation.outb(MOUSE_DATA_PORT, data)
}

fn mouse_read() -> u8 {
  mouse_wait_output()
  return foundation.inb(MOUSE_DATA_PORT)
}

export fn mouse_init() {
  if mouse_initialized == 1 { return }
  
  // Enable auxiliary device
  mouse_wait_input()
  foundation.outb(MOUSE_COMMAND_PORT, 0xA8)
  
  // Enable interrupts
  mouse_wait_input()
  foundation.outb(MOUSE_COMMAND_PORT, 0x20)
  var status: u8 = mouse_read()
  status = status | 0x02
  mouse_wait_input()
  foundation.outb(MOUSE_COMMAND_PORT, 0x60)
  mouse_wait_input()
  foundation.outb(MOUSE_DATA_PORT, status)
  
  // Set defaults
  mouse_write(0xF6)
  mouse_read()  // ACK
  
  // Enable data reporting
  mouse_write(0xF4)
  mouse_read()  // ACK
  
  mouse_initialized = 1
  foundation.serial_write_string("[Mouse] Initialized\n")
}

export fn mouse_interrupt_handler() {
  var packet: [u8; 3]
  packet[0] = foundation.inb(MOUSE_DATA_PORT)
  packet[1] = foundation.inb(MOUSE_DATA_PORT)
  packet[2] = foundation.inb(MOUSE_DATA_PORT)
  
  mouse_buttons = packet[0] & 0x07
  
  var dx: i32 = packet[1]
  var dy: i32 = packet[2]
  
  if (packet[0] & 0x10) != 0 { dx = dx | 0xFFFFFF00 }
  if (packet[0] & 0x20) != 0 { dy = dy | 0xFFFFFF00 }
  
  mouse_x = mouse_x + dx
  mouse_y = mouse_y - dy
  
  if mouse_x < 0 { mouse_x = 0 }
  if mouse_y < 0 { mouse_y = 0 }
  if mouse_x > 1024 { mouse_x = 1024 }
  if mouse_y > 768 { mouse_y = 768 }
}

export fn mouse_get_x() -> i32 {
  return mouse_x
}

export fn mouse_get_y() -> i32 {
  return mouse_y
}

export fn mouse_get_buttons() -> u8 {
  return mouse_buttons
}
