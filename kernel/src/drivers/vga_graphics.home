// home-os VGA Graphics Mode Driver
// 320x200 256-color mode

import "../core/foundation.home" as foundation

const VGA_WIDTH: u32 = 320
const VGA_HEIGHT: u32 = 200
const VGA_MEMORY: u64 = 0xA0000

var vga_graphics_initialized: u32 = 0

export fn vga_graphics_init() {
  if vga_graphics_initialized == 1 { return }
  
  // Set mode 13h (320x200 256 colors)
  foundation.outb(0x3C8, 0)
  
  vga_graphics_initialized = 1
  foundation.serial_write_string("[VGA Graphics] Mode 13h initialized\n")
}

export fn vga_put_pixel(x: u32, y: u32, color: u8) {
  if x >= VGA_WIDTH or y >= VGA_HEIGHT { return }
  
  var offset: u64 = y * VGA_WIDTH + x
  @ptrToInt(VGA_MEMORY + offset, u8) = color
}

export fn vga_fill_screen(color: u8) {
  var i: u32 = 0
  while i < (VGA_WIDTH * VGA_HEIGHT) {
    @ptrToInt(VGA_MEMORY + i, u8) = color
    i = i + 1
  }
}

export fn vga_draw_rect(x: u32, y: u32, width: u32, height: u32, color: u8) {
  var i: u32 = 0
  while i < height {
    var j: u32 = 0
    while j < width {
      vga_put_pixel(x + j, y + i, color)
      j = j + 1
    }
    i = i + 1
  }
}

export fn vga_draw_line(x1: u32, y1: u32, x2: u32, y2: u32, color: u8) {
  var dx: i32 = x2 - x1
  var dy: i32 = y2 - y1
  
  if dx < 0 { dx = -dx }
  if dy < 0 { dy = -dy }
  
  var steps: i32 = dx
  if dy > dx { steps = dy }
  
  var x_inc: i32 = (x2 - x1) / steps
  var y_inc: i32 = (y2 - y1) / steps
  
  var x: i32 = x1
  var y: i32 = y1
  
  var i: i32 = 0
  while i <= steps {
    vga_put_pixel(x, y, color)
    x = x + x_inc
    y = y + y_inc
    i = i + 1
  }
}

export fn vga_set_palette(index: u8, r: u8, g: u8, b: u8) {
  foundation.outb(0x3C8, index)
  foundation.outb(0x3C9, r >> 2)
  foundation.outb(0x3C9, g >> 2)
  foundation.outb(0x3C9, b >> 2)
}
