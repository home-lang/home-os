// home-os Framebuffer Driver
// Graphics framebuffer support

import "../core/foundation.home" as foundation

const FB_WIDTH: u32 = 1024
const FB_HEIGHT: u32 = 768
const FB_BPP: u32 = 32

var fb_address: u64 = 0xFD000000
var fb_initialized: u32 = 0

export fn fb_init(addr: u64, width: u32, height: u32) {
  fb_address = addr
  fb_initialized = 1
  foundation.serial_write_string("[Framebuffer] Initialized\n")
}

export fn fb_put_pixel(x: u32, y: u32, color: u32) {
  if fb_initialized == 0 { return }
  if x >= FB_WIDTH or y >= FB_HEIGHT { return }
  
  var offset: u64 = (y * FB_WIDTH + x) * 4
  @ptrToInt(fb_address + offset, u32) = color
}

export fn fb_fill_rect(x: u32, y: u32, width: u32, height: u32, color: u32) {
  var i: u32 = 0
  while i < height {
    var j: u32 = 0
    while j < width {
      fb_put_pixel(x + j, y + i, color)
      j = j + 1
    }
    i = i + 1
  }
}

export fn fb_clear(color: u32) {
  fb_fill_rect(0, 0, FB_WIDTH, FB_HEIGHT, color)
}

export fn fb_draw_char(x: u32, y: u32, ch: u8, color: u32) {
  // Simple 8x8 font rendering stub
  var i: u32 = 0
  while i < 8 {
    var j: u32 = 0
    while j < 8 {
      fb_put_pixel(x + j, y + i, color)
      j = j + 1
    }
    i = i + 1
  }
}

export fn fb_draw_string(x: u32, y: u32, text: u64, color: u32) {
  var i: u32 = 0
  while i < 256 {
    var ch: u8 = @intToPtr(text + i, u8)
    if ch == 0 { break }
    fb_draw_char(x + (i * 8), y, ch, color)
    i = i + 1
  }
}
