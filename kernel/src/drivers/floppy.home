// home-os Floppy Disk Driver
// Legacy floppy controller

import "../core/foundation.home" as foundation
import "dma.home" as dma

const FLOPPY_DOR: u16 = 0x3F2
const FLOPPY_MSR: u16 = 0x3F4
const FLOPPY_DATA: u16 = 0x3F5
const FLOPPY_CCR: u16 = 0x3F7

const CMD_READ: u8 = 0xE6
const CMD_WRITE: u8 = 0xC5
const CMD_SEEK: u8 = 0x0F
const CMD_SENSE: u8 = 0x08

var floppy_initialized: u32 = 0
var floppy_dma_channel: u32 = 0

fn floppy_wait_ready() {
  var timeout: u32 = 10000
  while timeout > 0 {
    if (foundation.inb(FLOPPY_MSR) & 0x80) != 0 {
      return
    }
    timeout = timeout - 1
  }
}

fn floppy_send_command(cmd: u8) {
  floppy_wait_ready()
  foundation.outb(FLOPPY_DATA, cmd)
}

export fn floppy_init() {
  if floppy_initialized == 1 { return }
  
  floppy_dma_channel = dma.dma_allocate_channel()
  if floppy_dma_channel == 0xFFFFFFFF {
    foundation.serial_write_string("[Floppy] Failed to allocate DMA\n")
    return
  }
  
  // Reset controller
  foundation.outb(FLOPPY_DOR, 0x00)
  foundation.outb(FLOPPY_DOR, 0x0C)
  
  floppy_initialized = 1
  foundation.serial_write_string("[Floppy] Initialized\n")
}

export fn floppy_read_sector(track: u8, head: u8, sector: u8, buffer: u64) -> u32 {
  if floppy_initialized == 0 { return 1 }
  
  dma.dma_setup_transfer(floppy_dma_channel, buffer, 512, 0x46)
  dma.dma_start_transfer(floppy_dma_channel)
  
  floppy_send_command(CMD_READ)
  floppy_send_command((head << 2) | 0)
  floppy_send_command(track)
  floppy_send_command(head)
  floppy_send_command(sector)
  floppy_send_command(2)
  floppy_send_command(18)
  floppy_send_command(0x1B)
  floppy_send_command(0xFF)
  
  return 0
}

export fn floppy_write_sector(track: u8, head: u8, sector: u8, buffer: u64) -> u32 {
  if floppy_initialized == 0 { return 1 }
  
  dma.dma_setup_transfer(floppy_dma_channel, buffer, 512, 0x4A)
  dma.dma_start_transfer(floppy_dma_channel)
  
  floppy_send_command(CMD_WRITE)
  floppy_send_command((head << 2) | 0)
  floppy_send_command(track)
  floppy_send_command(head)
  floppy_send_command(sector)
  floppy_send_command(2)
  floppy_send_command(18)
  floppy_send_command(0x1B)
  floppy_send_command(0xFF)
  
  return 0
}
