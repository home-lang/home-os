// home-os Bluetooth Driver
// Bluetooth support

import "../core/foundation.home" as foundation

const BT_STATE_OFF: u32 = 0
const BT_STATE_ON: u32 = 1
const BT_STATE_SCANNING: u32 = 2
const BT_STATE_CONNECTED: u32 = 3

const MAX_BT_DEVICES: u32 = 16

struct BtDevice {
  address: [u8; 6],
  name: [u8; 32],
  rssi: i8,
  paired: u32
}

var bt_devices: [BtDevice; 16]
var bt_device_count: u32 = 0
var bt_state: u32 = BT_STATE_OFF

export fn bluetooth_init() {
  bt_device_count = 0
  bt_state = BT_STATE_OFF
  foundation.serial_write_string("[Bluetooth] Initialized\n")
}

export fn bluetooth_enable() {
  bt_state = BT_STATE_ON
  foundation.serial_write_string("[Bluetooth] Enabled\n")
}

export fn bluetooth_disable() {
  bt_state = BT_STATE_OFF
  foundation.serial_write_string("[Bluetooth] Disabled\n")
}

export fn bluetooth_scan() -> u32 {
  if bt_state == BT_STATE_OFF { return 0 }
  
  bt_state = BT_STATE_SCANNING
  bt_device_count = 0
  foundation.serial_write_string("[Bluetooth] Scanning...\n")
  
  return bt_device_count
}

export fn bluetooth_pair(device_id: u32) -> u32 {
  if device_id >= bt_device_count { return 1 }
  
  bt_devices[device_id].paired = 1
  foundation.serial_write_string("[Bluetooth] Paired with device\n")
  return 0
}

export fn bluetooth_connect(device_id: u32) -> u32 {
  if device_id >= bt_device_count { return 1 }
  if bt_devices[device_id].paired == 0 { return 1 }
  
  bt_state = BT_STATE_CONNECTED
  foundation.serial_write_string("[Bluetooth] Connected\n")
  return 0
}

export fn bluetooth_get_state() -> u32 {
  return bt_state
}
