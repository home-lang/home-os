// home-os Namespaces
// Linux-style namespaces for isolation

import "../core/foundation.home" as foundation

const NS_TYPE_MNT: u32 = 0
const NS_TYPE_PID: u32 = 1
const NS_TYPE_NET: u32 = 2
const NS_TYPE_IPC: u32 = 3
const NS_TYPE_UTS: u32 = 4
const NS_TYPE_USER: u32 = 5

const MAX_NAMESPACES: u32 = 64

struct Namespace {
  type: u32,
  id: u32,
  ref_count: u32,
  in_use: u32
}

var namespaces: [Namespace; 64]
var namespace_count: u32 = 0

export fn namespace_init() {
  namespace_count = 0
  foundation.serial_write_string("[Namespace] Initialized\n")
}

export fn namespace_create(type: u32) -> u32 {
  if namespace_count >= MAX_NAMESPACES { return 0xFFFFFFFF }
  
  namespaces[namespace_count].type = type
  namespaces[namespace_count].id = namespace_count
  namespaces[namespace_count].ref_count = 1
  namespaces[namespace_count].in_use = 1
  
  var id: u32 = namespace_count
  namespace_count = namespace_count + 1
  
  foundation.serial_write_string("[Namespace] Created namespace type ")
  foundation.serial_write_string("\n")
  
  return id
}

export fn namespace_enter(ns_id: u32) -> u32 {
  if ns_id >= namespace_count { return 1 }
  if namespaces[ns_id].in_use == 0 { return 1 }
  
  namespaces[ns_id].ref_count = namespaces[ns_id].ref_count + 1
  return 0
}

export fn namespace_exit(ns_id: u32) {
  if ns_id >= namespace_count { return }
  if namespaces[ns_id].ref_count > 0 {
    namespaces[ns_id].ref_count = namespaces[ns_id].ref_count - 1
  }
}
