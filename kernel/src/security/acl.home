// home-os Kernel - Access Control Lists (ACLs)
// Extended file permissions beyond traditional Unix permissions

import "../core/foundation.home" as foundation

// ACL entry types
const ACL_USER: u32 = 1
const ACL_GROUP: u32 = 2
const ACL_OTHER: u32 = 3
const ACL_MASK: u32 = 4

// ACL permissions
const ACL_READ: u32 = 1 << 0
const ACL_WRITE: u32 = 1 << 1
const ACL_EXECUTE: u32 = 1 << 2

const MAX_ACL_ENTRIES: u32 = 32
const MAX_FILE_ACLS: u32 = 1000

struct ACLEntry {
  entry_type: u32,
  id: u32,  // UID or GID
  permissions: u32
}

struct FileACL {
  inode: u32,
  entry_count: u32,
  entries: [ACLEntry; 32]
}

var file_acls: [FileACL; 1000]
var acl_count: u32 = 0
var acl_initialized: u32 = 0

export fn acl_init() {
  if acl_initialized == 1 { return }
  
  acl_count = 0
  
  acl_initialized = 1
  foundation.serial_write_string("[ACL] Initialized\n")
}

export fn acl_create(inode: u32) -> u32 {
  if acl_count >= MAX_FILE_ACLS { return 0 }
  
  file_acls[acl_count].inode = inode
  file_acls[acl_count].entry_count = 0
  
  acl_count = acl_count + 1
  return acl_count - 1
}

export fn acl_add_entry(inode: u32, entry_type: u32, id: u32, permissions: u32) -> u32 {
  var i: u32 = 0
  while i < acl_count {
    if file_acls[i].inode == inode {
      if file_acls[i].entry_count >= MAX_ACL_ENTRIES {
        return 0
      }
      
      var idx: u32 = file_acls[i].entry_count
      file_acls[i].entries[idx].entry_type = entry_type
      file_acls[i].entries[idx].id = id
      file_acls[i].entries[idx].permissions = permissions
      file_acls[i].entry_count = file_acls[i].entry_count + 1
      
      return 1
    }
    i = i + 1
  }
  
  return 0
}

export fn acl_check_permission(inode: u32, uid: u32, gid: u32, requested: u32) -> u32 {
  var i: u32 = 0
  while i < acl_count {
    if file_acls[i].inode == inode {
      // Check user entries
      var j: u32 = 0
      while j < file_acls[i].entry_count {
        var entry: ACLEntry = file_acls[i].entries[j]
        
        if entry.entry_type == ACL_USER and entry.id == uid {
          if (entry.permissions & requested) == requested {
            return 1
          }
        }
        
        if entry.entry_type == ACL_GROUP and entry.id == gid {
          if (entry.permissions & requested) == requested {
            return 1
          }
        }
        
        j = j + 1
      }
      
      return 0
    }
    i = i + 1
  }
  
  return 0
}

export fn acl_remove(inode: u32) -> u32 {
  var i: u32 = 0
  while i < acl_count {
    if file_acls[i].inode == inode {
      // Shift ACLs down
      var j: u32 = i
      while j < acl_count - 1 {
        file_acls[j] = file_acls[j + 1]
        j = j + 1
      }
      
      acl_count = acl_count - 1
      return 1
    }
    i = i + 1
  }
  
  return 0
}

export fn acl_get_count() -> u32 {
  return acl_count
}
