// home-os Kernel - ARM64 Driver Integration
// Connect existing drivers to ARM64/RPI hardware

import "../../core/foundation.home" as foundation
import "../../drivers/serial.home" as serial
import "../../drivers/gpio.home" as gpio
import "../../drivers/spi.home" as spi
import "../../drivers/i2c.home" as i2c
import "../../drivers/pwm.home" as pwm
import "../../drivers/dma.home" as dma
import "../../drivers/usb.home" as usb
import "../../drivers/wifi.home" as wifi
import "../../drivers/bluetooth.home" as bluetooth
import "../../drivers/sound.home" as sound
import "../../drivers/camera.home" as camera
import "rpi4.home" as rpi4
import "rpi5.home" as rpi5

var integration_initialized: u32 = 0
var board_type: u32 = 0  // 0=unknown, 4=RPI4, 5=RPI5

export fn arm64_driver_init() {
  if integration_initialized == 1 { return }
  
  foundation.serial_write_string("[ARM64-Drivers] Initializing driver integration...\n")
  
  // Detect board type
  board_type = arm64_detect_board()
  
  if board_type == 4 {
    foundation.serial_write_string("[ARM64-Drivers] Raspberry Pi 4 detected\n")
    arm64_init_rpi4_drivers()
  } else if board_type == 5 {
    foundation.serial_write_string("[ARM64-Drivers] Raspberry Pi 5 detected\n")
    arm64_init_rpi5_drivers()
  }
  
  integration_initialized = 1
  foundation.serial_write_string("[ARM64-Drivers] Driver integration complete\n")
}

fn arm64_detect_board() -> u32 {
  // Read board revision from mailbox
  var revision: u32 = rpi4.rpi4_get_board_revision()
  
  // Check revision code
  if (revision & 0xFF0000) == 0xD04170 {
    return 5  // Pi 5
  } else if (revision & 0xFF0000) == 0xA03111 or (revision & 0xFF0000) == 0xB03111 {
    return 4  // Pi 4
  }
  
  return 0  // Unknown
}

fn arm64_init_rpi4_drivers() {
  // Serial/UART
  serial.serial_init()
  serial.serial_set_base(0xFE215000)  // Mini UART
  
  // GPIO
  gpio.gpio_init()
  gpio.gpio_set_base(0xFE200000)
  
  // SPI
  spi.spi_init()
  spi.spi_set_base(0xFE204000)
  
  // I2C
  i2c.i2c_init()
  i2c.i2c_set_base(0xFE804000)
  
  // PWM
  pwm.pwm_init()
  pwm.pwm_set_base(0xFE20C000)
  
  // DMA
  dma.dma_init()
  dma.dma_set_base(0xFE007000)
  
  // USB 3.0
  usb.usb_init()
  usb.usb_set_base(0x600000000)  // VL805 controller
  
  // WiFi (Cypress CYW43455)
  wifi.wifi_init()
  wifi.wifi_set_chipset(0x43455)
  
  // Bluetooth 5.0
  bluetooth.bluetooth_init()
  bluetooth.bluetooth_set_chipset(0x43455)
  
  // Audio (PWM-based + HDMI)
  sound.sound_init()
  sound.sound_set_output(1)  // HDMI
  
  foundation.serial_write_string("[ARM64-Drivers] RPI4 drivers initialized\n")
}

fn arm64_init_rpi5_drivers() {
  // Serial via RP1
  serial.serial_init()
  serial.serial_set_base(0x1F00030000)  // RP1 UART0
  
  // GPIO via RP1
  gpio.gpio_init()
  gpio.gpio_set_base(0x1F000D0000)  // RP1 IO Bank 0
  
  // SPI via RP1
  spi.spi_init()
  spi.spi_set_base(0x1F00050000)  // RP1 SPI0
  
  // I2C via RP1
  i2c.i2c_init()
  i2c.i2c_set_base(0x1F00070000)  // RP1 I2C0
  
  // PWM via RP1
  pwm.pwm_init()
  pwm.pwm_set_base(0x1F00098000)  // RP1 PWM0
  
  // USB 3.0 via RP1
  usb.usb_init()
  usb.usb_set_base(0x1F000C0000)  // RP1 USB
  
  // WiFi (integrated)
  wifi.wifi_init()
  wifi.wifi_set_chipset(0x43756)  // BCM43756
  
  // Bluetooth 5.0
  bluetooth.bluetooth_init()
  bluetooth.bluetooth_set_chipset(0x43756)
  
  // Audio via RP1
  sound.sound_init()
  sound.sound_set_output(2)  // HDMI + I2S
  
  // Camera (CSI interface)
  camera.camera_init()
  camera.camera_set_interface(1)  // CSI-2
  
  foundation.serial_write_string("[ARM64-Drivers] RPI5 drivers initialized\n")
}

export fn arm64_get_board_type() -> u32 {
  return board_type
}

export fn arm64_is_rpi4() -> u32 {
  return if board_type == 4 { 1 } else { 0 }
}

export fn arm64_is_rpi5() -> u32 {
  return if board_type == 5 { 1 } else { 0 }
}

// Driver wrappers that route to correct hardware
export fn arm64_uart_putc(c: u8) {
  if board_type == 4 {
    rpi4.rpi4_uart_putc(c)
  } else if board_type == 5 {
    rpi5.rpi5_uart_putc(c)
  }
}

export fn arm64_uart_getc() -> u8 {
  if board_type == 4 {
    return rpi4.rpi4_uart_getc()
  } else if board_type == 5 {
    return rpi5.rpi5_uart_getc()
  }
  return 0
}

export fn arm64_gpio_set(pin: u32) {
  if board_type == 4 {
    rpi4.rpi4_gpio_set(pin)
  } else if board_type == 5 {
    rpi5.rpi5_gpio_set(pin)
  }
}

export fn arm64_gpio_clear(pin: u32) {
  if board_type == 4 {
    rpi4.rpi4_gpio_clear(pin)
  } else if board_type == 5 {
    rpi5.rpi5_gpio_clear(pin)
  }
}
