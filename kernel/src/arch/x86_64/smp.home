// home-os SMP
// Symmetric Multi-Processing

import "../../core/foundation.home" as foundation
import "apic.home" as apic

const MAX_CPUS: u32 = 64

struct CpuInfo {
  id: u32,
  apic_id: u32,
  online: u32,
  idle: u32
}

var cpus: [CpuInfo; 64]
var cpu_count: u32 = 1
var smp_initialized: u32 = 0

export fn smp_init() {
  if smp_initialized == 1 { return }
  
  apic.apic_init()
  
  // Bootstrap CPU
  cpus[0].id = 0
  cpus[0].apic_id = apic.apic_get_id()
  cpus[0].online = 1
  cpus[0].idle = 0
  
  smp_initialized = 1
  foundation.serial_write_string("[SMP] Initialized with ")
  foundation.serial_write_string(" CPU(s)\n")
}

export fn smp_boot_cpu(cpu_id: u32) -> u32 {
  if cpu_id >= MAX_CPUS { return 1 }
  if cpu_id >= cpu_count { return 1 }
  
  foundation.serial_write_string("[SMP] Booting CPU ")
  foundation.serial_write_string("\n")
  
  // Send INIT IPI
  apic.apic_send_ipi(cpus[cpu_id].apic_id, 0x4500)
  
  // Send SIPI
  apic.apic_send_ipi(cpus[cpu_id].apic_id, 0x4600)
  
  cpus[cpu_id].online = 1
  
  return 0
}

export fn smp_get_cpu_count() -> u32 {
  return cpu_count
}

export fn smp_get_current_cpu() -> u32 {
  return apic.apic_get_id()
}
