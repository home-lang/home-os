// home-os APIC
// Advanced Programmable Interrupt Controller

import "../../core/foundation.home" as foundation

const APIC_BASE: u64 = 0xFEE00000

const APIC_ID: u32 = 0x20
const APIC_EOI: u32 = 0xB0
const APIC_SPURIOUS: u32 = 0xF0
const APIC_ICR_LOW: u32 = 0x300
const APIC_ICR_HIGH: u32 = 0x310

var apic_initialized: u32 = 0

fn apic_write(reg: u32, value: u32) {
  @ptrToInt(APIC_BASE + reg, u32) = value
}

fn apic_read(reg: u32) -> u32 {
  return @intToPtr(APIC_BASE + reg, u32)
}

export fn apic_init() {
  if apic_initialized == 1 { return }
  
  // Enable APIC
  var spurious: u32 = apic_read(APIC_SPURIOUS)
  spurious = spurious | 0x100
  apic_write(APIC_SPURIOUS, spurious)
  
  apic_initialized = 1
  foundation.serial_write_string("[APIC] Initialized\n")
}

export fn apic_eoi() {
  apic_write(APIC_EOI, 0)
}

export fn apic_send_ipi(dest: u32, vector: u32) {
  apic_write(APIC_ICR_HIGH, dest << 24)
  apic_write(APIC_ICR_LOW, vector)
}

export fn apic_get_id() -> u32 {
  return apic_read(APIC_ID) >> 24
}
