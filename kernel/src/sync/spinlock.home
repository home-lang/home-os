// home-os Spinlock
// Basic synchronization primitive

import "../core/foundation.home" as foundation

export struct Spinlock {
  locked: u32
}

export fn spinlock_init(lock: u64) {
  @ptrToInt(lock, u32) = 0
}

export fn spinlock_acquire(lock: u64) {
  while true {
    var expected: u32 = 0
    var desired: u32 = 1
    
    // Atomic compare-exchange stub
    var current: u32 = @intToPtr(lock, u32)
    if current == expected {
      @ptrToInt(lock, u32) = desired
      break
    }
    
    foundation.hlt()  // Yield CPU
  }
}

export fn spinlock_release(lock: u64) {
  @ptrToInt(lock, u32) = 0
}

export fn spinlock_try_acquire(lock: u64) -> u32 {
  var current: u32 = @intToPtr(lock, u32)
  if current == 0 {
    @ptrToInt(lock, u32) = 1
    return 1
  }
  return 0
}
