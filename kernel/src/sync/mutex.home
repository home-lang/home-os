// home-os Mutex
// Sleeping lock

import "../core/foundation.home" as foundation
import "spinlock.home" as spinlock

export struct Mutex {
  locked: u32,
  owner: u32,
  wait_queue: u64
}

export fn mutex_init(mutex: u64) {
  @ptrToInt(mutex, u32) = 0
  @ptrToInt(mutex + 4, u32) = 0
  @ptrToInt(mutex + 8, u64) = 0
}

export fn mutex_lock(mutex: u64) {
  while true {
    var current: u32 = @intToPtr(mutex, u32)
    if current == 0 {
      @ptrToInt(mutex, u32) = 1
      @ptrToInt(mutex + 4, u32) = 1  // Current PID stub
      break
    }
    
    foundation.hlt()  // Sleep
  }
}

export fn mutex_unlock(mutex: u64) {
  @ptrToInt(mutex, u32) = 0
  @ptrToInt(mutex + 4, u32) = 0
}

export fn mutex_try_lock(mutex: u64) -> u32 {
  var current: u32 = @intToPtr(mutex, u32)
  if current == 0 {
    @ptrToInt(mutex, u32) = 1
    @ptrToInt(mutex + 4, u32) = 1
    return 1
  }
  return 0
}
