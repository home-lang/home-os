// home-os EXT2 Filesystem Driver
// Real EXT2 implementation

import "../core/foundation.home" as foundation
import "../drivers/ata.home" as ata

const EXT2_SUPER_MAGIC: u16 = 0xEF53
const EXT2_ROOT_INO: u32 = 2

struct Ext2Superblock {
  inodes_count: u32,
  blocks_count: u32,
  r_blocks_count: u32,
  free_blocks_count: u32,
  free_inodes_count: u32,
  first_data_block: u32,
  log_block_size: u32,
  log_frag_size: u32,
  blocks_per_group: u32,
  frags_per_group: u32,
  inodes_per_group: u32,
  mtime: u32,
  wtime: u32,
  mnt_count: u16,
  max_mnt_count: u16,
  magic: u16,
  state: u16,
  errors: u16
}

struct Ext2Inode {
  mode: u16,
  uid: u16,
  size: u32,
  atime: u32,
  ctime: u32,
  mtime: u32,
  dtime: u32,
  gid: u16,
  links_count: u16,
  blocks: u32,
  flags: u32,
  block: [u32; 15]
}

var ext2_initialized: u32 = 0
var superblock: Ext2Superblock
var block_size: u32 = 1024

export fn ext2_init() {
  if ext2_initialized == 1 { return }
  
  var buffer: [u8; 1024]
  ata.ata_read_sector(0, 2, @ptrFromInt(buffer))
  
  var sb: Ext2Superblock = @intToPtr(@ptrFromInt(buffer), Ext2Superblock)
  
  if sb.magic != EXT2_SUPER_MAGIC {
    foundation.serial_write_string("[EXT2] Invalid magic\n")
    return
  }
  
  superblock = sb
  block_size = 1024 << sb.log_block_size
  
  ext2_initialized = 1
  foundation.serial_write_string("[EXT2] Initialized\n")
}

export fn ext2_read_inode(ino: u32) -> u64 {
  if ext2_initialized == 0 { return 0 }
  
  var group: u32 = (ino - 1) / superblock.inodes_per_group
  var index: u32 = (ino - 1) % superblock.inodes_per_group
  
  var inode_table: u32 = 5  // Simplified
  var block: u32 = inode_table + (index * 128) / block_size
  
  var buffer: [u8; 1024]
  ata.ata_read_sector(0, block, @ptrFromInt(buffer))
  
  var offset: u32 = (index * 128) % block_size
  return @ptrFromInt(buffer) + offset
}

export fn ext2_read_file(ino: u32, offset: u64, buffer: u64, size: u64) -> u64 {
  if ext2_initialized == 0 { return 0 }
  
  var inode_ptr: u64 = ext2_read_inode(ino)
  if inode_ptr == 0 { return 0 }
  
  var inode: Ext2Inode = @intToPtr(inode_ptr, Ext2Inode)
  
  var block_num: u32 = offset / block_size
  if block_num >= 12 { return 0 }
  
  var block_buffer: [u8; 1024]
  ata.ata_read_sector(0, inode.block[block_num], @ptrFromInt(block_buffer))
  
  var block_offset: u64 = offset % block_size
  var to_read: u64 = size
  if to_read > (block_size - block_offset) {
    to_read = block_size - block_offset
  }
  
  var i: u64 = 0
  while i < to_read {
    @ptrToInt(buffer + i, u8) = block_buffer[block_offset + i]
    i = i + 1
  }
  
  return to_read
}
