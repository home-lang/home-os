// home-os exFAT Filesystem
// Extended FAT for large drives

import "../core/foundation.home" as foundation
import "../drivers/ata.home" as ata

const EXFAT_SIGNATURE: u64 = 0x5441465845  // "EXFAT"

struct ExfatBootSector {
  jump_boot: [u8; 3],
  file_system_name: [u8; 8],
  must_be_zero: [u8; 53],
  partition_offset: u64,
  volume_length: u64,
  fat_offset: u32,
  fat_length: u32,
  cluster_heap_offset: u32,
  cluster_count: u32,
  root_directory_cluster: u32,
  volume_serial_number: u32,
  file_system_revision: u16,
  volume_flags: u16,
  bytes_per_sector_shift: u8,
  sectors_per_cluster_shift: u8
}

var exfat_initialized: u32 = 0
var boot_sector: ExfatBootSector

export fn exfat_init() {
  if exfat_initialized == 1 { return }
  
  var buffer: [u8; 512]
  ata.ata_read_sector(0, 0, @ptrFromInt(buffer))
  
  boot_sector = @intToPtr(@ptrFromInt(buffer), ExfatBootSector)
  
  exfat_initialized = 1
  foundation.serial_write_string("[exFAT] Initialized\n")
}

export fn exfat_read_cluster(cluster: u32, buffer: u64) -> u32 {
  if exfat_initialized == 0 { return 1 }
  
  var sector: u32 = boot_sector.cluster_heap_offset + (cluster << boot_sector.sectors_per_cluster_shift)
  ata.ata_read_sector(0, sector, buffer)
  
  return 0
}
