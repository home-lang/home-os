// home-os ISO 9660 Filesystem
// CD/DVD filesystem support

import "../core/foundation.home" as foundation
import "../drivers/cdrom.home" as cdrom

const ISO_SECTOR_SIZE: u32 = 2048
const ISO_MAGIC: u32 = 0x30304443  // "CD001"

struct IsoVolumeDescriptor {
  type: u8,
  id: [u8; 5],
  version: u8,
  unused1: u8,
  system_id: [u8; 32],
  volume_id: [u8; 32],
  unused2: [u8; 8],
  volume_space_size: u32,
  unused3: [u8; 32],
  volume_set_size: u16,
  volume_sequence_number: u16,
  logical_block_size: u16
}

struct IsoDirectoryEntry {
  length: u8,
  ext_attr_length: u8,
  extent: u32,
  size: u32,
  date: [u8; 7],
  flags: u8,
  file_unit_size: u8,
  interleave: u8,
  volume_sequence: u16,
  name_len: u8
}

var iso_initialized: u32 = 0
var root_extent: u32 = 0

export fn iso9660_init() {
  if iso_initialized == 1 { return }
  
  cdrom.cdrom_init()
  
  var buffer: [u8; 2048]
  cdrom.cdrom_read_sector(16, @ptrFromInt(buffer))
  
  var vd: IsoVolumeDescriptor = @intToPtr(@ptrFromInt(buffer), IsoVolumeDescriptor)
  
  if vd.type == 1 {
    root_extent = 0  // Parse root directory
    iso_initialized = 1
    foundation.serial_write_string("[ISO9660] Initialized\n")
  }
}

export fn iso9660_read_file(path: u64, buffer: u64, size: u32) -> u32 {
  if iso_initialized == 0 { return 0 }
  
  // Find file and read (stub)
  return 0
}
