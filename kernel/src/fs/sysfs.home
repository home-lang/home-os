// home-os SysFS
// System filesystem (/sys)

import "../core/foundation.home" as foundation

const SYSFS_MAX_ENTRIES: u32 = 512

struct SysfsEntry {
  path: [u8; 128],
  value: [u8; 256],
  in_use: u32
}

var sysfs_entries: [SysfsEntry; 512]
var sysfs_entry_count: u32 = 0

export fn sysfs_init() {
  sysfs_entry_count = 0
  foundation.serial_write_string("[SysFS] Initialized\n")
}

export fn sysfs_create_file(path: u64, value: u64) -> u32 {
  if sysfs_entry_count >= SYSFS_MAX_ENTRIES { return 1 }
  
  var i: u32 = 0
  while i < 128 {
    sysfs_entries[sysfs_entry_count].path[i] = @intToPtr(path + i, u8)
    if sysfs_entries[sysfs_entry_count].path[i] == 0 { break }
    i = i + 1
  }
  
  i = 0
  while i < 256 {
    sysfs_entries[sysfs_entry_count].value[i] = @intToPtr(value + i, u8)
    if sysfs_entries[sysfs_entry_count].value[i] == 0 { break }
    i = i + 1
  }
  
  sysfs_entries[sysfs_entry_count].in_use = 1
  sysfs_entry_count = sysfs_entry_count + 1
  
  return 0
}

export fn sysfs_read_file(path: u64, buffer: u64, size: u32) -> u32 {
  var i: u32 = 0
  while i < sysfs_entry_count {
    if sysfs_entries[i].in_use == 1 {
      var match: u32 = 1
      var j: u32 = 0
      while j < 128 {
        if sysfs_entries[i].path[j] != @intToPtr(path + j, u8) {
          match = 0
          break
        }
        if sysfs_entries[i].path[j] == 0 { break }
        j = j + 1
      }
      
      if match == 1 {
        j = 0
        while j < size and j < 256 {
          @ptrToInt(buffer + j, u8) = sysfs_entries[i].value[j]
          if sysfs_entries[i].value[j] == 0 { break }
          j = j + 1
        }
        return j
      }
    }
    i = i + 1
  }
  
  return 0
}
