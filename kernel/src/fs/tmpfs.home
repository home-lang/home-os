// home-os TmpFS
// Temporary filesystem (RAM-based)

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory

const TMPFS_MAX_FILES: u32 = 256

struct TmpfsFile {
  name: [u8; 64],
  data: u64,
  size: u32,
  in_use: u32
}

var tmpfs_files: [TmpfsFile; 256]
var tmpfs_file_count: u32 = 0

export fn tmpfs_init() {
  tmpfs_file_count = 0
  foundation.serial_write_string("[TmpFS] Initialized\n")
}

export fn tmpfs_create(name: u64, size: u32) -> u32 {
  if tmpfs_file_count >= TMPFS_MAX_FILES { return 0xFFFFFFFF }
  
  var data: u64 = memory.kmalloc(size)
  if data == 0 { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < 64 {
    tmpfs_files[tmpfs_file_count].name[i] = @intToPtr(name + i, u8)
    if tmpfs_files[tmpfs_file_count].name[i] == 0 { break }
    i = i + 1
  }
  
  tmpfs_files[tmpfs_file_count].data = data
  tmpfs_files[tmpfs_file_count].size = size
  tmpfs_files[tmpfs_file_count].in_use = 1
  
  var id: u32 = tmpfs_file_count
  tmpfs_file_count = tmpfs_file_count + 1
  
  return id
}

export fn tmpfs_open(name: u64) -> u32 {
  var i: u32 = 0
  while i < tmpfs_file_count {
    if tmpfs_files[i].in_use == 1 {
      var match: u32 = 1
      var j: u32 = 0
      while j < 64 {
        if tmpfs_files[i].name[j] != @intToPtr(name + j, u8) {
          match = 0
          break
        }
        if tmpfs_files[i].name[j] == 0 { break }
        j = j + 1
      }
      
      if match == 1 {
        return i
      }
    }
    i = i + 1
  }
  
  return 0xFFFFFFFF
}

export fn tmpfs_read(file_id: u32, offset: u32, buffer: u64, size: u32) -> u32 {
  if file_id >= tmpfs_file_count { return 0 }
  if tmpfs_files[file_id].in_use == 0 { return 0 }
  
  if offset >= tmpfs_files[file_id].size { return 0 }
  
  var to_read: u32 = size
  if offset + to_read > tmpfs_files[file_id].size {
    to_read = tmpfs_files[file_id].size - offset
  }
  
  var i: u32 = 0
  while i < to_read {
    @ptrToInt(buffer + i, u8) = @intToPtr(tmpfs_files[file_id].data + offset + i, u8)
    i = i + 1
  }
  
  return to_read
}

export fn tmpfs_write(file_id: u32, offset: u32, buffer: u64, size: u32) -> u32 {
  if file_id >= tmpfs_file_count { return 0 }
  if tmpfs_files[file_id].in_use == 0 { return 0 }
  
  if offset >= tmpfs_files[file_id].size { return 0 }
  
  var to_write: u32 = size
  if offset + to_write > tmpfs_files[file_id].size {
    to_write = tmpfs_files[file_id].size - offset
  }
  
  var i: u32 = 0
  while i < to_write {
    @ptrToInt(tmpfs_files[file_id].data + offset + i, u8) = @intToPtr(buffer + i, u8)
    i = i + 1
  }
  
  return to_write
}

export fn tmpfs_delete(file_id: u32) {
  if file_id >= tmpfs_file_count { return }
  if tmpfs_files[file_id].in_use == 0 { return }
  
  memory.kfree(tmpfs_files[file_id].data)
  tmpfs_files[file_id].in_use = 0
}
