// home-os DevFS
// Device filesystem (/dev)

import "../core/foundation.home" as foundation

const DEVFS_MAX_DEVICES: u32 = 128

const DEV_TYPE_CHAR: u32 = 1
const DEV_TYPE_BLOCK: u32 = 2

struct DeviceNode {
  name: [u8; 32],
  type: u32,
  major: u32,
  minor: u32,
  read_fn: u64,
  write_fn: u64,
  in_use: u32
}

var devices: [DeviceNode; 128]
var device_count: u32 = 0

export fn devfs_init() {
  device_count = 0
  foundation.serial_write_string("[DevFS] Initialized\n")
}

export fn devfs_register_device(name: u64, type: u32, major: u32, minor: u32, read_fn: u64, write_fn: u64) -> u32 {
  if device_count >= DEVFS_MAX_DEVICES { return 0xFFFFFFFF }
  
  var i: u32 = 0
  while i < 32 {
    devices[device_count].name[i] = @intToPtr(name + i, u8)
    if devices[device_count].name[i] == 0 { break }
    i = i + 1
  }
  
  devices[device_count].type = type
  devices[device_count].major = major
  devices[device_count].minor = minor
  devices[device_count].read_fn = read_fn
  devices[device_count].write_fn = write_fn
  devices[device_count].in_use = 1
  
  var id: u32 = device_count
  device_count = device_count + 1
  
  foundation.serial_write_string("[DevFS] Registered device: ")
  foundation.serial_write_string(name)
  foundation.serial_write_string("\n")
  
  return id
}

export fn devfs_open(name: u64) -> u32 {
  var i: u32 = 0
  while i < device_count {
    if devices[i].in_use == 1 {
      var match: u32 = 1
      var j: u32 = 0
      while j < 32 {
        if devices[i].name[j] != @intToPtr(name + j, u8) {
          match = 0
          break
        }
        if devices[i].name[j] == 0 { break }
        j = j + 1
      }
      
      if match == 1 {
        return i
      }
    }
    i = i + 1
  }
  
  return 0xFFFFFFFF
}

export fn devfs_read(dev_id: u32, buffer: u64, size: u32) -> u32 {
  if dev_id >= device_count { return 0 }
  if devices[dev_id].read_fn == 0 { return 0 }
  
  // Call read function (stub)
  return 0
}

export fn devfs_write(dev_id: u32, buffer: u64, size: u32) -> u32 {
  if dev_id >= device_count { return 0 }
  if devices[dev_id].write_fn == 0 { return 0 }
  
  // Call write function (stub)
  return 0
}
