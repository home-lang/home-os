// home-os InitramFS
// Initial RAM filesystem

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory
import "../fs/tmpfs.home" as tmpfs

const INITRAMFS_MAGIC: u32 = 0x070701

struct CpioHeader {
  magic: [u8; 6],
  ino: [u8; 8],
  mode: [u8; 8],
  uid: [u8; 8],
  gid: [u8; 8],
  nlink: [u8; 8],
  mtime: [u8; 8],
  filesize: [u8; 8],
  devmajor: [u8; 8],
  devminor: [u8; 8],
  rdevmajor: [u8; 8],
  rdevminor: [u8; 8],
  namesize: [u8; 8],
  check: [u8; 8]
}

var initramfs_base: u64 = 0
var initramfs_size: u32 = 0

export fn initramfs_init(base: u64, size: u32) {
  initramfs_base = base
  initramfs_size = size
  tmpfs.tmpfs_init()
  foundation.serial_write_string("[InitramFS] Initialized\n")
}

export fn initramfs_extract() -> u32 {
  if initramfs_base == 0 { return 1 }
  
  foundation.serial_write_string("[InitramFS] Extracting...\n")
  
  var offset: u32 = 0
  var file_count: u32 = 0
  
  while offset < initramfs_size {
    var header: CpioHeader = @intToPtr(initramfs_base + offset, CpioHeader)
    
    // Parse header (stub)
    offset = offset + 110  // Header size
    
    // Extract file (stub)
    file_count = file_count + 1
    
    if file_count > 100 { break }  // Safety limit
  }
  
  foundation.serial_write_string("[InitramFS] Extracted ")
  foundation.serial_write_string(" files\n")
  
  return 0
}
