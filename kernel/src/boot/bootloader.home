// home-os Bootloader Interface
// Boot protocol and handoff

import "../core/foundation.home" as foundation

const BOOT_MAGIC: u32 = 0xB007CAFE

struct BootInfo {
  magic: u32,
  memory_map_addr: u64,
  memory_map_size: u32,
  kernel_base: u64,
  kernel_size: u32,
  initramfs_base: u64,
  initramfs_size: u32,
  cmdline: [u8; 256],
  framebuffer_addr: u64,
  framebuffer_width: u32,
  framebuffer_height: u32,
  framebuffer_pitch: u32
}

var boot_info: BootInfo

export fn bootloader_init(info_addr: u64) {
  if info_addr == 0 {
    foundation.serial_write_string("[Boot] No boot info provided\n")
    return
  }
  
  boot_info = @intToPtr(info_addr, BootInfo)
  
  if boot_info.magic != BOOT_MAGIC {
    foundation.serial_write_string("[Boot] Invalid boot magic\n")
    return
  }
  
  foundation.serial_write_string("[Boot] Boot info loaded\n")
  foundation.serial_write_string("[Boot] Kernel base: ")
  foundation.serial_write_string("\n")
  foundation.serial_write_string("[Boot] Memory: ")
  foundation.serial_write_string(" MB\n")
}

export fn bootloader_get_memory_map() -> u64 {
  return boot_info.memory_map_addr
}

export fn bootloader_get_framebuffer() -> u64 {
  return boot_info.framebuffer_addr
}

export fn bootloader_get_cmdline() -> u64 {
  return @ptrFromInt(boot_info.cmdline)
}
