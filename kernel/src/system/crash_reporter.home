// home-os Kernel - Crash Reporter
// Collect and report system crashes

import "../core/foundation.home" as foundation
import "../core/filesystem.home" as filesystem

const MAX_CRASH_REPORTS: u32 = 100
const CRASH_LOG_PATH: u64 = @ptrFromInt("/var/log/crashes")

struct CrashReport {
  timestamp: u64,
  process_name: [u8; 128],
  pid: u32,
  signal: u32,
  rip: u64,
  rsp: u64,
  rbp: u64,
  backtrace: [u64; 32],
  backtrace_depth: u32
}

var crash_reports: [CrashReport; 100]
var crash_count: u32 = 0

export fn crash_reporter_init() {
  crash_count = 0
  
  // Create crash log directory
  filesystem.vfs_mkdir(CRASH_LOG_PATH, 0x1ED)
  
  foundation.serial_write_string("[CrashReporter] Initialized\n")
}

export fn crash_reporter_report(process_name: u64, pid: u32, signal: u32, rip: u64, rsp: u64, rbp: u64) -> u32 {
  if crash_count >= MAX_CRASH_REPORTS { return 0 }
  
  var report_id: u32 = crash_count
  
  foundation.serial_write_string("[CrashReporter] Process crashed: ")
  foundation.serial_write_string(process_name)
  foundation.serial_write_string(" (PID ")
  foundation.serial_write_hex(pid)
  foundation.serial_write_string(")\n")
  
  crash_reports[report_id].timestamp = foundation.timer_get_ticks()
  crash_reports[report_id].pid = pid
  crash_reports[report_id].signal = signal
  crash_reports[report_id].rip = rip
  crash_reports[report_id].rsp = rsp
  crash_reports[report_id].rbp = rbp
  
  // Copy process name
  var i: u32 = 0
  while i < 127 {
    var ch: u8 = @intToPtr(process_name + i, u8)
    crash_reports[report_id].process_name[i] = ch
    if ch == 0 { break }
    i = i + 1
  }
  
  // Collect backtrace
  crash_reports[report_id].backtrace_depth = crash_collect_backtrace(rbp, @ptrFromInt(crash_reports[report_id].backtrace), 32)
  
  // Write crash report to file
  crash_write_report(report_id)
  
  crash_count = crash_count + 1
  
  return report_id
}

fn crash_collect_backtrace(rbp: u64, backtrace: u64, max_depth: u32) -> u32 {
  var depth: u32 = 0
  var current_rbp: u64 = rbp
  
  while depth < max_depth and current_rbp != 0 {
    var ret_addr: u64 = @intToPtr(current_rbp + 8, u64)
    @intToPtr(backtrace + (depth * 8), u64) = ret_addr
    
    current_rbp = @intToPtr(current_rbp, u64)
    depth = depth + 1
  }
  
  return depth
}

fn crash_write_report(report_id: u32) {
  var filename: [u8; 256]
  crash_build_filename(@ptrFromInt(filename), report_id)
  
  var fd: u32 = filesystem.vfs_open(@ptrFromInt(filename), 0x0242, 0x1B6)
  if fd == 0xFFFFFFFF { return }
  
  var report: [u8; 4096]
  var pos: u32 = 0
  
  // Write header
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("Crash Report\n"))
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("============\n\n"))
  
  // Process info
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("Process: "))
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt(crash_reports[report_id].process_name))
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("\n"))
  
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("PID: "))
  pos = crash_append_hex(@ptrFromInt(report), pos, crash_reports[report_id].pid)
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("\n"))
  
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("Signal: "))
  pos = crash_append_hex(@ptrFromInt(report), pos, crash_reports[report_id].signal)
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("\n\n"))
  
  // Registers
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("Registers:\n"))
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("RIP: 0x"))
  pos = crash_append_hex(@ptrFromInt(report), pos, @truncate(crash_reports[report_id].rip, u32))
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("\n"))
  
  // Backtrace
  pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("\nBacktrace:\n"))
  
  var i: u32 = 0
  while i < crash_reports[report_id].backtrace_depth {
    pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("  #"))
    pos = crash_append_hex(@ptrFromInt(report), pos, i)
    pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("  0x"))
    pos = crash_append_hex(@ptrFromInt(report), pos, @truncate(crash_reports[report_id].backtrace[i], u32))
    pos = crash_append_string(@ptrFromInt(report), pos, @ptrFromInt("\n"))
    i = i + 1
  }
  
  filesystem.vfs_write(fd, @ptrFromInt(report), pos)
  filesystem.vfs_close(fd)
}

fn crash_build_filename(buffer: u64, report_id: u32) {
  var i: u32 = 0
  
  // Copy base path
  var path: u64 = CRASH_LOG_PATH
  while @intToPtr(path + i, u8) != 0 {
    @intToPtr(buffer + i, u8) = @intToPtr(path + i, u8)
    i = i + 1
  }
  
  @intToPtr(buffer + i, u8) = '/'
  i = i + 1
  
  // Add report ID
  @intToPtr(buffer + i, u8) = 'c'
  @intToPtr(buffer + i + 1, u8) = 'r'
  @intToPtr(buffer + i + 2, u8) = 'a'
  @intToPtr(buffer + i + 3, u8) = 's'
  @intToPtr(buffer + i + 4, u8) = 'h'
  @intToPtr(buffer + i + 5, u8) = '.'
  @intToPtr(buffer + i + 6, u8) = 'l'
  @intToPtr(buffer + i + 7, u8) = 'o'
  @intToPtr(buffer + i + 8, u8) = 'g'
  @intToPtr(buffer + i + 9, u8) = 0
}

fn crash_append_string(buffer: u64, pos: u32, str: u64) -> u32 {
  var i: u32 = 0
  while @intToPtr(str + i, u8) != 0 {
    @intToPtr(buffer + pos + i, u8) = @intToPtr(str + i, u8)
    i = i + 1
  }
  return pos + i
}

fn crash_append_hex(buffer: u64, pos: u32, value: u32) -> u32 {
  var hex_chars: [u8; 16]
  hex_chars[0] = '0'
  hex_chars[1] = '1'
  hex_chars[2] = '2'
  hex_chars[3] = '3'
  hex_chars[4] = '4'
  hex_chars[5] = '5'
  hex_chars[6] = '6'
  hex_chars[7] = '7'
  hex_chars[8] = '8'
  hex_chars[9] = '9'
  hex_chars[10] = 'a'
  hex_chars[11] = 'b'
  hex_chars[12] = 'c'
  hex_chars[13] = 'd'
  hex_chars[14] = 'e'
  hex_chars[15] = 'f'
  
  var i: u32 = 0
  while i < 8 {
    var nibble: u8 = @truncate((value >> ((7 - i) * 4)) & 0xF, u8)
    @intToPtr(buffer + pos + i, u8) = hex_chars[nibble]
    i = i + 1
  }
  
  return pos + 8
}

export fn crash_reporter_list() {
  foundation.serial_write_string("\n[CrashReporter] Crash reports:\n")
  
  var i: u32 = 0
  while i < crash_count {
    foundation.serial_write_string("  ")
    foundation.serial_write_hex(i)
    foundation.serial_write_string(": ")
    foundation.serial_write_string(@ptrFromInt(crash_reports[i].process_name))
    foundation.serial_write_string(" (PID ")
    foundation.serial_write_hex(crash_reports[i].pid)
    foundation.serial_write_string(")\n")
    
    i = i + 1
  }
}

export fn crash_reporter_get_count() -> u32 {
  return crash_count
}
