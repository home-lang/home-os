// home-os Kernel - System Call Interface
// Real implementation

import "../core/foundation.home" as foundation
import "../core/memory.home" as memory
import "../core/process.home" as process
import "../core/filesystem.home" as filesystem

// System call numbers
const SYS_EXIT: u32 = 0
const SYS_FORK: u32 = 1
const SYS_READ: u32 = 2
const SYS_WRITE: u32 = 3
const SYS_OPEN: u32 = 4
const SYS_CLOSE: u32 = 5
const SYS_WAIT: u32 = 6
const SYS_EXEC: u32 = 7
const SYS_GETPID: u32 = 8
const SYS_KILL: u32 = 9
const SYS_MMAP: u32 = 10
const SYS_MUNMAP: u32 = 11
const SYS_BRK: u32 = 12
const SYS_LSEEK: u32 = 13
const SYS_MKDIR: u32 = 14
const SYS_RMDIR: u32 = 15

export fn syscall_handler(syscall_num: u32, arg1: u64, arg2: u64, arg3: u64, arg4: u64) -> u64 {
  if syscall_num == SYS_EXIT {
    process.sys_exit(arg1)
    return 0
  } else if syscall_num == SYS_FORK {
    return process.sys_fork()
  } else if syscall_num == SYS_READ {
    return filesystem.vfs_read(arg1, arg2, arg3)
  } else if syscall_num == SYS_WRITE {
    return filesystem.vfs_write(arg1, arg2, arg3)
  } else if syscall_num == SYS_OPEN {
    return filesystem.vfs_open(arg1, arg2)
  } else if syscall_num == SYS_CLOSE {
    return filesystem.vfs_close(arg1)
  } else if syscall_num == SYS_WAIT {
    return process.sys_wait(arg1)
  } else if syscall_num == SYS_EXEC {
    return process.sys_exec(arg1)
  } else if syscall_num == SYS_GETPID {
    return process.sys_getpid()
  } else if syscall_num == SYS_LSEEK {
    return filesystem.vfs_lseek(arg1, arg2, arg3)
  } else if syscall_num == SYS_MKDIR {
    return filesystem.vfs_mkdir(arg1, arg2)
  } else if syscall_num == SYS_RMDIR {
    return filesystem.vfs_rmdir(arg1)
  } else if syscall_num == SYS_MMAP {
    return memory.kmalloc(arg1)
  } else if syscall_num == SYS_MUNMAP {
    memory.kfree(arg1)
    return 0
  } else if syscall_num == SYS_BRK {
    return memory.kmalloc(arg1)
  }
  
  return 0xFFFFFFFFFFFFFFFF  // Error
}

export fn syscall_init() {
  foundation.serial_write_string("[Syscall] Initialized\n")
}
